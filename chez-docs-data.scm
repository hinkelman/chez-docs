(define chez-docs-data (quote ((csug ("system:s1" "\n\n\nprocedure: (warning who msg irritant ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "warning raises a continuable exception with condition type\n&warning and should be used to describe situations for which the\n&warning condition type is appropriate, typically a situation\nthat should not prevent the program from continuing but might result\nin a more serious problem at some later point.\n\n" "\nThe continuation object with which the exception is raised also includes\na &who condition whose who field is who if who is\nnot #f, a &message condition whose message field is\nmsg, and an &irritants condition whose irritants field\nis (irritant ...).\n\n" "\nwho must be a string, a symbol, or #f identifying the procedure\nor syntactic form reporting the warning.\nIt is usually best to identify a procedure the programmer has called rather\nthan some other procedure the programmer may not be aware is involved in\ncarrying out the operation.\nmsg must be a string and should describe the exceptional situation.\nThe irritants may be any Scheme objects and should include values that may\nhave caused or been materially involved in the exceptional situation.\n\n\n") ("system:s2" "\n\n\nprocedure: (assertion-violationf who msg irritant ...)\n\nreturns: does not return\n\n\nprocedure: (errorf who msg irritant ...)\n\nreturns: does not return\n\n\nprocedure: (warningf who msg irritant ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "These procedures are like assertion-violation, error,\nand warning except\nthat msg is assumed to be a format string, as if in a call to\nformat (Section 9.13), with\nirritant ... treated as the additional arguments to\nformat.\nThis allows programs to control the appearance of the error message, at\nleast when the default exception handler is in place.\n\n" "\nFor each of these procedures, the continuation object with which the exception\nis raised includes a &format condition to signify that the string\ncontained in the condition object's &message condition is a\nformat string and the objects contained in the condition object's\n&irritants condition should be treated as the additional\nformat arguments.\n\n") ("system:s4" "\n\n\nsyntax: &format\n\n\nprocedure: (make-format-condition)\n\nreturns: a condition of type &format\n\n\nprocedure: (format-condition? obj)\n\nreturns: #t if obj is a condition of type &format, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n\n" "Presence of this condition type within a compound condition indicates\nthat the string provided by the &message condition, if\npresent, is a format string and the list of objects provided by\nthe &irritants condition, if present, should be treated as\nadditional format arguments.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &format &condition\n\n  make-format-condition format-condition?)\n") ("system:s5" "\n\nsyntax: &source\n\n\nprocedure: (make-source-condition form)\n\nreturns: a condition of type &source\n\n\nprocedure: (source-condition? obj)\n\nreturns: #t if obj is a condition of type &source, #f otherwise\n\n\nprocedure: (source-condition-form condition)\n\nreturns: the contents of condition's form field\n\nlibraries: (chezscheme)\n\n" "\n\n" "This condition type can be included within a compound condition when a\nsource expression can be identified in situations in which a\n&syntax condition would be inappropriate, such as when a\nrun-time assertion violation is detected.\nThe form argument should be an s-expression or syntax object\nrepresenting the source expression.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &source &condition\n\n  make-source-condition source-condition?\n\n  (form source-condition-form))\n") ("system:s6" "\n\nsyntax: &continuation\n\n\nprocedure: (make-continuation-condition continuation)\n\nreturns: a condition of type &continuation\n\n\nprocedure: (continuation-condition? obj)\n\nreturns: #t if obj is a condition of type &continuation, #f otherwise\n\n\nprocedure: (condition-continuation condition)\n\nreturns: the contents of condition's continuation field\n\nlibraries: (chezscheme)\n\n" "\n\n" "This condition type can be included within a compound condition to indicate\nthe current continuation at the point where the exception described by the\ncondition occurred.\nThe continuation of a failed assert or a call to\nassertion-violation, assertion-violationf,\nerror, errorf, or syntax-error is now included\nvia this condition type in the conditions passed to raise.\nThe continuation argument should be a continuation.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &continuation &condition\n\n  make-continuation-condition continuation-condition?\n\n  (continuation condition-continuation))\n") ("system:s7" "\n\nprocedure: (display-condition obj)\n\n\nprocedure: (display-condition obj textual-output-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "If textual-output-port is not supplied, it defaults to the current output port.\nThis procedure displays a message to the effect that an exception\nhas occurred with value obj.\nIf obj is a condition (Chapter http://scheme.com/tspl4/./exceptions.html#g14711 of\nThe Scheme Programming Language, 4th Edition), it displays information encapsulated within the condition,\nhandling messages, who conditions, irritants, source information,\netc., as appropriate.\n\n") ("system:s8" "\n\n\nprocedure: (default-exception-handler obj)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure is the default value of the base-exception-handler\nparameter called on a condition when no other exception handler has been\ndefined or when all dynamically established exception handlers have chosen\nnot to handle the condition.\nIt first displays obj, as if with display-condition, to the\nconsole error port.\nFor non-serious warning conditions, it returns immediately after displaying\nthe condition.\n\n" "\nFor serious or other non-warning conditions, it\nsaves the condition in the parameter debug-condition, where\ndebug (Section 3.2) can retrieve it and\nallow it to be inspected.\nIf the debug-on-exception parameter is set to #f (the\ndefault unless the --debug-on-exception command-line option is provided), the\nhandler prints a message instructing the user to type (debug) to\nenter the debugger, then resets to the current caf.\nOtherwise, the handler invokes debug directly and resets if\ndebug returns.\n\n" "\nIf an I/O exception occurs while attempting to display the condition,\nthe default exception handler resets (as if by calling reset).\nThe intent is to avoid an infinite regression (ultimately ending\nin exhaustion of memory) in which the process repeatedly recurs\nback to the default exception handler trying to write to a console-error\nport (typically stderr) that is no longer writable, e.g., due to\nthe other end of a pipe or socket having been closed.\n\n") ("system:s10" "\n\n\nglobal parameter: debug-on-exception\n\nlibraries: (chezscheme)\n\n" "The value of this parameter determines whether the default exception handler\nimmediately enters the debugger immediately when it receives a serious or\nnon-warning condition.\nIf the --debug-on-exception\ncommand-line option (Section 2.1) has been provided, the\ninitial value of this parameter is #t.\nOtherwise, the initial value is #f.\n\n\n") ("system:s12" "\n\n\nthread parameter: base-exception-handler\n\nlibraries: (chezscheme)\n\n" "The value of this parameter must be a procedure, and the procedure\nshould accept one argument.\nThe default value of base-exception-handler is\nthe procedure default-exception-handler.\n\n" "\nThe value of this parameter is invoked whenever no exception handler\nestablished by a program has chosen to handle an exception.\n\n") ("system:s13" "\n\n\nthread parameter: debug-condition\n\nlibraries: (chezscheme)\n\n" "This parameter is used by the default exception handler to hold the\nlast serious or non-warning condition received by the handler, where\nit can be inspected via the debug procedure\n(Section 3.2).\nIt can also be invoked by user code to store or retrieve a\ncondition.\n\n") ("system:s14" "\n\n\nthread parameter: current-exception-state\n\nlibraries: (chezscheme)\n\n" "current-exception-state may be used to get or set\nthe current exception state.\nWhen called without arguments, current-exception-state returns\nan exception state comprising the current stack of handlers established\nby with-exception-handler and guard.\nWhen called with a single argument, which must be an exception state,\ncurrent-exception-state sets the exception state.\n\n") ("system:s15" "\n\n\nprocedure: (create-exception-state)\n\n\nprocedure: (create-exception-state procedure)\n\nlibraries: (chezscheme)\n\n" "create-exception-state creates an exception\nstate whose stack of exception handlers is empty except for, in effect,\nan infinite number of occurrences of handler at its\nbase.\nhandler must be a procedure, and should accept one argument.\nIf not provided, handler defaults to a procedure equivalent\nto the value of the following expression.\n\n" "\n\n" "(lambda (x) ((base-exception-handler) x))\n") ("system:s17" "\n\n\nprocedure: (break who msg irritant ...)\n\n\nprocedure: (break who)\n\n\nprocedure: (break)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "The arguments to break follow the protocol described above for\nerrorf.\nThe default break handler (see break-handler) displays a message and\ninvokes the debugger.\nThe format string and objects may be omitted, in which case the\nmessage issued by the default break handler identifies the break\nusing the who argument but provides no more information\nabout the break.\nIf the who argument is omitted as well, no message is generated.\nThe default break handler returns normally if the debugger\nexits normally.\n\n") ("system:s19" "\n\n\nthread parameter: break-handler\n\nlibraries: (chezscheme)\n\n" "The value of this parameter must be a procedure.\nThe current break handler is called by break, which passes\nalong its arguments.\nSee break for a description of the default break\nhandler.\nThe example below shows how to disable breaks.\n\n" "\n\n" "(break-handler (lambda args (void)))\n") ("system:s20" "\n\nthread parameter: keyboard-interrupt-handler\n\nlibraries: (chezscheme)\n\n" "The value of this parameter must be a procedure.\nThe keyboard-interrupt handler is called (with no arguments) when\na keyboard interrupt occurs.\nThe default keyboard-interrupt handler invokes the interactive\ndebugger.\nIf the debugger exits normally the interrupted computation is\nresumed.\nThe example below shows how to install a keyboard-interrupt handler\nthat resets without invoking the debugger.\n\n" "\n\n" "(keyboard-interrupt-handler\n\n  (lambda ()\n\n    (newline (console-output-port))\n\n    (reset)))\n") ("system:s22" "desc:set-timer\n\n\nprocedure: (set-timer n)\n\nreturns: previous current timer value\n\nlibraries: (chezscheme)\n\n" "n must be a nonnegative integer.\nWhen n is nonzero, set-timer starts an internal timer with\nan initial value of n.\nWhen n ticks elapse, a timer interrupt occurs, resulting in\ninvocation of the timer interrupt handler.\nEach tick corresponds roughly to one nonleaf procedure call (see the\nintroduction to this section); thus, ticks are not\nuniform time units but instead depend heavily on how much work is done\nby each procedure call.\n\n" "\nWhen n is zero, set-timer turns the timer off.\n\n" "\nThe value returned in either case is the value of the timer before the\ncall to set-timer.\nA return value of 0 should not be taken to imply that the timer was not on;\nthe return value may also be 0 if the timer was just about to fire when\nthe call to set-timer occurred.\n\n" "\nThe engine mechanism (Section 6.4) is built on top of the\ntimer interrupt so timer interrupts should not be used with engines.\n\n\n") ("system:s24" "\n\n\nthread parameter: timer-interrupt-handler\n\nlibraries: (chezscheme)\n\n" "The value of this parameter must be a procedure.\nThe timer interrupt handler is called by the system when the internal timer\n(set by set-timer) expires.\nThe default handler raises an exception with condition type &assertion\nto say that the handler has not\nbeen defined; any program that uses the timer should redefine the\nhandler before setting the timer.\n\n") ("system:s26" "\n\n\nprocedure: (disable-interrupts)\n\n\nprocedure: (enable-interrupts)\n\nreturns: disable count\n\nlibraries: (chezscheme)\n\n" "disable-interrupts disables the handling of interrupts,\nincluding timer, keyboard, and collect request interrupts.\nenable-interrupts re-enables these interrupts.\nThe system maintains a disable count that starts at zero; when zero,\ninterrupts are enabled.\nEach call to disable-interrupts increments the count,\neffectively disabling interrupts.\nEach call to enable-interrupts decrements the count, if\nnot already zero, effectively enabling interrupts.\nFor example, two calls to disable-interrupts followed by one call to\nenable-interrupts leaves interrupts disabled.\nCalls to enable-interrupts when the count is already zero\n(and interrupts are enabled) have no effect.\nThe value returned by either procedure is the number of calls to\nenable-interrupts required to enable interrupts.\n\n" "\nGreat care should be exercised when using these procedures, since disabling\ninterrupts inhibits the normal processing of keyboard interrupts,\ntimer interrupts, and, perhaps most importantly, collect request interrupts.\nSince garbage collection does not happen automatically when interrupts are\ndisabled, it is possible for the storage allocator to run out of space\nunnecessarily should interrupts be disabled for a long period of time.\n\n" "\nThe with-interrupts-disabled syntactic form should be used instead of\nthese more primitive procedures whenever possible,\nsince with-interrupts-disabled ensures that interrupts are re-enabled\nwhenever a nonlocal exit occurs, such as when an exception is handled by\nthe default exception handler.\n\n\n") ("system:s27" "\n\n\nsyntax: (with-interrupts-disabled body1 body2 ...)\n\n\nsyntax: (critical-section body1 body2 ...)\n\nreturns: the values of the body body1 body2 ...\n\nlibraries: (chezscheme)\n\n" "with-interrupts-disabled evaluates the body\nbody1 body2 ... with interrupts disabled.\nThat is, upon entry, interrupts are disabled, and\nupon exit, interrupts are re-enabled.\nThus, with-interrupts-disabled allows the implementation of indivisible\noperations in nonthreaded versions of Chez Scheme or within a single thread\nin threaded versions of Chez Scheme.\ncritical-section is the same as with-interrupts-disabled and\nis provided for backward compatibility.\n\n" "\nwith-interrupts-disabled can be defined as follows.\n\n" "\n\n" "(define-syntax with-interrupts-disabled\n\n  (syntax-rules ()\n\n    [(_ b1 b2 ...)\n\n     (dynamic-wind\n\n       disable-interrupts\n\n       (lambda () b1 b2 ...)\n\n       enable-interrupts)]))\n" "The use of dynamic-wind ensures that interrupts are\ndisabled whenever the body of the with-interrupts-disabled expression\nis active and re-enabled whenever it is not.\nSince calls to disable-interrupts are counted (see the\ndiscussion under disable-interrupts and\nenable-interrupts above), with-interrupts-disabled\nexpressions may be nested with the desired effect.\n\n\n") ("system:s28" "\n\n\nprocedure: (register-signal-handler sig procedure)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "register-signal-handler is used to\nestablish a signal handler for a given low-level signal.\nsig must be an exact integer identifying a valid signal, and\nprocedure should accept one argument.\nSee your host system's <signal.h> or documentation for a list\nof valid signals and their numbers.\nAfter a signal handler for a given signal has been registered, receipt\nof the specified signal results in a call to the handler.\nThe handler is passed the signal number, allowing the same handler to\nbe used for different signals while differentiating among them.\n\n" "\nSignals handled in this fashion are treated like keyboard interrupts in\nthat the handler is not called immediately when the signal is delivered\nto the process, but rather at some procedure call boundary after the\nsignal is delivered.\nIt is generally not a good idea, therefore, to establish handlers for\nmemory faults, illegal instructions, and the like, since the code that\ncauses the fault or illegal instruction will continue to execute\n(presumably erroneously) for some time before the handler is invoked.\nA finite amount of storage is used to buffer as-yet unhandled\nsignals, after which additional signals are dropped.\n\n" "\nregister-signal-handler is supported only on Unix-based\nsystems.\n\n\n") ("system:s29" "\n\n\nprocedure: (environment? obj)\n\nreturns: #t if obj is an environment, otherwise #f\n\nlibraries: (chezscheme)\n\n" "\n" "(environment? (interaction-environment)) --> #t\n\n(environment? 'interaction-environment) --> #f\n\n(environment? (copy-environment (scheme-environment))) --> #t\n\n(environment? (environment '(prefix (rnrs) $rnrs-))) --> #t\n") ("system:s30" "\n\nprocedure: (environment-mutable? env)\n\nreturns: #t if env is mutable, otherwise #f\n\nlibraries: (chezscheme)\n\n" "\n" "(environment-mutable? (interaction-environment)) --> #t\n\n(environment-mutable? (scheme-environment)) --> #f\n\n(environment-mutable? (copy-environment (scheme-environment))) --> #t\n\n(environment-mutable? (environment '(prefix (rnrs) $rnrs-))) --> #f\n") ("system:s31" "\n\nprocedure: (scheme-environment)\n\nreturns: an environment\n\nlibraries: (chezscheme)\n\n" "scheme-environment returns an environment containing\nthe initial top-level bindings.\nThis environment corresponds to the scheme module.\n\n" "\nThe environment returned by this procedure is immutable.\n\n" "\n\n" "(define cons 3)\n\n(top-level-value 'cons (scheme-environment)) --> #<procedure cons>\n\n(set-top-level-value! 'cons 3 (scheme-environment)) --> exception\n") ("system:s32" "\n\nprocedure: (ieee-environment)\n\nreturns: an IEEE/ANSI standard compatibility environment\n\nlibraries: (chezscheme)\n\n" "ieee-environment returns an environment containing\nbindings for the keywords and variables whose meanings are\ndefined by the IEEE/ANSI Standard for Scheme [citation26].\n\n" "\nThe bindings for each of the identifiers in the IEEE environment are those\nof the corresponding Revised6 Report library, so this does not provide\nfull backward compatibility.\n\n" "\nThe environment returned by this procedure is immutable.\n\n" "\n\n" "(define cons 3)\n\n(top-level-value 'cons (ieee-environment)) --> #<procedure cons>\n\n(set-top-level-value! 'cons 3 (ieee-environment)) --> exception\n") ("system:s33" "\n\nthread parameter: interaction-environment\n\nlibraries: (chezscheme)\n\n" "The original value of interaction-environment is the default\ntop-level environment.\nIt is initially set to a mutable copy of\n(scheme-environment) and which may be extended or otherwise\naltered by top-level definitions and assignments.\nIt may be set to any environment, mutable or not, to change the\ndefault top-level evaluation environment.\n\n" "\nAn expression's top-level bindings resolve to the environment that is\nin effect when the expression is expanded, and changing the value\nof this parameter has no effect on running code.\nChanges affect only code that is subsequently expanded, e.g., as the\nresult of a call to eval, load, or\ncompile-file.\n\n" "\n\n" "(define cons 3)\n\ncons --> 3\n\n(top-level-value 'cons (interaction-environment)) --> 3\n\n\n(interaction-environment (scheme-environment))\n\ncons --> #<procedure cons>\n\n(set! cons 3) --> exception: attempt to assign immutable variable\n\n(define cons 3) --> exception: invalid definition in immutable environment\n") ("system:s34" "\n\nprocedure: (copy-environment env)\n\n\nprocedure: (copy-environment env mutable?)\n\n\nprocedure: (copy-environment env mutable? syms)\n\nreturns: a new environment\n\nlibraries: (chezscheme)\n\n" "copy-environment returns a copy of env, i.e., a new\nenvironment that contains the same bindings as env.\n\n" "\nThe environment is mutable if mutable? is omitted or true;\nif mutable? is false, the environment is immutable.\n\n" "\nThe set of bindings copied from env to the new environment\nis determined by syms, which defaults to the value of\n(environment-symbols env).\nThe binding, if any, for each element of syms is copied to the\nnew environment, and no other bindings are present in the new\nenvironment.\n\n" "\nIn the current implementation, the storage space used by an environment\nis never collected, so repeated use of copy-environment will\neventually cause the system to run out of memory.\n\n" "\n\n" "(define e (copy-environment (scheme-environment)))\n\n(eval '(define cons +) e)\n\n(eval '(cons 3 4) e)                    --> 7\n\n(eval '(cons 3 4) (scheme-environment)) --> (3 . 4)\n") ("system:s35" "\n\nprocedure: (environment-symbols env)\n\nreturns: a list of symbols\n\nlibraries: (chezscheme)\n\n" "This procedure returns a list of symbols representing the identifiers\nbound in environment env.\nIt is primarily useful in building the list of symbols to be copied\nfrom one environment to another.\n\n" "\n\n" "(define listless-environment\n\n  (copy-environment\n\n    (scheme-environment)\n\n    #t\n\n    (remq 'list (environment-symbols (scheme-environment)))))\n\n(eval '(let ([x (cons 3 4)]) x) listless-environment) --> (3 . 4)\n\n(eval '(list 3 4) listless-environment) --> exception\n") ("system:s36" "\n\nprocedure: (apropos-list s)\n\n\nprocedure: (apropos-list s env)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "This procedure returns a selected list of symbols and pairs.\nEach symbol in the list represents an identifier bound in env.\nEach pair represents a set of identifiers exported by a\npredefined library or a library previously defined or loaded\ninto the system.\nThe car of the pair is the library name, and the cdr is a list\nof symbols.\nIf s is a string, only entries whose names have s as a\nsubstring are included, and if s is a symbol, only those whose names\nhave the name of s as a substring are selected.\nIf no environment is provided, it defaults to the value of\ninteraction-environment.\n\n" "\n\n" "(library (a) (export a-vector-sortof) (import (rnrs))\n\n  (define a-vector-sortof '(vector 1 2 3)))\n\n(apropos-list 'vector-sort) -->\n\n  (vector-sort vector-sort!\n\n   ((a) a-vector-sortof)\n\n   ((chezscheme) vector-sort vector-sort!)\n\n   ((rnrs) vector-sort vector-sort!)\n\n   ((rnrs sorting) vector-sort vector-sort!)\n\n   ((scheme) vector-sort vector-sort!))\n") ("system:s37" "\n\nprocedure: (apropos s)\n\n\nprocedure: (apropos s env)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "apropos is like apropos-list except the information is\ndisplayed to the current output port, as shown in the following\ntranscript.\n\n" "\n\n" "> (library (a) (export a-vector-sortof) (import (rnrs))\n\n    (define a-vector-sortof '(vector 1 2 3)))\n\n> (apropos 'vector-sort)\n\ninteraction environment:\n\n  vector-sort, vector-sort!\n\n(a):\n\n  a-vector-sortof\n\n(chezscheme):\n\n  vector-sort, vector-sort!\n\n(rnrs):\n\n  vector-sort, vector-sort!\n\n(rnrs sorting):\n\n  vector-sort, vector-sort!\n\n(scheme):\n\n  vector-sort, vector-sort!\n") ("system:s38" "\n\n\nprocedure: (eval obj)\n\n\nprocedure: (eval obj env)\n\nreturns: value of the Scheme form represented by obj\n\nlibraries: (chezscheme)\n\n" "eval treats obj as the representation of an expression.\nIt evaluates the expression in environment env and returns\nits value.\nIf no environment is provided, it defaults to the environment\nreturned by interaction-environment.\n\n" "\nSingle-argument eval is a Chez Scheme extension.\nChez Scheme also permits obj to be the representation of a\nnonexpression form, i.e., a definition, whenever the environment\nis mutable.\nChez Scheme further allows obj to be an annotation\n(Section 11.11), and the default evaluators\nmake use of annotations to incorporate source-file\ninformation in error messages and associate source-file\ninformation with compiled code.\n\n" "\nIn Chez Scheme, eval is actually a wrapper that simply\npasses its arguments to the current evaluator.\n(See current-eval.)\nThe default evaluator is compile, which expands the\nexpression via the current expander (see\ncurrent-expand), compiles it,\nexecutes the resulting code, and returns its value.\nIf the environment argument, env, is present,\ncompile passes it along to the current expander,\nwhich is sc-expand by default.\n\n\n") ("system:s39" "\n\n\nthread parameter: current-eval\n\nlibraries: (chezscheme)\n\n" "current-eval determines the evaluation procedure used by the\nprocedures eval, load, and\nnew-cafe.\ncurrent-eval is initially bound to the value of\ncompile.\n(In Petite Chez Scheme, it is initially bound to the value of\ninterpret.)\nThe evaluation procedure should expect one or two arguments: an object\nto evaluate and an optional environment.\nThe second argument might be an annotation\n(Section 11.11).\n\n" "\n\n" "(current-eval interpret)\n\n(+ 1 1) --> 2\n\n\n(current-eval (lambda (x . ignore) x))\n\n(+ 1 1) --> (+ 1 1)\n") ("system:s43" "\n\nprocedure: (compile obj)\n\n\nprocedure: (compile obj env)\n\nreturns: value of the Scheme form represented by obj\n\nlibraries: (chezscheme)\n\n" "obj, which can be an annotation (Section 11.11)\nor unannotated value, is treated as a Scheme expression, expanded with the\ncurrent expander (the value of current-expand) in the specified\nenvironment (or the interaction environment, if no environment\nis provided), compiled to machine code, and executed.\ncompile is the default value of the current-eval\nparameter.\n\n\n") ("system:s44" "\n\n\nprocedure: (interpret obj)\n\n\nprocedure: (interpret obj env)\n\nreturns: value of the Scheme form represented by obj\n\nlibraries: (chezscheme)\n\n" "interpret is like compile, except that the expression\nis interpreted rather than compiled.\ninterpret may be used as a replacement for compile,\nwith the following caveats:\n\n" "\n\nInterpreted code runs significantly slower.\n\n\nInspector information is not generated for\ninterpreted code, so the inspector is not as useful for interpreted\ncode as it is for compiled code.\n\n\nForeign procedure expressions cannot be\ninterpreted, so the interpreter invokes the compiler for all\nforeign procedure expressions (this is done transparently).\n\n" "\n\n" "\ninterpret is sometimes faster than compile when the\nform to be evaluated is short running, since it avoids some of the\nwork done by compile prior to evaluation.\n\n\n") ("system:s45" "\n\n\nprocedure: (load path)\n\n\nprocedure: (load path eval-proc)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nload reads and evaluates the contents of the file specified by\npath.\nThe file may contain source or object code.\nBy default, load employs eval to evaluate each source\nexpression found in a source file.\nIf eval-proc is specified, load uses this procedure instead.\neval-proc must accept one argument, the expression to evaluate.\nThe expression passed to eval-proc might be an annotation\n(Section 11.11) or an unannotated value.\n\n" "\nThe eval-proc argument\nfacilitates the implementation of embedded Scheme-like languages\nand the use of alternate\nevaluation mechanisms to be used for Scheme programs.\neval-proc can be put to other uses as well.\nFor example,\n\n" "\n\n" "(load \"myfile.ss\"\n\n  (lambda (x)\n\n    (pretty-print\n\n      (if (annotation? x)\n\n          (annotation-stripped x)\n\n          x))\n\n    (newline)\n\n    (eval x)))\n" "pretty-prints each expression before evaluating it.\n\n" "\nThe parameter source-directories (Section 12.5)\ndetermines the set of directories searched for source files not identified\nby absolute path names.\n\n") ("system:s47" "\n\n\nprocedure: (load-library path)\n\n\nprocedure: (load-library path eval-proc)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "load-library is identical to load except\nthat it treats the input file as if it were prefixed by an implicit\n#!r6rs.\nThis effectively disables any non-R6RS lexical\nsyntax except where subsequently overridden by #!chezscheme.\n\n\n") ("system:s48" "\n\n\nprocedure: (load-program path)\n\n\nprocedure: (load-program path eval-proc)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nload-program reads and evaluates the contents of the file specified by\npath.\nThe file may contain source or object code.\nIf it contains source code, load-program wraps\nthe code in a top-level-program form so that the file's\ncontent is treated as an RNRS top-level program\n(Section http://scheme.com/tspl4/./libraries.html#g14510.3 of The Scheme Programming Language, 4th Edition).\nBy default, load-program employs eval to evaluate each source\nexpression found in the file.\nIf eval-proc is specified, load-program uses this procedure instead.\neval-proc must accept one argument, the expression to evaluate.\nThe expression passed to eval-proc might be an annotation\n(Section 11.11) or an unannotated value.\n\n" "\nThe parameter source-directories (Section 12.5)\ndetermines the set of directories searched for source files not identified\nby absolute path names.\n\n\n") ("system:s50" "\n\n\nprocedure: (verify-loadability situation input ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "situation must be one of the symbols visit, revisit, or load.\nEach input must be a string pathname or a pair of a string pathname and a library search path.\nEach of the pathnames should name a file containing object code for a set of libraries and\ntop-level programs, such as would be produced by\ncompile-program,\ncompile-library,\ncompile-whole-program,\nor\ncompile-whole-library.\nA library search path must be a suitable argument for\nlibrary-directories.\n\n" "\nverify-loadability verifies, without actually loading any\ncode or defining any libraries, whether the object files named\nby the specified pathnames and their library dependencies, direct\nor indirect, are present, readable, and mutually compatible.\nThe type of dependencies for each named object file is determined\nby the situation argument: compile-time dependencies for\nvisit, run-time dependencies for revisit and both for\nload.\n\n" "\nFor each input pathname that is paired with a search path,\nthe library-directories parameter is parameterized to the\nlibrary search path during the recursive search for dependencies\nof the programs and libraries found in the object file named by the\npathname.\n\n" "\nIf verify-loadability finds a problem, such as a missing\nlibrary dependency or compilation-instance mismatch, it raises an\nexception with an appropriate condition.\nOtherwise, it returns an unspecified value.\n\n" "\nSince verify-loadability does not load or run any code\nfrom the files it processes, it cannot determine whether errors\nunrelated to missing or unreadable files or mutual compatibility\nwill occur when the files are actually loaded.\n\n\n") ("system:s56" "\n\n\nprocedure: (load-compiled-from-port input-port)\n\nreturns: result of the last compiled expression\n\nlibraries: (chezscheme)\n\n" "load-compiled-from-port reads and evaluates the object-code contents\nof input-port as previously created by functions like compile-file,\ncompile-script, compile-library, and\ncompile-to-port.\n\n" "\nThe return value is the value of the last expression whose compiled\nform is in input-port. If input-port is empty, then the\nresult value is unspecified.\nThe port is left at end-of-file but is not closed.\n\n\n") ("system:s57" "\n\n\nprocedure: (visit-compiled-from-port input-port)\n\nreturns: result of the last compiled expression processed\n\nlibraries: (chezscheme)\n\n" "visit-compiled-from-port reads and evaluates the object-code contents\nof input-port as previously created by functions like compile-file,\ncompile-script, compile-library, and\ncompile-to-port.  In the process, it skips any revisit (run-time-only) code.\n\n" "\nThe return value is the value of the last expression whose last non-revisit compiled\nform is in input-port. If there are no such forms, then the\nresult value is unspecified.\nThe port is left at end-of-file but is not closed.\n\n\n") ("system:s58" "\n\n\nprocedure: (revisit-compiled-from-port input-port)\n\nreturns: result of the last compiled expression processed\n\nlibraries: (chezscheme)\n\n" "revisit-compiled-from-port reads and evaluates the object-code contents\nof input-port as previously created by functions like compile-file,\ncompile-script, compile-library, and\ncompile-to-port.  In the process, it skips any visit (compile-time-only) code.\n\n" "\nThe return value is the value of the last expression whose last non-visit compiled\nform is in input-port. If there are no such forms, then the\nresult value is unspecified.\nThe port is left at end-of-file but is not closed.\n\n\n") ("system:s59" "\n\n\nprocedure: (visit path)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nvisit reads the named file, which must contain compiled object\ncode compatible with the current machine type and version, and it\nruns those portions of the compiled object code that\nestablish compile-time information or correspond to expressions\nidentified as \"visit\" time by eval-when forms contained in\nthe original source file.\n\n" "\nFor example, assume the file t1.ss contains the following\nforms:\n\n" "\n\n" "(define-syntax a (identifier-syntax 3))\n\n(module m (x) (define x 4))\n\n(define y 5)\n" "If t1.ss is compiled to t1.so, applying load\nto t1.so has the effect of defining all three identifiers.\nApplying visit to t1.so, however, has the effect of\ninstalling the transformer for a, installing the interface for\nm (for use by import),  and recording y as\na variable.\nvisit is useful when separately compiling one file that depends\non bindings defined in another without actually loading and evaluating\nthe code in the supporting file.\n\n" "\nThe parameter source-directories (Section 12.5)\ndetermines the set of directories searched for source files not identified\nby absolute path names.\n\n") ("system:s61" "\n\n\nprocedure: (revisit path)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nrevisit reads the named file, which must contain compiled object\ncode compatible with the current machine type and version, and it\nruns those portions of the compiled object code that compute\nrun-time values or correspond to expressions identified as \"revisit\" time by\neval-when forms contained in the original source file.\n\n" "\nContinuing the example given for visit above,\napplying revisit to the object file, t1.so, has\nthe effect of establishing the values of the variable x\nexported from m and the top-level variable y,\nwithout installing either the interface for m or\nthe transformer for a.\n\n" "\nrevisit is useful for loading compiled application code without\nloading unnecessary compile-time information.\nCare must be taken when using this feature if the application calls\neval or uses top-level-value,\nset-top-level-value!, or top-level-syntax to access\ntop-level bindings at run-time, since these procedures use compile-time\ninformation to resolve top-level bindings.\n\n" "\nThe parameter source-directories (Section 12.5)\ndetermines the set of directories searched for source files not identified\nby absolute path names.\n\n") ("system:s63" "\n\n\nprocedure: (compile-file input-filename)\n\n\nprocedure: (compile-file input-filename output-filename)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "input-filename and output-filename must be strings.\ninput-filename must name an existing, readable file.\nIt must contain a sequence of zero or more source expressions;\nif this is not the case, compile-file raises an exception\nwith condition type &syntax.\n\n" "\nThe normal evaluation process proceeds in two steps: compilation and\nexecution.\ncompile-file performs the compilation process for an entire source\nfile, producing an object file.\nWhen the object file is subsequently loaded (see load), the\ncompilation process is not necessary, and the file typically loads\nseveral times faster.\n\n" "\nIf the optional output-filename argument is omitted, the\nactual input and output filenames are determined as follows.\nIf input-filename has no extension, the input filename\nis input-filename followed by .ss  and the\noutput filename is input-filename followed by .so.\nIf input-filename has the extension .so, the\ninput filename is input-filename and the output filename\nis input-filename followed by .so.\nOtherwise, the input filename is input-filename and the\noutput filename is input-filename without its extension,\nfollowed by .so.\nFor example, (compile-file \"myfile\") produces an object file\nwith the name \"myfile.so\" from the source file named\n\"myfile.ss\", (compile-file \"myfile.sls\") produces an\nobject file with the name \"myfile.so\" from the source file named\n\"myfile.sls\", and\n(compile-file \"myfile1\" \"myfile2\") produces an object file with\nthe name \"myfile2\" from the source file name \"myfile1\".\n\n" "\nBefore compiling a file, compile-file saves the values of the\nfollowing parameters:\n\n" "\n\n" "optimize-level\n\ndebug-level\n\nrun-cp0\n\ncp0-effort-limit\n\ncp0-score-limit\n\ncp0-outer-unroll-limit\n\ngenerate-inspector-information\n\ngenerate-procedure-source-information\n\ncompile-profile\n\ngenerate-covin-files\n\ngenerate-interrupt-trap\n\nenable-cross-library-optimization\n" "It restores the values after the file has been compiled.\nThis allows the programmer to control the values of these parameters on\na per-file basis, e.g., via an eval-when with situation\ncompile embedded in the source file.\nFor example, if\n\n" "\n\n" "(eval-when (compile) (optimize-level 3))\n" "appears at the top of a source file, the optimization level is set\nto 3 just while the remainder of file is compiled.\n\n") ("system:s66" "\n\n\nprocedure: (compile-script input-filename)\n\n\nprocedure: (compile-script input-filename output-filename)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "input-filename and output-filename must be strings.\n\n" "\ncompile-script is like compile-file but differs in\nthat it copies the leading #! line from the\nsource-file script into the object file.\n\n" "\ncompile-script permits compiled script files to be created from\nsource script to reduce script load time.\nAs with source-code scripts, compiled scripts may be run with the\n--script\ncommand-line option.\n\n") ("system:s68" "\n\n\nprocedure: (compile-library input-filename)\n\n\nprocedure: (compile-library input-filename output-filename)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "input-filename and output-filename must be strings.\n\n" "\ncompile-library is identical to compile-file except\nthat it treats the input file as if it were prefixed by an implicit\n#!r6rs.\nThis effectively disables any non-R6RS lexical\nsyntax except where subsequently overridden by #!chezscheme.\n\n") ("system:s69" "\n\n\nprocedure: (compile-program input-filename)\n\n\nprocedure: (compile-program input-filename output-filename)\n\nreturns: a list of libraries invoked by the program\n\nlibraries: (chezscheme)\n\n" "input-filename and output-filename must be strings.\n\n" "\ncompile-program is like compile-script but differs in\nthat it implements the semantics of RNRS top-level programs, while\ncompile-script implements the semantics of the interactive\ntop-level.\nThe resulting compiled program will also run faster than if compiled\nvia compile-file or compile-script.\n\n" "\ncompile-program returns a list of libraries directly\ninvoked by the compiled top-level program, excluding built-in\nlibraries like (rnrs) and (chezscheme).\nThe procedure library-requirements may be used to determine\nthe indirect requirements, i.e., additional libraries required by\nthe directly invoked libraries.\nWhen combined with library-object-filename, this information can\nbe used to determine the set of files that must be distributed with the\ncompiled program file.\n\n" "\nA program invokes a library only if it references one or more variables\nexported from the library.\nThe set of libraries invoked by a top-level program, and hence\nloaded when the program is loaded, might be smaller than the set\nimported by the program, and it might be larger than the set\ndirectly imported by the program.\n\n" "\nAs with source-code top-level programs, compiled top-level programs may be\nrun with the\n--program\ncommand-line option.\n\n") ("system:s71" "\n\n\nprocedure: (maybe-compile-file input-filename)\n\n\nprocedure: (maybe-compile-file input-filename output-filename)\n\n\nprocedure: (maybe-compile-library input-filename)\n\n\nprocedure: (maybe-compile-library input-filename output-filename)\n\n\nprocedure: (maybe-compile-program input-filename)\n\n\nprocedure: (maybe-compile-program input-filename output-filename)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "These procedures are like their non-maybe counterparts but\ncompile the source file only if the object file is out-of-date.\nAn object file X is considered out-of-date if it does not exist or\nif it is older than the source file or any files included (via include)\nwhen X was created.\nWhen the value of the parameter compile-imported-libraries\nis #t, X is also considered out-of-date if the object\nfile for any library imported when X was compiled is out-of-date.\nIf maybe-compile-file determines that compilation is necessary,\nit compiles the source file by passing compile-file the\ninput and output filenames.\ncompile-library does so by similarly invoking the value of the\ncompile-library-handler parameter, and\ncompile-program does so by similarly invoking the value of the\ncompile-program-handler parameter.\n\n" "\nWhen output-filename is not specified, the input and output\nfilenames are determined in the same manner as for compile-file.\n\n") ("system:s72" "\n\n\nthread parameter: compile-library-handler\n\nlibraries: (chezscheme)\n\n" "This parameter must be set to a procedure, and the procedure should\naccept two string arguments naming a source file and an object file.\nThe procedure should typically invoke compile-library and\npass it the two arguments, but it can also use one of the other\nfile or port compilation procedures.\nFor example, it might read the source file using its own parser and\nuse compile-to-file to finish\nthe compilation process.\nThe procedure can perform other actions as well, such as parameterizing\ncompilation parameters, establishing guards, or gathering statistics.\nThe default value of this parameter simply invokes\ncompile-library on the two string arguments without taking\nany other action.\n\n" "\nThe value of this parameter is called by maybe-compile-library\nwhen the object file is out-of-date.\nIt is also called by the expander to compile an\nimported library when compile-imported-libraries is #t\nand the expander determines the object file is out-of-date.\n\n") ("system:s74" "\n\n\nthread parameter: compile-program-handler\n\nlibraries: (chezscheme)\n\n" "This parameter must be set to a procedure, and the procedure should\naccept two string arguments naming a source file and an object file.\nThe procedure should typically invoke compile-program and\npass it the two arguments, but it can also use one of the other\nfile or port compilation procedures.\nFor example, it might read the source file using its own parser and\nuse compile-to-file to finish\nthe compilation process.\nThe procedure can perform other actions as well, such as parameterizing\ncompilation parameters, establishing guards, or gathering statistics.\nThe default value of this parameter simply invokes\ncompile-program on the two string arguments without taking\nany other action and returns the list of libraries returned by\ncompile-program.\n\n" "\nThe value of this parameter is called by maybe-compile-program\nwhen the object file is out-of-date.\n\n") ("system:s76" "\n\n\nprocedure: (compile-whole-program input-filename output-filename)\n\n\nprocedure: (compile-whole-program input-filename output-filename libs-visible?)\n\nreturns: a list of libraries left to be loaded at run time\n\nlibraries: (chezscheme)\n\n" "compile-whole-program accepts as input a filename naming\na \"whole program optimization\" (wpo) file for a top-level program\nand produces an object file incorporating the program and each\nlibrary upon which it depends, provided that a wpo file for the\nlibrary can be found.\n\n" "\nIf a wpo file for a required library cannot be found, but an object\nfile for the library can, the library is not incorporated in the\nresulting object file.\nSuch libraries are left to be loaded at run time.\ncompile-whole-program returns a list of such libraries.\nIf there are no such libraries, the resulting object file is\nself-contained and compile-whole-program returns the empty\nlist.\n\n" "\nThe libraries incorporated into the resulting object file are visible (for\nuse by environment and eval) if the libs-visible?\nargument is supplied and non-false.\nAny library incorporated into the resulting object file and required by\nan object file left to be loaded at run time is also visible, as are any\nlibraries the object file depends upon, regardless of the value of\nlibs-visible?.\n\n" "\ncompile-whole-program linearizes the initialization code for the\nset of incorporated libraries in a way that respects static\ndependencies among the libraries but not necessary dynamic dependencies\nderiving from initialization-time uses of environment\nor eval.\nAdditional static dependencies can be added in most cases to force\nan ordering that allows the dynamic imports to succeed,\nthough not in general since a different order might be required each\ntime the program is run.\nAdding a static dependency of one library on a second requires\nadding an import of the second in the first as well as a run-time\nreference to one of the variables exported by the second in the\nbody of the first.\n\n" "\ninput-filename and output-filename must be strings.\ninput-filename must identify a wpo file, and a wpo or object\nfile must also be present for each required library somewhere in\nthe directories specified by the library-directories\nparameter.\n\n" "\nTo the extent possible given the specified set of visible libraries\nand requirements of libraries to be loaded at run time,\ncompile-whole-program discards unused code and optimizes\nacross program and library boundaries, potentially reducing program\nload time, run time, and memory requirements.\nSome optimization also occurs even across the boundaries of libraries\nthat are not incorporated into the output, though this optimization\nis limited in nature.\n\n" "\nThe procedures compile-file, compile-program, compile-library,\ncompile-script, and compile-whole-library produce wpo files as well as ordinary\nobject files when the generate-wpo-files parameter is set\nto #t (the default is #f).\ncompile-port and compile-to-port do so when passed\nan optional wpo port.\n\n") ("system:s78" "\n\n\nprocedure: (compile-whole-library input-filename output-filename)\n\nreturns: a list of libraries left to be loaded at run time\n\nlibraries: (chezscheme)\n\n" "compile-whole-library is like compile-whole-program,\nexcept input-filename must specify a wpo file for a library,\nall libraries are automatically made visible, and a new wpo file is\nproduced (when generate-wpo-files is #t) as well\nas an object file for the resulting combination of libraries.\n\n" "\nThe comment in the description of compile-whole-program\nabout the effect of initialization-code linearization on dynamic\ndependencies applies to compile-whole-library as well.\n\n") ("system:s79" "\n\n\nprocedure: (compile-port input-port output-port)\n\n\nprocedure: (compile-port input-port output-port sfd)\n\n\nprocedure: (compile-port input-port output-port sfd wpo-port)\n\n\nprocedure: (compile-port input-port output-port sfd wpo-port covop)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "input-port must be a textual input port.\noutput-port and, if present and non-false, wpo-port must be binary output ports.\nIf present and non-false, sfd must be a source-file descriptor.\nIf present and non-false, covop must be a textual output port.\n\n" "\ncompile-port is like compile-file except that it takes\ninput from an arbitrary textual input port and sends output to an arbitrary\nbinary output port.\nIf sfd is supplied, it is passed to the reader so that source information\ncan be associated with the expressions read from input-port.\nIt is also used to associate block-profiling information with the input\nfile name encapsulated within sfd.\nIf wpo-port is supplied, compile-port sends whole-program optimization information\nto wpo-port for use by compile-whole-program, as if\n(and regardless of whether) generate-wpo-files is set.\nIf covop is supplied, compile-port sends coverage information to\ncovop, as if (and regardless of whether) generate-covin-files is set.\n\n" "\nThe ports are closed automatically after compilation under the assumption\nthe program that opens the ports and invokes compile-port\nwill take care of closing the ports.\n\n") ("system:s80" "\n\n\nprocedure: (compile-to-port obj-list output-port)\n\n\nprocedure: (compile-to-port obj-list output-port sfd)\n\n\nprocedure: (compile-to-port obj-list output-port sfd wpo-port)\n\n\nprocedure: (compile-to-port obj-list output-port sfd wpo-port covop)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "obj-list must be a list containing a sequence of\nobjects that represent syntactically valid expressions, each possibly\nannotated (Section 11.11).\nIf any of the objects does not represent a syntactically valid\nexpression, compile-to-port raises an exception with\ncondition type &syntax.\noutput-port and, if present, wpo-port must be binary output ports.\nIf present, sfd must be a source-file descriptor.\n\n" "\ncompile-to-port is like compile-file except that it takes\ninput from a list of objects and sends output to an arbitrary binary\noutput port.\nsfd is used to associate block-profiling information with the\ninput file name encapsulated within sfd.\nIf wpo-port is present, compile-to-port sends whole-program optimization information\nto wpo-port for use by compile-whole-program, as if\n(and regardless of whether) generate-wpo-files is set.\nIf covop is present, compile-to-port sends coverage information to\ncovop, as if (and regardless of whether) generate-covin-files is set.\n\n" "\nThe ports are not closed automatically after compilation under the assumption\nthe program that opens the port and invokes compile-to-port\nwill take care of closing the port.\n\n" "\nWhen obj-list contains a single list-structured element whose\nfirst-element is the symbol top-level-program,\ncompile-to-port returns a list of the libraries the top-level\nprogram requires at run time, as with compile-program.\nOtherwise, the return value is unspecified.\n\n") ("system:s81" "\n\n\nprocedure: (compile-to-file obj-list output-file)\n\n\nprocedure: (compile-to-file obj-list output-file sfd)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "obj-list must be a list containing a sequence of\nobjects that represent syntactically valid expressions, each possibly\nannotated (Section 11.11).\nIf any of the objects does not represent a syntactically valid\nexpression, compile-to-file raises an exception with\ncondition type &syntax.\noutput-file must be a string.\nIf present, sfd must be a source-file descriptor.\n\n" "\ncompile-to-file is like compile-file except that it takes\ninput from a list of objects.\nsfd is used to associate block-profiling information with the\ninput file name encapsulated within sfd.\n\n" "\nWhen obj-list contains a single list-structured element whose\nfirst-element is the symbol top-level-program,\ncompile-to-file returns a list of the libraries the top-level\nprogram requires at run time, as with compile-program.\nOtherwise, the return value is unspecified.\n\n") ("system:s82" "\n\n\nprocedure: (concatenate-object-files out-file in-file1 in-file2 ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "out-file and each in-file must be strings.\n\n" "\nconcatenate-object-files combines the header information\ncontained in the object files named by each in-file.  It then\nwrites the combined header information to the file named by\nout-file, followed by the remaining object code from each\ninput file in turn.\n\n") ("system:s83" "\n\n\nprocedure: (make-boot-file output-filename base-boot-list input-filename ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "output-filename, input-filename, and the elements of\nbase-boot-list must be strings.\n\n" "\nmake-boot-file writes a boot header to the file named by\noutput-filename, followed by the object code for each\ninput-filename in turn.\nIf an input file is not already compiled, make-boot-file compiles\nthe file as it proceeds.\n\n" "\nThe boot header identifies the elements of base-boot-list as\nalternative boot files upon which the new boot file depends.\nIf the list of strings naming base boot files is empty, the first named\ninput file should be a base boot file, i.e., petite.boot or some boot file\nderived from petite.boot.\n\n" "\nBoot files are loaded explicitly via the --boot or -b\ncommand-line options or implicitly based on the name of the executable\n(Section 2.9).\n\n" "\nSee Section 2.8 for more information on boot files\nand the use of make-boot-file.\n\n") ("system:s86" "\n\n\nprocedure: (make-boot-header output-filename base-boot1 base-boot2...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure has been subsumed by make-boot-file and is provided for\nbackward compatibility.\nThe call\n\n" "\n\n" "(make-boot-header output-filename base-boot1 base-boot2 ...)\n" "is equivalent to\n\n" "\n\n" "(make-boot-file output-filename '(base-boot1 base-boot2 ...))\n") ("system:s87" "\n\nprocedure: (strip-fasl-file input-path output-path options)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "input-path and output-path must be strings.\ninput-path must name an existing, readable file containing\nobject code produced by compile-file, one of the other\nfile-compiling procedures, or an earlier run of strip-fasl-file.\noptions must be an enumeration set over the symbols constituting\nvalid strip options, as described in the fasl-strip-options\nentry below.\n\n" "\nThe new procedure strip-fasl-file allows the removal of\nsource information of various sorts from a compiled object (fasl)\nfile produced by compile-file or one of the other file\ncompiling procedures.\nIt also allows removal of library visit code from object files\ncontaining compiled libraries.\nVisit code is the code for macro transformers and meta definitions\nrequired to compile (but not run) dependent libraries.\n\n" "\nOn most platforms, the input and output paths can be the same,\nin which case the input file is replaced with a new file containing\nthe stripped object code.\nUsing the same path will likely fail on Windows file systems,\nwhich do not generally permit an open file to be removed.\n\n" "\nIf options is empty, the output file is effectively equivalent\nto the input file, though it will not necessarily be identical.\n\n") ("system:s88" "\n\n\nsyntax: (fasl-strip-options symbol ...)\n\nreturns: a fasl-strip-options enumeration set\n\nlibraries: (chezscheme)\n\n" "Fasl-strip-options enumeration sets are passed to strip-fasl-file\nto determine what is stripped.\nThe available options are described below.\n\n" "\n\ninspector-source:\nStrip inspector source information.\nThis includes source expressions that might otherwise be available\nfor procedures and continuations with the \"code\" and \"call\"\ncommands and messages in the interactive and object inspectors.\nIt also includes filename and position information that might\notherwise be available for the same via the \"file\" command and\n\"source\" messages.\n\n" "\nsource-annotations:\nStrip source annotations, which typically appear only on syntax objects,\ne.g., identifiers, in the templates of macro transformers.\n\n" "\nprofile-source:\nStrip source file and character position information from profiled\ncode objects.\nThis does not remove the profile counters or eliminate the overhead\nfor incrementing them at run time.\n\n" "\ncompile-time-information: \nThis strips compile-time information from compiled libraries, potentially\nreducing the size of the resulting file but making it impossible to\nuse the file to compile dependent code.\nThis option is useful for creating smaller object files to ship\nas part of a binary-only package.\n\n\n\n") ("system:s89" "\n\n\nprocedure: (machine-type)\n\nreturns: the current machine type\n\nlibraries: (chezscheme)\n\n" "Consult the release notes for the current version of Chez Scheme\nfor a list of supported machine types.\n\n\n") ("system:s90" "\ndesc:expand\n\n\nprocedure: (expand obj)\n\n\nprocedure: (expand obj env)\n\nreturns: expansion of the Scheme form represented by obj\n\nlibraries: (chezscheme)\n\n" "expand treats obj as the representation of an expression.\nIt expands the expression in environment env and returns\nan object representing the expanded form.\nIf no environment is provided, it defaults to the environment\nreturned by interaction-environment.\n\n" "\nobj can be an annotation\n(Section 11.11), and the default expander\nmakes use of annotations to incorporate source-file\ninformation in error messages.\n\n" "\nexpand actually passes its arguments to the current expander\n(see current-expand), initially sc-expand.\n\n" "\nSee also expand-output (page 363)\nwhich can be used to request that the compiler or interpreter show\nexpander output.\n\n") ("system:s92" "\n\n\nthread parameter: current-expand\n\nlibraries: (chezscheme)\n\n" "current-expand determines the expansion procedure used by\nthe compiler, interpreter, and direct calls to\nexpand\nto expand syntactic extensions.\ncurrent-expand is initially bound to the value of\nsc-expand.\n\n" "\nIt may be set another procedure, but since the format of\nexpanded code expected by the compiler and interpreter is not publicly\ndocumented, only sc-expand produces correct output, so the\nother procedure must ultimately be defined in terms of\nsc-expand.\n\n" "\nThe first argument to the expansion procedure represents the input\nexpression.\nIt can be an annotation (Section 11.11) or an\nunannotated value.\nthe second argument is an environment.\nAdditional arguments might be passed to the expansion procedure\nby the compiler, interpreter, and expand; their number\nand roles are unspecified.\n\n") ("system:s95" "\n\n\nprocedure: (sc-expand obj)\n\n\nprocedure: (sc-expand obj env)\n\nreturns: the expanded form of obj\n\nlibraries: (chezscheme)\n\n" "The procedure\nsc-expand is used to expand programs written using\nsyntax-case macros.\nsc-expand is the default expander, i.e., the initial\nvalue of current-expand.\nobj represents the program to be expanded, and\nenv must be an environment.\nobj can be an annotation (Section 11.11)\nor unannotated value.\nIf not provided, env defaults to the environment returned by\ninteraction-environment.\n\n") ("system:s96" "\ndesc:expand/optimize\n\n\nprocedure: (expand/optimize obj)\n\n\nprocedure: (expand/optimize obj env)\n\nreturns: result of expanding and optimizing form represented by obj\n\nlibraries: (chezscheme)\n\n" "expand/optimize treats obj as the representation of\nan expression.\nobj can be an annotation (Section 11.11)\nor unannotated value.\nexpand/optimize expands the expression in environment env\nand passes the expression through the source optimizer cp0\n(unless cp0 is disabled via run-cp0).\nIt also simplifies letrec and letrec* expressions within\nthe expression and makes their undefined checks explicit.\nIt returns an object representing the expanded, simplified, and optimized form.\nIf no environment is provided, it defaults to the environment\nreturned by interaction-environment.\n\n" "\nexpand/optimize is primarily useful for understanding what\ncp0 does and does not optimize.\nMany optimizations are performed later in the compiler,\nso expand/optimize does not give a complete picture of\noptimizations performed.\n\n" "\n\n" "(expand/optimize\n\n  '(let ([y '(3 . 4)])\n\n     (+ (car y) (cdr y)))) --> 7\n\n\n(print-gensym #f)\n\n(expand/optimize\n\n  '(let ([y '(3 . 4)])\n\n     (lambda (x)\n\n       (* (+ (car y) (cdr y)) x)))) --> (lambda (x) (#2%* 7 x))\n\n\n(expand/optimize\n\n  '(let ([n (expt 2 10)])\n\n     (define even?\n\n       (lambda (x) (or (zero? x) (not (odd? x)))))\n\n     (define odd?\n\n       (lambda (x) (not (even? (- x 1)))))\n\n     (define f\n\n       (lambda (x)\n\n         (lambda (y)\n\n           (lambda (z)\n\n             (if (= z 0) (omega) (+ x y z))))))\n\n     (define omega\n\n       (lambda ()\n\n         ((lambda (x) (x x)) (lambda (x) (x x)))))\n\n     (let ([g (f 1)] [m (f n)])\n\n       (let ([h (if (> ((g 2) 3) 5)\n\n                    (lambda (x) (+ x 1))\n\n                    odd?)])\n\n         (h n))))) --> 1025\n" "See also expand/optimize-output (page 363)\nwhich can be used to request that the compiler or interpreter show\nsource-optimizer output.\n\n") ("system:s98" "\n\n\nsyntax: (eval-when situations form1 form2 ...)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "situations must be a list containing some combination of the symbols\neval, compile, load, visit, and\nrevisit.\n\n" "\nWhen source files are loaded (see load), the forms in the file\nare read, compiled, and executed sequentially, so that each form in\nthe file is fully evaluated before the next one is read.\nWhen a source file is compiled (see compile-file), however, the\nforms are read and compiled, but not executed, in sequence.\nThis distinction matters only when the execution of one\nform in the file affects the compilation of later forms, e.g.,\nwhen the form results in the definition of a module or syntactic form or\nsets a compilation parameter such as optimize-level or\ncase-sensitive.\n\n" "\nFor example, assume that a file contains the following two forms:\n\n" "\n\n" "(define-syntax reverse-define\n\n  (syntax-rules ()\n\n    [(_ e x) (define x e)]))\n\n\n(reverse-define 3 three)\n" "Loading this from source has the effect of defining\nreverse-define as a syntactic form and binding the identifier\nthree to 3.\nThe situation may be different if the file is compiled with\ncompile-file, however.\nUnless the system or programmer takes steps to assure that the first\nform is fully executed before the second expression is compiled,\nthe syntax expander will not recognize reverse-define as a syntactic\nform and will generate code for a procedure call to reverse-define\ninstead of generating code to define three to be 3.\nWhen the object file is subsequently loaded, the attempt to reference\neither reverse-define or three will fail.\n\n" "\nAs it happens, when a define-syntax, module,\nimport, or import-only form appears at top level, as in the\nexample above, the compiler does indeed arrange to evaluate it before\ngoing on to compile the remainder of the file.\nIf the compiler encounters a variable definition for an identifier that\nwas previously something else, it records that fact as well.\nThe compiler also generates the\nappropriate code so that the bindings will be present as well when\nthe object file is subsequently loaded.\nThis solves most, but not all, problems of this nature, since most are\nrelated to the use of define-syntax and modules.\nSome problems are not so straightforwardly handled, however.\nFor example, assume that the file contains the following definitions\nfor nodups? and mvlet.\n\n" "\n\n" "(define nodups?\n\n  (lambda (ids)\n\n    (define bound-id-member?\n\n      (lambda (id ids)\n\n        (and (not (null? ids))\n\n             (or (bound-identifier=? id (car ids))\n\n                 (bound-id-member? id (cdr ids))))))\n\n    (or (null? ids)\n\n        (and (not (bound-id-member? (car ids) (cdr ids)))\n\n             (nodups? (cdr ids))))))\n\n\n(define-syntax mvlet\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ ((x ...) expr) b1 b2 ...)\n\n       (and (andmap identifier? #'(x ...))\n\n            (nodups? #'(x ...)))\n\n       #'(call-with-values\n\n           (lambda () expr)\n\n           (lambda (x ...) b1 b2 ...))])))\n\n\n(mvlet ((a b c) (values 1 2 3))\n\n  (list (* a a) (* b b) (* c c)))\n" "When loaded directly, this results in the definition of\nnodups? as a procedure and mvlet as a syntactic\nabstraction before evaluation of the mvlet expression.\nBecause nodups? is defined before the mvlet\nexpression is expanded, the call to nodups? during the\nexpansion of mvlet causes no difficulty.\nIf instead this file were compiled, using compile-file, the\ncompiler would arrange to define mvlet before continuing\nwith the expansion and evaluation of the mvlet expression,\nbut it would not arrange to define nodups?.\nThus the expansion of the mvlet expression would fail.\n\n" "\nIn this case it does not help to evaluate the syntactic extension alone.\nA solution in this case would be to move the definition of\nnodups? inside the definition for mvlet, just as\nthe definition for bound-id-member? is placed within\nnodups?, but this does not work for help routines shared\namong several syntactic definitions.\nAnother solution is to label the nodups? definition a\n\"meta\" definition (see Section 11.8) but this\ndoes not work for helpers that are used both by syntactic\nabstractions and by run-time code.\n\n" "\nA somewhat simpler problem occurs when setting parameters that affect\ncompilation, such as optimize-level and\ncase-sensitive?.\nIf not set prior to compilation, their settings usually will not have\nthe desired effect.\n\n" "\neval-when offers a solution to these problems by allowing the\nprogrammer to explicitly control what forms should or should not\nbe evaluated during compilation.\neval-when is a syntactic form and is handled directly by the\nexpander.\nThe action of eval-when depends upon the situations argument\nand whether or not the forms form1 form2 ...\nare being compiled via compile-file or are being evaluated\ndirectly.\nLet's consider each of the possible situation specifiers\neval, compile, load, visit, and\nrevisit in turn.\n\n" "\n\neval:\nThe eval specifier is relevant only when the eval-when\nform is being\nevaluated directly, i.e., if it is typed at the keyboard or loaded from a\nsource file.\nIts presence causes form1 form2 ... to be\nexpanded and this expansion to be included in the expansion of the\neval-when form.\nThus, the forms will be evaluated directly as if not contained within an\neval-when form.\n\n" "\ncompile:\nThe compile specifier is relevant only when the eval-when\nform appears in a file currently being compiled.\n(Its presence is simply ignored otherwise.)\nIts presence forces form1 form2 ... to be\nexpanded and evaluated immediately.\n\n" "\nload:\nThe load specifier is also relevant only when the eval-when\nform appears\nin a file currently being compiled.\nIts presence causes form1 form2 ... to be\nexpanded and this expansion to be included in the expansion of the\neval-when form.\nAny code necessary to record binding information and evaluate syntax\ntransformers for definitions contained in the forms is marked for\nexecution when the file is \"visited,\" and any code necessary to\ncompute the values of variable definitions and the expressions contained\nwithin the forms is marked for execution when the file is \"revisited.\"\n\n" "\nvisit:\nThe visit specifier is also relevant only when the eval-when\nform appears\nin a file currently being compiled.\nIts presence causes form1 form2 ... to be\nexpanded and this expansion to be included in the expansion of the\neval-when form, with an annotation that the forms are to be\nexecuted when the file is \"visited.\"\n\n" "\nrevisit:\nThe revisit specifier is also relevant only when the eval-when\nform appears\nin a file currently being compiled.\nIts presence causes form1 form2 ... to be\nexpanded and this expansion to be included in the expansion of the\neval-when form, with an annotation that the forms are to be\nexecuted when the file is \"revisited.\"\n\n\n" "\nA file is considered \"visited\" when it is brought in by either\nload or visit and \"revisited\" when it is brought in\nby either load or revisit.\n\n" "\nTop-level expressions are treated as if they are wrapped in an\neval-when with situations load and eval.\nThis means that, by default, forms typed at the keyboard or\nloaded from a source file are evaluated, and forms appearing in a\nfile to be compiled are not evaluated directly but are compiled for\nexecution when the resulting object file is subsequently loaded.\n\n" "\nThe treatment of top-level definitions is slightly more involved.\nAll definitions result in changes to the compile-time environment.\nFor example, an identifier defined by define is recorded\nas a variable, and an identifier defined by define-syntax\nis recorded as a keyword and associated with the value of its\nright-hand-side (transformer) expression.\nThese changes are made at eval, compile, and load\ntime as if the definitions were wrapped in an eval-when with\nsituations eval, load, and compile.\n(This behavior can be altered by changing the value of the\nparameter eval-syntax-expanders-when.)\nSome definitions also result in changes to the run-time environment.\nFor example, a variable is associated with the value of its\nright-hand-side expression.\nThese changes are made just at evaluation and load time as if the\ndefinitions were wrapped in an eval-when with situations\neval and load.\n\n" "\nThe treatment of local expressions or definitions (those not at top level)\nthat are wrapped in an eval-when depends only upon whether the\nsituation eval is present in the list of situations.\nIf the situation eval is present, the definitions and expressions\nare evaluated as if they were not wrapped in an eval-when form,\ni.e., the eval-when form is treated as a begin form.\nIf the situation eval is not present, the forms are ignored;\nin a definition context, the eval-when form is treated as an\nempty begin, and in an expression context, the eval-when\nform is treated as a constant with an unspecified value.\n\n" "\nSince top-level syntax bindings are established, by default, at compile\ntime as well as eval and load time, top-level variable bindings needed\nby syntax transformers should be wrapped in an eval-when form\nwith situations compile, load, and eval.\nWe can thus nodups? problem above by enclosing the definition\nof nodups? in an eval-when as follows.\n\n" "\n\n" "(eval-when (compile load eval)\n\n  (define nodups?\n\n    (lambda (ids)\n\n      (define bound-id-member?\n\n        (lambda (id ids)\n\n          (and (not (null? ids))\n\n               (or (bound-identifier=? id (car ids))\n\n                   (bound-id-member? id (cdr ids))))))\n\n      (or (null? ids)\n\n          (and (not (bound-id-member? (car ids) (cdr ids)))\n\n               (nodups? (cdr ids)))))))\n" "This forces it to be evaluated before it is needed during the expansion\nof the mvlet expression.\n\n" "\nJust as it is useful to add compile to the default\nload and eval situations, omitting options is also\nuseful.\nOmitting one or more of compile, load, and\neval has the effect of preventing the evaluation at the given\ntime.\nOmitting all of the options has the effect of inhibiting evaluation\naltogether.\n\n" "\nOne common combination of situations is (compile eval), which by the\ninclusion of compile causes the expression to be evaluated at\ncompile time, and by the omission of load inhibits the generation\nof code by the compiler for execution when the file is subsequently loaded.\nThis is typically used for the definition of syntactic extensions used only\nwithin the file in which they appear; in this case their presence in the\nobject file is not necessary.\nIt is also used to set compilation parameters that are intended to be in\neffect whether the file is loaded from source or compiled via\ncompile-file\n\n" "\n\n" "(eval-when (compile eval) (case-sensitive #t))\n" "Another common situations list is (compile), which might be\nused to set compilation options to be used only when the file is\ncompiled via compile-file.\n\n" "\n\n" "(eval-when (compile) (optimize-level 3))\n" "Finally, one other common combination is (load eval), which might\nbe useful for inhibiting the double evaluation (during the compilation of\na file and again when the resulting object file is loaded) of syntax\ndefinitions when the syntactic extensions are not needed within\nthe file in which their definitions appear.\n\n" "\nThe behavior of eval-when is usually intuitive but can be\nunderstood precisely as follows.\nThe syntax-case expander, which handles eval-when\nforms, maintains two state sets, one for compile-time forms and\none for run-time forms.\nThe set of possible states in each set are \"L\" for load,\n\"C\" for compile, \"V\" for visit, \"R\" for\nrevisit, and \"E\" for eval.\n\n" "\nWhen compiling a file, the compile-time set initially contains \"L\"\nand \"C\" and the run-time set initially contains only \"L.\"\nWhen not compiling a file (as when a form is evaluated by the\nread-eval-print loop or loaded from a source file), both sets\ninitially contain only \"E.\"\nThe subforms of an eval-when form at top level are expanded with\nnew compile- and run-time sets determined by the current sets and\nthe situations listed in the eval-when form.\nEach element of the current set contributes zero or more elements to the\nnew set depending upon the given situations according to the following\ntable.\n\n" "\ncenter\n  center load  center  compile  center  visit  center  revisit  center  evalcenter\nL center  L  center  C  center  V  center  R  center --- center\nC center --- center --- center --- center --- center  C  center\nV center  V  center  C  center  V  center --- center --- center\nR center  R  center  C  center --- center  R  center --- center\nE center --- center --- center --- center --- center  E  center\n\n\n" "\nFor example, if the current compile-time state set is {L}\nand the situations are load and compile, the new compile-time\nstate set is {L, C}, since L/load\ncontributes \"L\" and L/compile contributes \"C.\"\n\n" "\nThe state sets determine how forms are treated by the expander.\nCompile-time forms such as syntax definitions are evaluated at a time\nor times determined by the compile-time state set, and run-time forms\nare evaluated at a time or times determined by the run-time state set.\nA form is evaluated immediately if \"C\" is in the state set.\nCode is generated to evaluate the form at visit or revisit\ntime if \"V\" or \"R\" is present.\nIf \"L\" is present in the compile-time set, it is treated as \"V;\"\nlikewise, if \"L\" is present in the run-time set, it is treated as\n\"R.\"\nIf more than one of states is present in the state set, the\nform is evaluated at each specified time.\n\n" "\n\"E\" can appear in the state set only when not compiling a file, i.e.,\nwhen the expander is invoked from an evaluator such as compile\nor interpret.\nWhen it does appear, the expanded form is returned from the expander to be\nprocessed by the evaluator, e.g., compile or interpret,\nthat invoked the expander.\n\n" "\nThe value of the parameter eval-syntax-expanders-when actually determines\nthe initial compile-time state set.\nThe parameter is bound to a list of situations, which defaults to\n(compile load eval).\nWhen compiling a file, compile contributes \"C\" to the\nstate set, load contributes \"L,\" visit contributes\n\"V,\" revisit contributes \"R,\" and eval\ncontributes nothing.\nWhen not compiling a file, eval contributes \"E\" to the\nstate set, and the other situations contribute nothing.\nThere is no corresponding parameter for controlling the initial value\nof the run-time state set.\n\n" "\neval-when-tlpFor RNRS top-level programs, eval-when is essentially ineffective.\nThe entire program is treated as a single expression, so eval-when\nbecomes a local eval-when for which only the eval\nsituation has any relevance.\nAs for any local eval-when form, the subforms are ignored if\nthe eval situation is not present; otherwise, they are treated as\nif the eval-when wrapper were absent.\n\n") ("system:s101" "\n\n\nthread parameter: eval-syntax-expanders-when\n\nlibraries: (chezscheme)\n\n" "This parameter must be set to a list representing a set of\neval-when situations, e.g., a list containing at most one\noccurrence of each of the symbols eval, compile,\nload, visit, and revisit.\nIt is used to determine the evaluation time of syntax\ndefinitions, module forms, and import forms are expanded.\n(See the discussion of eval-when above.)\nThe default value is (compile load eval), which causes\ncompile-time information in a file to be established when the file is\nloaded from source, when it is compiled via compile-file,\nand when a compiled version of the file is loaded via load\nor visit.\n\n") ("system:s102" "\n\n\nglobal parameter: source-directories\n\nlibraries: (chezscheme)\n\n" "The value of source-directories must be a list of strings, each\nof which names a directory path.\nsource-directories determines the set of directories searched\nfor source or object files when a file is loaded via load, load-library,\nload-program, include,\nvisit, or revisit,\nwhen a syntax error occurs, or when a source\nfile is opened in the interactive inspector.\n\n" "\nThe default value is the list (\".\"), which means source files\nwill be found only in or relative to the current directory, unless named\nwith an absolute path.\n\n" "\nThis parameter is never altered by the system, with one exception.\nThe expander temporarily adds (via parameterize) the directory\nin which a library file resides to the front of the source-directories\nlist when it compiles (when compile-imported-libraries is true) or loads the library from source, which it does\nonly if the library is not already defined.\n\n") ("system:s103" "\n\n\nprocedure: (with-source-path who name procedure)\n\nlibraries: (chezscheme)\n\n" "The procedure with-source-path searches through the current\nsource-directories path, in order, for a file with the specified\nname and invokes procedure on the result.\nIf no such file is found, an exception is raised with condition types\n&assertion and &who with who as\nwho value.\n\n" "\nIf name is an absolute pathname or one beginning with \n(or .\\ under Windows) or ../ (or ..\\ under\nWindows), or if the list of source directories\ncontains only \".\", the default, or \"\", which is\nequivalent to \".\", no searching is performed and name is\nreturned.\n\n" "\nwho must be a symbol, name must be a string, and\nprocedure should accept one argument.\n\n" "\nThe following examples assumes that the file \"pie\" exists\nin the directory \"../spam\" but not in \"../ham\" or the current\ndirectory.\n\n" "\n\n" "(define find-file\n\n  (lambda (fn)\n\n    (with-source-path 'find-file fn values)))\n\n\n(find-file \"pie\") --> \"pie\"\n\n\n(source-directories '(\".\" \"../ham\"))\n\n(find-file \"pie\") --> exception in find-file: pie not found\n\n\n(source-directories '(\".\" \"../spam\"))\n\n(find-file \"pie\") --> \"../spam/pie\"\n\n\n(source-directories '(\".\" \"../ham\"))\n\n(find-file \"/pie\") --> \"/pie\"\n\n\n(source-directories '(\".\" \"../ham\"))\n\n(find-file \"./pie\") --> \"./pie\"\n\n\n(source-directories '(\".\" \"../spam\"))\n\n(find-file \"../pie\") --> \"../ham/pie\"\n") ("system:s104" "\n\n\nthread parameter: optimize-level\n\nlibraries: (chezscheme)\n\n" "This parameter can take on one of the four values 0, 1, 2, and 3.\n\n" "\nIn theory, this parameter controls the amount of optimization\nperformed by the compiler.\nIn practice, it does so only indirectly, and the only difference\nis between optimize level 3, at which the compiler generates\n\"unsafe\" code, and optimize levels 0-2, at which the compiler\ngenerates \"safe\" code.\nSafe code performs full type and bounds checking so that, for example,\nan attempt to apply a non-procedure, an attempt to take the car of a\nnon-pair, or an attempt to reference beyond the end of a vector each\nresult in an exception being raised.\nWith unsafe code, the same situations may result in invalid memory\nreferences, corruption of the Scheme heap (which may cause\nseemingly unrelated problems later), system crashes, or other undesirable\nbehaviors.\nUnsafe code is typically faster, but optimize-level 3 should be used with\ncaution and only on sections of well-tested code that must run as quickly\nas possible.\n\n" "\nWhile the compiler produces the same code for optimize levels 0-2,\nuser-defined macro transformers can differentiate among the different\nlevels if desired.\n\n" "\nOne way to use optimize levels is on a per-file\nbasis, using eval-when to force the use of a particular\noptimize level at compile time.\nFor example, placing:\n\n" "\n\n" "(eval-when (compile) (optimize-level 3))\n" "at the front of a file will cause all of the forms in the file to be\ncompiled at optimize level 3 when the file is compiled (using\ncompile-file) but does not affect the optimize level used\nwhen the file is loaded from source.\nSince compile-file parameterizes optimize-level (see parameterize),\nthe above\nexpression does not permanently alter the optimize level in the\nsystem in which the compile-file is performed.\n\n" "\nThe optimize level can also be set via the\n--optimize-level\ncommand-line option (Section 2.9).\nThis option is particularly useful for running RNRS top-level programs\nat optimize-level 3 via the\n--program command-line option,\nsince eval-when is ineffective for RNRS top-level programs as described\non page 355.\n\n\n") ("system:s109" "\ndesc:hash-primitive\n\n\nsyntax: ($primitive variable)\n\n\nsyntax: #%variable\n\n\nsyntax: ($primitive 2 variable)\n\n\nsyntax: #2%variable\n\n\nsyntax: ($primitive 3 variable)\n\n\nsyntax: #3%variable\n\nreturns: the primitive value for variable\n\nlibraries: (chezscheme)\n\n" "variable must name a primitive procedure.\nThe $primitive syntactic form allows control over the\noptimize level at the granularity of individual primitive references,\nand it can be used to access the original value\nof a primitive, regardless of the lexical context or the current\ntop-level binding for the variable originally bound to the primitive.\n\n" "\nThe expression ($primitive variable) may\nbe abbreviated as #%variable.\nThe reader expands #% followed by an object\ninto a $primitive expression, much as it expands 'object\ninto a quote expression.\n\n" "\nIf a 2 or 3 appears in the form or between the\n# and % in the abbreviated form, the compiler treats\nan application of the primitive as if it were compiled\nat the corresponding optimize level (see the optimize-level\nparameter).\nIf no number appears in the form, an application of the primitive is\ntreated as an optimize-level 3 application if the current optimize\nlevel is 3;\notherwise, it is treated as an optimize-level 2 application.\n\n" "\n\n" "(#%car '(a b c)) --> a\n\n(let ([car cdr]) (car '(a b c))) --> (b c)\n\n(let ([car cdr]) (#%car '(a b c))) --> a\n\n(begin (set! car cdr) (#%car '(a b c))) --> a\n") ("system:s110" "\n\nthread parameter: debug-level\n\nlibraries: (chezscheme)\n\n" "This parameter can take on one of the four values 0, 1, 2, and 3.\nIt is used to tell the compiler how important the preservation of\ndebugging information is, with 0 being least important and 3 being\nmost important.\nThe default value is 1.\nAs of Version 9.0, it is used solely to determine whether an\nerror-causing call encountered in nontail position is treated as\nif it were in tail position (thus causing the caller's frame not\nto appear in a stack backtrace); this occurs at debug levels below 2.\n\n") ("system:s111" "\n\n\nthread parameter: generate-interrupt-trap\n\nlibraries: (chezscheme)\n\n" "To support interrupts, including keyboard, timer, and collect request\ninterrupts, the compiler inserts a short sequence of instructions at the\nentry to each nonleaf procedure (Section 12.2).\nThis small overhead may be eliminated by setting\ngenerate-interrupt-trap to #f.\nThe default value of this parameter is #t.\n\n" "\nIt is rarely a good idea to compile code without interrupt trap\ngeneration, since a tight loop in the generated code may completely\nprevent interrupts from being serviced, including the collect request\ninterrupt that causes garbage collections to occur automatically.\nDisabling trap generation may be useful, however, for routines that act\nsimply as \"wrappers\" for other routines for which code is presumably\ngenerated with interrupt trap generation enabled.\nIt may also be useful for short performance-critical routines with\nembedded loops or recursions that are known to be short running and\nthat make no other calls.\n\n\n") ("system:s112" "\n\n\nthread parameter: compile-interpret-simple\n\nlibraries: (chezscheme)\n\n" "At all optimize levels, when the value of\ncompile-interpret-simple is set to a true value (the default),\ncompile interprets simple\nexpressions.\nA simple expression is one that creates no procedures.\nThis can save a significant amount of time over the course of many\ncalls to compile or eval (with current-eval\nset to compile, its default value).\nWhen set to false, compile compiles all expressions.\n\n\n") ("system:s114" "\ndesc:generate-inspector-information\n\n\nthread parameter: generate-inspector-information\n\nlibraries: (chezscheme)\n\n" "When this parameter is set to a true value (the default), information\nabout the source and contents of procedures and continuations is\ngenerated during compilation and retained in tables associated with\neach code segment.\nThis information allows the inspector to provide more complete\ninformation, at the expense of using more memory and producing\nlarger object files (via compile-file).\nAlthough compilation and loading may be slower when inspector\ninformation is generated, the speed of the compiled code is not\naffected.\nIf this parameter is changed during the compilation of a file, the\noriginal value will be restored.\nFor example, if:\n\n" "\n\n" "(eval-when (compile) (generate-inspector-information #f))\n" "is included in a file, generation of inspector information will be\ndisabled only for the remainder of that particular file.\n\n") ("system:s115" "\ndesc:generate-procedure-source-information\n\n\nthread parameter: generate-procedure-source-information\n\nlibraries: (chezscheme)\n\n" "When generate-inspector-information is set to #f and\nthis parameter is set to #t, then a source location is preserved\nfor a procedure, even though other inspector information is not preserved.\nSource information provides a small amount of debugging support at a\nmuch lower cost in memory and object-file size than full inspector information.\nIf this parameter is changed during the compilation of a file, the\noriginal value will be restored.\n\n") ("system:s116" "\n\n\nthread parameter: enable-cross-library-optimization\n\nlibraries: (chezscheme)\n\n" "This parameter controls whether information is included with the\nobject code for a compiled library to enable propagation of constants\nand inlining of procedures defined in the library into dependent\nlibraries.\nWhen set to #t (the default), this information is included;\nwhen set to #f, the information is not included.\nSetting the parameter to #f potentially reduces the sizes\nof the resulting object files and the exposure of near-source\ninformation via the object file.\n\n") ("system:s117" "\n\n\nthread parameter: generate-wpo-files\n\nlibraries: (chezscheme)\n\n" "When this parameter is set to #t (the default is #f),\ncompile-file, compile-library, compile-program,\nand compile-script produce whole-program optimization (wpo)\nfiles for use by compile-whole-program.\nThe name of the wpo file is derived from the output-file\nname by replacing the object-file extension (normally .so)\nwith .wpo, or adding the extension .wpo if the\nobject filename has no extension or has the extension .wpo.\n\n") ("system:s119" "\n\n\nthread parameter: compile-file-message\n\nlibraries: (chezscheme)\n\n" "When this parameter is set to true, the default, compile-file,\ncompile-library, compile-program, and\ncompile-script print a message of the form:\n\n" "\n\n" "compiling input-path with output to output-path\n" "When the parameter is set to #f, the message is not printed.\n\n") ("system:s120" "\ndesc:run-cp0\n\n\nthread parameter: run-cp0\n\n\nthread parameter: cp0-effort-limit\n\n\nthread parameter: cp0-score-limit\n\n\nthread parameter: cp0-outer-unroll-limit\n\nlibraries: (chezscheme)\n\n" "These parameters control the operation of cp0, a source\noptimization pass that runs after macro expansion and prior\nto most other compiler passes.\ncp0 performs procedure inlining, in which the code of one\nprocedure is inlined at points where it is called by other procedures,\nas well as copy propagation, constant folding, useless code\nelimination, and several related optimizations.\nThe algorithm used by the optimizer is described in detail in the paper\n\"Fast and effective procedure inlining\" [citation31].\n\n" "\nWhen cp0 is enabled, the programmer can count on the compiler\nto fold constants, eliminate unnecessary let bindings, and\neliminate unnecessary and inaccessible code.\nThis is particularly useful when writing macros, since the programmer\ncan usually handle only the general case and let the compiler simplify\nthe code when possible.\nFor example, the programmer can define case as follows:\n\n" "\n\n" "(define-syntax case\n\n  (syntax-rules ()\n\n    [(_ e [(k ...) a1 a2 ...] ... [else b1 b2 ...])\n\n     (let ([t e])\n\n       (cond\n\n         [(memv t '(k ...)) a1 a2 ...]\n\n         ...\n\n         [else b1 b2 ...]))]\n\n    [(_ e [(k ...) a1 a2 ...] ...)\n\n     (let ([t e])\n\n       (cond\n\n         [(memv t '(k ...)) a1 a2 ...]\n\n         ...))]))\n" "and count on the introduce let expression to be eliminated\nif e turns out to be an unassigned variable, and count on\nthe entire case expression to be folded if e turns\nout to be a constant.\n\n" "\nIt is possible to see what cp0 does with an expression\nvia the procedure expand/optimize,\nwhich expands its argument and passes the result through cp0, as\nillustrated by the following transcript.\n\n" "\n\n" "> (print-gensym #f)\n\n> (expand/optimize\n\n    '(lambda (x)\n\n       (case x [(a) 1] [(b c) 2] [(d) 3] [else 4])))\n\n(lambda (x)\n\n  (if (#2%memv x '(a))\n\n      1\n\n      (if (#2%memv x '(b c)) 2 (if (#2%memv x '(d)) 3 4))))\n\n> (expand/optimize\n\n    '(+ (let ([f (lambda (x)\n\n                (case x [(a) 1] [(b c) 2] [(d) 3] [else 4]))])\n\n          (f 'b))\n\n         15))\n\n17\n" "In the first example, the let expression produced by case\nis eliminated, and in the second, the entire expression is optimized down\nto the constant 17.\nAlthough not shown by expand/optimize, the memv calls\nin the output code for the first example will be replaced by calls to the\nless expensive eq? by a later pass of the compiler.\nAdditional examples are given in the description\nof expand/optimize.\n\n" "\nThe value of run-cp0 must be a procedure.\nWhenever the compiler is invoked on a Scheme form, the value p\nof this parameter is called to determine whether and how\ncp0 is run.\np receives two arguments: cp0, the entry point into\ncp0, and x, the form being compiled.\nThe default value of run-cp0 simply invokes cp0 on\nx, then cp0 again on the result.\nThe second run is useful in some cases because the first run\nmay not eliminate bindings for certain variables that appear to be\nreferenced but are not actually referenced after inlining.\nThe marginal benefit of the second run is usually minimal, but so is the\ncost.\n\n" "\nInteresting variants include\n\n" "\n\n" "(run-cp0 (lambda (cp0 x) x))\n" "which bypasses (disables) cp0, and\n\n" "\n\n" "(run-cp0 (lambda (cp0 x) (cp0 x)))\n" "which runs cp0 just once.\n\n" "\nThe value of cp0-effort-limit determines the maximum amount\nof effort spent on each inlining attempt.\nThe time spent optimizing a program is a linear function of this limit and the\nnumber of calls in the program's source, so small values for this parameter\nenforce a tighter bound on compile time.\nWhen set to zero, inlining is disabled except when the name of a procedure\nis referenced only once.\nThe value of cp0-score-limit determines the maximum amount of\ncode produced per inlining attempt.\nSmall values for this parameter limit the amount of overall code expansion.\nThese parameters must be set to nonnegative fixnum values.\n\n" "\nThe parameter cp0-outer-unroll-limit\ncontrols the amount of inlining performed by the optimizer for\nrecursive procedures.\nWith the parameter's value set to the default value of 0, recursive\nprocedures are not inlined.\nA nonzero value for the outer unroll limit allows calls external to\na recursive procedure to be inlined.\nFor example, the expression\n\n" "\n\n" "(letrec ([fact (lambda (x) (if (zero? x) 1 (* x (fact (- x 1)))))])\n\n  (fact 10))\n" "would be left unchanged with the outer unroll limit set to zero, but would\nbe converted into\n\n" "\n\n" "(letrec ([fact (lambda (x) (if (zero? x) 1 (* x (fact (- x 1)))))])\n\n  (* 10 (fact 9)))\n" "with the outer unroll limit set to one.\n\n" "\nInteresting effects can be had by varying several of these parameters at\nonce.\nFor example, setting the\neffort and outer unroll limits to large values and the score limit\nto 1 has the effect of inlining even complex recursive procedures\nwhose values turn out to be constant at compile time without risking\nany code expansion.\nFor example,\n\n" "\n\n" "(letrec ([fact (lambda (x) (if (zero? x) 1 (* x (fact (- x 1)))))])\n\n  (fact 10))\n" "would be reduced to 3628800, but\n\n" "\n\n" "(letrec ([fact (lambda (x) (if (zero? x) 1 (* x (fact (- x 1)))))])\n\n  (fact z))\n" "would be left unchanged, although the optimizer may take a while to\nreach this decision if the effort and outer unroll limits are large.\n\n") ("system:s122" "\n\n\nthread parameter: commonization-level\n\nlibraries: (chezscheme)\n\n" "After running the main source optimization pass (cp0) for the last time, the\ncompiler optionally runs a commonization pass.\nThe pass commonizes the code for lambda expressions that have\nidentical structure by abstracting differences at certain leaves\nof the program, namely constants, references to unassigned variables,\nand references to primitives.\nThe parameter commonization-level controls whether commonization\nis run and, if so, how aggressive it is.\nIts value must be a nonnegative exact integer ranging from 0 through 9.\nWhen the parameter is set to 0, the default, commonization is not run.\nOtherwise, higher values result in more commonization.\n\n" "\nCommonization can undo some of the effects of cp0's inlining, can\nadd run-time overhead, and can complicate debugging, particularly\nat higher commonization levels, which is why it is disabled by\ndefault.\nOn the other hand, for macros or other meta programs that can\ngenerate large, mostly similar lambda expressions, enabling\ncommonization can result in significant savings in object-code size\nand even reduce run-time overhead by making more efficient use of\ninstruction caches.\n\n") ("system:s123" "\n\n\nthread parameter: undefined-variable-warnings\n\nlibraries: (chezscheme)\n\n" "When undefined-variable-warnings is set to #t, the\ncompiler issues a warning message whenever it cannot determine that\na variable bound by letrec, letrec*, or an internal\ndefinition will not be referenced before it is defined.\nThe default value is #f.\n\n" "\nRegardless of the setting of this parameter, the compiler inserts code\nto check for the error, except at optimize level 3.\nThe check is fairly inexpensive and does not typically inhibit inlining\nor other optimizations.\nIn code that must be carefully tuned, however, it is sometimes useful\nto reorder bindings or make other changes to eliminate the checks.\nEnabling undefined-variable warnings can facilitate this process.\n\n" "\nThe checks are also visible in the output of expand/optimize.\n\n") ("system:s124" "\ndesc:expand-outputdesc:expand/optimize-output\n\n\nthread parameter: expand-output\n\n\nthread parameter: expand/optimize-output\n\nlibraries: (chezscheme)\n\n" "The parameters expand-output and expand/optimize-output\ncan be used to request that the compiler and interpreter print\nexpander and source-optimizer output produced during the compilation or\ninterpretation process.\nEach parameter must be set to either #f (the default) or a\ntextual output port.\n\n" "\nWhen expand-output is set to a textual output port, the output\nof the expander is printed to the port as a side effect of running\ncompile, interpret, or any of the file compiling\nprimitives, e.g., compile-file or compile-library.\nSimilarly, when expand/optimize-output is set to a textual\noutput port, the output of the source optimizer is printed.\n\n" "\nSee also expand (page 349) and\nexpand-optimize (page 350), which\ncan be used to run the expander or the expander and source optimizer\ndirectly on an individual form.\n\n") ("system:s127" "\n\n\nsyntax: (pariah expr1 expr2 ...)\n\nreturns: the values of the last subexpression\n\nlibraries: (chezscheme)\n\n" "A pariah expression is just like a begin expression\nexcept that it informs the compiler that the code is expected to\nbe executed infrequently.\nThe compiler uses this information to optimize code layout, register\nassignments, and other aspects of the generated code.\nThe pariah form can be used in performance-critical code\nto mark the branches of a conditional (e.g., if, cond,\nor case) that are less likely to be executed than the\nothers.\n\n\n") ("system:s140" "\n\n\nthread parameter: compile-profile\n\nlibraries: (chezscheme)\n\n" "When this parameter is set to the symbol source or the\nboolean value #t, the compiler instruments the code it\ngenerates with instructions that count the number of times each\nsection of source code is executed.\nWhen set to the symbol block, the compiler similarly\ninstruments the code it generates with instructions that count the\nnumber of times each block of code is executed.\nWhen set to #f (the default), the compiler does not insert\nthese instructions.\n\n" "\nThe general description of profiling above describes how the source\nand block profile information can be viewed or used for optimization.\n\n" "\nThe code generated when compile-profile is non-false is\nlarger and less efficient, so this parameter should be set only\nwhen profile information is needed.\n\n" "\nThe profile counters for code compiled when profile instrumentation\nis enabled are retained indefinitely, even if the code with which\nthey are associated is reclaimed by the garbage collector.\nThis results in more complete and accurate profile data but can lead\nto space leaks in programs that dynamically generate or load code.\nSuch programs can avoid the potential space leak by releasing the\ncounters explicitly via the procedure\nprofile-release-counters.\n\n\n") ("system:s142" "\n\n\nthread parameter: generate-covin-files\n\nlibraries: (chezscheme)\n\n" "When this parameter is set to #t, the compiler generates\n\"coverage-information\" (covin) files that can be used in connection with\nprofile information to measure coverage of a source-code base by a\nset of tests.\nOne covin file is created for each object file, with the object-file\nextension replaced by the extension .covin.\nEach covin file contains the printed representation of a source table\n(Section 11.12), compressed using the compression\nformat and level specified by compress-format and\ncompress-level.\nThis information can be read via\nget-source-table! and used\nas a universe of source expressions to identify source expressions\nthat are not evaluated during the running of a set of tests.\n\n\n") ("system:s144" "\n\n\nsyntax: (profile source-object)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "A profile form has the effect of accounting to the source\nposition identified by source-object the number of times the\nprofile form is executed.\nProfile forms are generated implicitly by the expander for source\nexpressions in annotated input, e.g., input read by the compiler or\ninterpreter from a Scheme source file, so this form is typically\nuseful only when unannotated source code is produced by the front\nend for some language that targets Scheme.\n\n") ("system:s145" "\n\n\nthread parameter: (generate-profile-forms)\n\nlibraries: (chezscheme)\n\n" "When this parameter is set to #t, the default, the expander\nimplicitly introduces profile forms for each annotated input\nexpression, unless the annotation has not been marked for use in\nprofiling  (Section 11.11).\nIt can be set to #f to inhibit the expander's implicit\ngeneration of profile forms, typically when explicit\nprofile forms are already present for all source positions\nthat should be profiled.\n\n") ("system:s146" "\n\n\nprocedure: (profile-clear)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "Calling this procedure causes profile information to be cleared, i.e.,\nthe counts associated with each section of code are set to zero.\n\n") ("system:s147" "\n\n\nprocedure: (profile-release-counters)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "Calling this procedure causes profile information associated with reclaimed\ncode objects to be dropped.\n\n") ("system:s148" "\n\n\nprocedure: (profile-dump)\n\nreturns: a list of pairs of source-object and count\n\nlibraries: (chezscheme)\n\n" "This procedure produces a dump of all\nprofile information gathered since startup or the last call to\nprofile-clear.\nIt returns a list of pairs, where the car of each pair\nis a source object (Section 11.11) and the\ncdr is an exact nonnegative integer count.\n\n" "\nThe list might contain more than one entry per source object due\nto macro expansion and procedure inlining, and it might contain\nmore than one (non-eq) source object per file and source position\ndue to separate compilation.\nIn such cases, the counts are not overlapping and can be summed\ntogether to obtain the full count.\n\n" "\nThe advantage of profile-dump over profile-dump-list\nis that profile-dump performs only minimal processing and\npreserves complete source objects, including their embedded source-file\ndescriptors.\nIt might be used, for example, to dump profile information to a\nfasl file on one machine for subsequent processing on another.\n\n" "\nwith-profile-tracker\ncan be used to obtain the same set of counts as a source table.\n\n\n") ("system:s150" "\n\n\nprocedure: (with-profile-tracker thunk)\n\n\nprocedure: (with-profile-tracker preserve-existing? thunk)\n\nreturns: a source table and the values returned by thunk\n\nlibraries: (chezscheme)\n\n" "thunk must be a procedure and should accept zero arguments.\nIt may return any number of values.\n\n" "\nwith-profile-tracker invokes thunk without arguments.\nIf thunk returns n values x1, x2, ..., xn, with-profile-tracker\nreturns n + 1 values st, x1, x2, ..., xn, where st is a\nsource table associating source objects with profile counts.\nIf preserve-existing? is absent or #f, each count\nrepresents the number of times the source expression represented\nby the associated source object is evaluated during the invocation\nof thunk.\nOtherwise, each count represents the number of times the source\nexpression represented by the associated source object is evaluated\nbefore or during the invocation of thunk.\n\n" "\nProfile data otherwise cleared by a call to\nprofile-clear or\nprofile-release-counters\nduring the invocation of thunk is included in the\nresulting table.\nThat is, invoking these procedures while thunk is running has\nno effect on the resulting counts.\nOn the other hand, profile data cleared before with-profile-tracker\nis invoked is not included in the resulting table.\n\n" "\nThe idiom (with-profile-tracker #t values) can be used to obtain\nthe current set of profile counts as a source table.\n\n\n") ("system:s153" "\n\n\nprocedure: (source-table-dump source-table)\n\nreturns: a list of pairs of source objects and their associated values in source-table\n\nlibraries: (chezscheme)\n\n" "This procedure can be used to convert a source-table produced by\nwith-profile-tracker or some other mechanism into the form returned\nby profile-dump for use as an argument to\nprofile-dump-html,\nprofile-dump-list,\nor\nprofile-dump-data.\n\n") ("system:s159" "\n\n\nprocedure: (profile-dump-html)\n\n\nprocedure: (profile-dump-html prefix)\n\n\nprocedure: (profile-dump-html prefix dump)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure produces one or more HTML files, including\nprofile.html, which contains color-coded summary information,\nand one file source.html for each source\nfile source containing a color-coded copy of the\nsource code, as described in the lead-in to this section.\nIf prefix is specified, it must be a string and is prepended\nto the names of the generated HTML files.\nFor example, if prefix is \"/tmp/\", the generated\nfiles are placed in the directory /tmp.\nThe raw profile information is obtained from dump, which\ndefaults to the value returned by profile-dump.\n\n") ("system:s160" "\n\n\nthread parameter: (profile-palette)\n\nlibraries: (chezscheme)\n\n" "This value of this parameter must be a nonempty vector of at least\nthree pairs.\nThe car of each pair is a background color and the cdr is a foreground\n(text) color.\nEach color must be a string, and each string should contain an HTML\ncascading style sheet (CSS) color specifier.\nThe first pair is used for unprofiled code, and the second is used\nfor unexecuted profiled code.\nThe third is used for code that is executed least frequently, the fourth\nfor code executed next-least frequently, and so on, with the last\nbeing used for code that is executed most frequently.\nProgrammers may wish to supply their own palette to enhance visibility\nor to change the number of colors used.\n\n" "\nBy default, a black background is used for unprofiled code, and a gray\nbackground is used for unexecuted profiled code.\nBackground colors ranging from purple to red are used for executed\nprofiled code, depending on frequency of execution, with red for the most\nfrequently executed code.\n\n" "\n\n" "(profile-palette) -->\n\n  #((\"#111111\" . \"white\") (\"#607D8B\" . \"white\")\n\n    (\"#9C27B0\" . \"black\") (\"#673AB7\" . \"white\")\n\n    (\"#3F51B5\" . \"white\") (\"#2196F3\" . \"black\")\n\n    (\"#00BCD4\" . \"black\") (\"#4CAF50\" . \"black\")\n\n    (\"#CDDC39\" . \"black\") (\"#FFEB3B\" . \"black\")\n\n    (\"#FFC107\" . \"black\") (\"#FF9800\" . \"black\")\n\n    (\"#F44336\" . \"white\"))\n\n(profile-palette\n\n ; set palette with rainbow colors and black text\n\n ; for all but unprofiled or unexecuted code\n\n  '#((\"#000000\" . \"white\")    ; black\n\n     (\"#666666\" . \"white\")    ; gray\n\n     (\"#8B00FF\" . \"black\")    ; violet\n\n     (\"#6600FF\" . \"black\")    ; indigo\n\n     (\"#0000FF\" . \"black\")    ; blue\n\n     (\"#00FF00\" . \"black\")    ; green\n\n     (\"#FFFF00\" . \"black\")    ; yellow\n\n     (\"#FF7F00\" . \"black\")    ; orange\n\n     (\"#FF0000\" . \"black\")))  ; red\n") ("system:s161" "\n\nthread parameter: (profile-line-number-color)\n\nlibraries: (chezscheme)\n\n" "This value of this parameter must be a string or #f.\nIf it is a string, the string should contain an HTML cascading style sheet (CSS)\ncolor specifier.\nIf the parameter is set to a string, profile-dump-html includes line numbers\nin its html rendering of each source file, using the specified color.\nIf the parameter is set to #f, no line numbers are included.\n\n") ("system:s162" "\n\n\nprocedure: (profile-dump-list)\n\n\nprocedure: (profile-dump-list warn?)\n\n\nprocedure: (profile-dump-list warn? dump)\n\nreturns: a list of profile entries (see below)\n\nlibraries: (chezscheme)\n\n" "This procedure produces a dump of all\nprofile information present in dump, which defaults to\nthe value returned by profile-dump.\nIt returns a list of entries, each of which is itself a list containing the\nfollowing elements identifying one block of code and how many times it\nhas been executed.\n\n" "\n\n execution count\n pathname\n beginning file position in characters (inclusive)\n ending file position in characters (exclusive)\n line number of beginning file position\n character position of beginning file position\n\n" "\n\n" "\nprofile-dump-list may be unable to locate an unmodified copy\nof the file in the current source directories\nor at the absolute address, if an absolute address was used when\nthe file was compiled or loaded.\nIf this happens, the line number and character position of the beginning\nfile position are #f and the pathname is the pathname originally\nused.\nA warning is also issued (an exception with condition type\n&warning is raised) unless the warn? argument is provided\nand is false.\n\n" "\nOtherwise, the pathname is the path to an unmodified copy of the source\nand the line and character positions are set to exact nonnegative integers.\n\n" "\nIn either case, the execution count, beginning file position, and ending\nfile position are all exact nonnegative integers, and the pathname is a string.\n\n" "\nFor source positions in files that cannot be found, the list might\ncontain more than one entry per position due to macro expansion,\nprocedure inlining, and separate compilation.\nIn such cases, the counts are not overlapping and can be summed\ntogether to obtain the full count.\n\n" "\nThe information returned by profile-dump-list can be used to\nimplement a custom viewer or used as input for offline analysis of\nprofile information.\n\n" "\nThe advantage of profile-dump-list over profile-dump\nis that it attempts to determine the line number and character\nposition for each source point and, if successful, aggregates\nmultiple counts for the source point into a single entry.\n\n") ("system:s163" "\n\n\nprocedure: (profile-dump-data path)\n\n\nprocedure: (profile-dump-data path dump)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\n\n" "\nThis procedure writes, in a machine-readable form consumable by\nprofile-load-data, profile counts represented by dump\nto the file named by path, replacing the file if it already exists.\ndump defaults to the value returned by profile-dump.\n\n") ("system:s164" "\n\n\nprocedure: (profile-load-data path ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "Each path must be a string.\n\n" "\nThis procedure reads profile information from the files named by\npath ... and stores it in the compiler's internal\ndatabase of profile information.\nThe contents of the files must have been created originally by\nprofile-dump-data using the same version of Chez Scheme.\n\n" "\nThe database stores a weight for each source expression or block\nrather than the actual count.\nWhen a single file is loaded into the database, the weight is the\nproportion of the actual count over the maximum count for all\nexpressions or blocks represented in the file.\nWhen more than one file is loaded, either by one or multiple calls\nto profile-load-data, the weights are averaged.\n\n") ("system:s165" "\n\n\nprocedure: (profile-query-weight obj)\n\nreturns: obj's profile weight, or #f if obj is not in the database\n\nlibraries: (chezscheme)\n\n" "The compiler's profile database maps source objects\n(Section 11.11) to weights.\nIf obj is a source object, the profile-query-weight returns\nthe weight associated with the source object or #f if the database\ndoes not have a weight recorded for the source object.\nobj can also be an annotation or syntax object, in which case\nprofile-query-weight first extracts the source object, if any,\nusing syntax->annotation and annotation-source,\nreturning #f if no source-object is found.\n\n" "\nA weight is a flonum in the range 0.0 to 1.0, inclusive, and denotes the\nratio of the actual count to the maximum count as described in the\ndescription of profile-load-data.\n\n" "\nprofile-query-weight can be used by a macro to determine\nthe relative frequency with which its subexpressions were executed\nin the run or runs that generated the information in the database.\nThis information can be used to guide the generation of code that\nis likely to be more efficient.\nFor example, the case macro uses profile information, when\navailable, to order the clauses so that those whose keys matched\nmore frequently are tested before those whose keys matched less\nfrequently.\n\n") ("system:s166" "\n\n\nprocedure: (profile-clear-database)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure clears the compiler's profile database.\nIt has no impact on the counts associated with individual sections\nof instrumented code; profile-clear can be used to reset\nthose counts.\n\n") ("system:s167" "\n\n\nprocedure: (new-cafe)\n\n\nprocedure: (new-cafe eval-proc)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "Chez Scheme interacts with the user\nthrough a waiter, or read-eval-print loop (REPL).\nThe waiter operates within a context called a caf.\nWhen the system starts up, the user is placed in a caf and\ngiven a waiter.\nnew-cafe opens a new Scheme caf, stacked on top of the old one.\nIn addition to starting the waiter, new-cafe sets up the caf's\nreset and exit handlers (see reset-handler and exit-handler).\nExiting a caf resumes the continuation of the call\nto new-cafe that created the caf.\nExiting from the initial caf leaves Scheme altogether.\nA caf may be exited from either by an explicit call to exit or\nby receipt of end-of-file (\"control-D\" on Unix systems) in response\nto the waiter's prompt.\nIn the former case, any values passed to exit are returned from\nnew-cafe.\n\n" "\nIf the optional eval-proc argument is specified, eval-proc\nis used to evaluate forms entered from the console.\nOtherwise, the value of the parameter current-eval is used.\neval-proc must accept one argument, the expression to evaluate.\n\n" "\nInteresting values for eval-proc include expand,\nwhich causes the macro expanded value of each expression entered to\nbe printed and (lambda (x) x), which simply causes each expression\nentered to be printed.\nAn arbitrary procedure of one argument may be used to facilitate\ntesting of a program on a series of input values.\n\n" "\n\n" "> (new-cafe (lambda (x) x))\n\n>> 3\n\n3\n\n>> (a . (b . (c . ())))\n\n(a b c)\n" "\n" "(define sum\n\n  (lambda (ls)\n\n    (if (null? ls)\n\n        0\n\n        (+ (car ls) (sum (cdr ls))))))\n\n> (new-cafe sum)\n\n>> (1 2 3)\n\n6\n" "The default waiter reader (see waiter-prompt-and-read) displays\nthe current waiter prompt (see waiter-prompt-string)\nto the current value of console-output-port and\nreads\nfrom the current value of console-input-port.\nThe default waiter printer (see waiter-write) sends output\nto the current value of console-output-port.\nThese parameters, along with current-eval,\ncan be modified to change the behavior of the waiter.\n\n") ("system:s174" "\n\n\nthread parameter: waiter-prompt-string\n\nlibraries: (chezscheme)\n\n" "The value of waiter-prompt-string must be a string.\nIt is used by the default waiter prompter (see the parameter\nwaiter-prompt-and-read) to print a prompt.\nNested cafs\nare marked by repeating the prompt string once for each nesting level.\n\n" "\n\n" "> (waiter-prompt-string)\n\n\">\"\n\n> (waiter-prompt-string \"%\")\n\n% (waiter-prompt-string)\n\n\"%\"\n\n% (new-cafe)\n\n%% (waiter-prompt-string)\n\n\"%\"\n") ("system:s175" "\n\nthread parameter: waiter-prompt-and-read\n\nlibraries: (chezscheme)\n\n" "waiter-prompt-and-read must be set to a procedure.\nIt is used by the waiter to\nprint a prompt and read an expression.\nThe value of waiter-prompt-and-read is called by the waiter with a\npositive integer that indicates the caf nesting level.\nIt should return an expression to be evaluated by the current\nevaluator (see new-cafe and current-eval).\n\n") ("system:s176" "\n\n\nprocedure: (default-prompt-and-read level)\n\nlibraries: (chezscheme)\n\n" "level must be a positive integer indicating the cafe nesting\nlevel as described above.\n\n" "\nThis procedure is the default value of the waiter-prompt-and-read\nparameter whenever the expression editor\n(Section 2.2, Chapter 14) is\nnot enabled.\nIt might be defined as follows.\n\n" "\n\n" "(define default-prompt-and-read\n\n  (lambda (n)\n\n    (unless (and (integer? n) (>= n 0))\n\n       (assertion-violationf 'default-prompt-and-read\n\n         \"~s is not a nonnegative integer\"\n\n         n))\n\n    (let ([prompt (waiter-prompt-string)])\n\n      (unless (string=? prompt \"\")\n\n        (do ([n n (- n 1)])\n\n            ((= n 0)\n\n             (write-char #\\space (console-output-port))\n\n             (flush-output-port (console-output-port)))\n\n            (display prompt (console-output-port))))\n\n      (let ([x (read (console-input-port))])\n\n         (when (and (eof-object? x) (not (string=? prompt \"\")))\n\n            (newline (console-output-port))\n\n            (flush-output-port (console-output-port)))\n\n         x))))\n") ("system:s177" "\n\nthread parameter: waiter-write\n\nlibraries: (chezscheme)\n\n" "The value of waiter-write must be a procedure.\nThe waiter uses the value of waiter-write to print the results\nof each expression read and evaluated by the waiter.\nThe following example installs a procedure equivalent to the default\nwaiter-write:\n\n" "\n\n" "(waiter-write\n\n  (lambda (x)\n\n    (unless (eq? x (void))\n\n      (pretty-print x (console-output-port)))\n\n    (flush-output-port (console-output-port))))\n") ("system:s178" "\n\nprocedure: (reset)\n\nreturns: does not return\n\nlibraries: (chezscheme)\n\n" "reset invokes the current reset handler (see reset-handler)\nwithout arguments.\n\n\n") ("system:s179" "\n\n\nthread parameter: reset-handler\n\nlibraries: (chezscheme)\n\n" "The value of this parameter must be a procedure and should accept zero\narguments.\nThe current reset handler is called by reset.\nThe default reset handler resets to the current caf.\n\n\n") ("system:s180" "\n\n\nprocedure: (exit obj ...)\n\nreturns: does not return\n\nlibraries: (chezscheme)\n\n" "exit invokes the current exit handler (see\nexit-handler), passing along its arguments, if any.\n\n\n") ("system:s181" "\n\n\nthread parameter: exit-handler\n\nlibraries: (chezscheme)\n\n" "The value of this parameter must be a procedure and should accept any\nnumber of arguments.\nThe current exit handler is called by exit.\n\n" "\nThe default exit handler exits from the current caf,\nreturning its arguments as the values of the call to\nnew-cafe that created the current caf.\nIf the current caf is the original caf, or if exit\nis called from a script, exit exits from Scheme.\nIn this case, the exit code for the Scheme process is 0 if\nno arguments were supplied or if the first argument is void,\nthe value of the first argument cast to a C int if\nit is an exact integer of the host machine's bit width, and 1 otherwise.\n\n") ("system:s182" "\n\n\nprocedure: (abort)\n\n\nprocedure: (abort obj)\n\nreturns: does not return\n\nlibraries: (chezscheme)\n\n" "abort invokes the current abort handler (see abort-handler),\npassing along its argument, if any.\n\n\n") ("system:s183" "\n\n\nthread parameter: abort-handler\n\nlibraries: (chezscheme)\n\n" "The value of this parameter must be a procedure and should accept either\nzero arguments or one argument.\nThe current abort handler is called by abort.\n\n" "\nThe default abort handler exits the Scheme process.\nThe exit code for the Scheme process is -1 if no arguments were supplied,\n0 if the first argument is void, the value of the first argument if it is\na 32-bit exact integer, and -1 otherwise.\n\n\n") ("system:s184" "\n\n\nglobal parameter: scheme-start\n\nlibraries: (chezscheme)\n\n" "The value of scheme-start is a procedure that determines the\nsystem's action upon start-up.\nThe procedure receives zero or more arguments, which are strings\nrepresenting the file names (or command-line arguments not recognized\nby the Scheme executable) after given on the command line.\nThe default value first loads the files named by the arguments, then\nstarts up the initial caf:\n\n" "\n\n" "(lambda fns\n\n  (for-each load fns)\n\n  (new-cafe))\n" "scheme-start may be altered to start up an application or to\nperform customization prior to normal system start-up.\n\n" "\nTo have any effect, this parameter must be set within a boot file.\n(See Chapter 2.)\n\n") ("system:s185" "\n\n\nglobal parameter: scheme-script\n\nlibraries: (chezscheme)\n\n" "The value of scheme-script is a procedure that determines the\nsystem's action upon start-up,\nwhen the --script option is used.\nThe procedure receives one or more arguments.\nThe first is a string identifying the script filename and the remainder\nare strings representing the remaining file names (or command-line\narguments not recognized by the Scheme executable) given on the command\nline.\nThe default value of this parameter is a procedure that sets the\ncommand-line and command-line-arguments parameters,\nloads the script using load, and returns void, which is\ntranslated into a 0 exit status for the script process.\n\n" "\n\n" "(lambda (fn . fns)\n\n  (command-line (cons fn fns))\n\n  (command-line-arguments fns)\n\n  (load fn))\n" "scheme-script may be altered to start up an application or to\nperform customization prior to normal system start-up.\n\n" "\nTo have any effect, this parameter must be set within a boot file.\n(See Chapter 2.)\n\n\n") ("system:s189" "\n\n\nglobal parameter: scheme-program\n\nlibraries: (chezscheme)\n\n" "The value of scheme-program is a procedure that determines the\nsystem's action upon start-up\nwhen the --program (RNRS top-level program) option is used.\nThe procedure receives one or more arguments.\nThe first is a string identifying the program filename and the remainder\nare strings representing the remaining file names (or command-line\narguments not recognized by the Scheme executable) given on the command\nline.\nThe default value of this parameter is a procedure that sets the\ncommand-line and command-line-arguments parameters,\nloads the program using load-program, and returns void, which is\ntranslated into a 0 exit status for the script process.\n\n" "\n\n" "(lambda (fn . fns)\n\n  (command-line (cons fn fns))\n\n  (command-line-arguments fns)\n\n  (load-program fn))\n" "scheme-program may be altered to start up an application or to\nperform customization prior to normal system start-up.\n\n" "\nTo have any effect, this parameter must be set within a boot file.\n(See Chapter 2.)\n\n\n") ("system:s193" "\n\n\nglobal parameter: command-line\n\nlibraries: (chezscheme)\n\n" "This parameter is set by the default values of scheme-script\nand scheme-program\nto a list representing the command line, with the script name followed\nby the command-line arguments, when the --script or\n--program option is used on system startup.\n\n") ("system:s195" "\n\n\nglobal parameter: command-line-arguments\n\nlibraries: (chezscheme)\n\n" "This parameter is set by the default values of scheme-script\nand scheme-program\nto a list of the command-line arguments when the --script\nor --program option is used on system startup.\n\n") ("system:s197" "\n\n\nglobal parameter: suppress-greeting\n\nlibraries: (chezscheme)\n\n" "The value of suppress-greeting is a boolean value that determines\nwhether Chez Scheme prints an identifying banner and copyright notice.\nThe parameter defaults to #f but may be set to #t for\nuse in batch processing applications where the banner would be disruptive.\n\n" "\nTo have any effect, this parameter must be set within a boot file.\n(See Chapter 2.)\n\n\n") ("system:s199" "\ndesc:transcript-on\n\n\nprocedure: (transcript-on path)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\n\n" "\ntranscript-on opens the file named by path for output,\nand it copies to this file all input from the current input port and\nall output to the current output port.\nAn exception is raised with condition-type i/o-filename if the\nfile cannot be opened for output.\n\n\n") ("system:s200" "\n\n\nprocedure: (transcript-off)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "transcript-off ends transcription and closes the transcript file.\n\n\n") ("system:s201" "\n\n\nprocedure: (transcript-cafe path)\n\nlibraries: (chezscheme)\n\n" "path must be a string.\ntranscript-cafe opens a transcript file as with\ntranscript-on and\nenters a new caf; exiting\nfrom this caf (see exit) also ends transcription and closes the\ntranscript file.\nInvoking transcript-off while in a transcript caf ends transcription\nand closes the transcript file but does not cause an exit from the\ncaf.\n\n\n") ("system:s202" "\n\n\nprocedure: (current-time)\n\n\nprocedure: (current-time time-type)\n\nreturns: a time object representing the current time\n\nlibraries: (chezscheme)\n\n" "time-type must be one of the time-type symbols listed above\nand defaults to time-utc.\n\n" "\n\n" "(current-time) --> #<time-utc 1198815722.473668000>\n\n(current-time 'time-process) --> #<time-process 0.120534264>\n") ("system:s203" "\n\nprocedure: (make-time type nsec sec)\n\nreturns: a time object\n\nlibraries: (chezscheme)\n\n" "type must be one of the time-type symbols listed above.\nnsec represents nanoseconds and must be an exact nonnegative\ninteger less than 109.\nsec represents seconds and must be an exact integer.\n\n" "\n\n" "(make-time 'time-utc 787511000 1198783214)\n\n(make-time 'time-duration 10 5)\n\n(make-time 'time-duration 10 -5)\n") ("system:s204" "\n\nprocedure: (time? obj)\n\nreturns: #t if obj is a time object, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(time? (current-time)) --> #t\n\n(time? (make-time 'time-utc 0 0)) --> #t\n\n(time? \"1400 hours\") --> #f\n") ("system:s205" "\n\nprocedure: (time-type time)\n\nreturns: the time type of time\n\n\nprocedure: (time-nanosecond time)\n\nreturns: the nanosecond of time\n\n\nprocedure: (time-second time)\n\nreturns: the second of time\n\nlibraries: (chezscheme)\n\n" "time must be a time object.\n\n" "\n\n" "(time-type (current-time)) --> time-utc\n\n(time-type (current-time 'time-process)) --> time-process\n\n(time-type (make-time 'time-duration 0 50)) --> time-duration\n\n(time-second (current-time)) --> 1198816497\n\n(time-nanosecond (current-time)) --> 2399000\n\n(time-second (make-time 'time-duration 10 -5)) --> -5\n\n(time-nanosecond (make-time 'time-duration 10 -5)) --> 10\n") ("system:s206" "\n\nprocedure: (set-time-type! time type)\n\nreturns: unspecified\n\n\nprocedure: (set-time-nanosecond! time nsec)\n\nreturns: unspecified\n\n\nprocedure: (set-time-second! time sec)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "time must be a time object.\ntype must be one of the time-type symbols listed above.\nnsec represents nanoseconds and must be an exact nonnegative\ninteger less than 109.\nsec represents seconds and must be an exact integer.\n\n" "\nEach of these procedures modifies the time object, changing one aspect\nwhile leaving the others unaffected.\nFor example, set-time-nanosecond! changes the nanosecond of\ntime without changing the second or type.\nIn particular, no conversion of values is performed when the type of a time\nobject is changed.\n\n") ("system:s207" "\n\n\nprocedure: (time=? time1 time2)\n\n\nprocedure: (time<? time1 time2)\n\n\nprocedure: (time<=? time1 time2)\n\n\nprocedure: (time>=? time1 time2)\n\n\nprocedure: (time>? time1 time2)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (chezscheme)\n\n" "time1 and time2 must be time objects and must have\nthe same type.\n\n" "\n\n" "(let ([t (current-time)])\n\n  (time=? t t)) --> #t\n\n(let ([t (current-time)])\n\n  (let loop ()\n\n    (when (time=? (current-time) t))\n\n      (loop))\n\n  (time>? (current-time) t)) --> #t\n") ("system:s208" "\n\nprocedure: (copy-time time)\n\nreturns: a copy of time\n\nlibraries: (chezscheme)\n\n" "\n" "(define t1 (current-time))\n\n(define t2 (copy-time t1))\n\n(eq? t2 t1) --> #f\n\n(eqv? (time-second t2) (time-second t1)) --> #t\n\n(eqv? (time-nanosecond t2) (time-nanosecond t1)) --> #t\n") ("system:s209" "\n\nprocedure: (time-difference time1 time2)\n\nreturns: the result of subtracting time2 from time1\n\n\nprocedure: (time-difference! time1 time2)\n\nreturns: the result of subtracting time2 from time1\n\n\nprocedure: (add-duration time timed)\n\nreturns: the result of adding timed to time\n\n\nprocedure: (add-duration! time timed)\n\nreturns: the result of adding timed to time\n\n\nprocedure: (subtract-duration time timed)\n\nreturns: the result of subtracting timed from time\n\n\nprocedure: (subtract-duration! time timed)\n\nreturns: the result of subtracting timed from time\n\nlibraries: (chezscheme)\n\n" "For time-difference, time1 and time2 must\nhave the same time type, and the result is a time object with\ntime type time-duration.\nFor add-duration, add-duration!,\nsubtract-duration, and subtract-duration!,\ntimed must have time type time-duration,\nand the result is a time object with the same time type as\ntime.\ntime-difference!, add-duration!, and\nsubtract-duration! are potentially destructive, i.e., each\nmight modify and return its first argument, or it might allocate a\nnew time object.\n\n" "\n\n" "(let ([delay (make-time 'time-duration 0 1)])\n\n  (let ([t1 (current-time 'time-monotonic)])\n\n    (sleep delay)\n\n    (let ([t2 (current-time 'time-monotonic)])\n\n      (let ([t3 (time-difference t2 t1)])\n\n        (and\n\n          (eq? (time-type t3) 'time-duration)\n\n          (time>=? t3 delay)\n\n          (time=? (add-duration t1 t3) t2)\n\n          (time=? (subtract-duration t2 t3) t1)))))) --> #t\n") ("system:s210" "\n\nprocedure: (current-date)\n\n\nprocedure: (current-date offset)\n\nreturns: a date object representing the current date\n\nlibraries: (chezscheme)\n\n" "offset represents the time-zone offset in seconds east of UTC,\nas described above.\nIt must be an exact integer in the range -86400 to\n+86400, inclusive and defaults to the local time-zone offset.\nUTC may be obtained by passing an offset of zero.\n\n" "\nIf offset is not provided, then the current time zone's offset\nis used, and date-dst? and date-zone-name report\ninformation about the time zone. If offset is provided, then\ndate-dst? and date-zone-name on the resulting date\nobject produce #f.\n\n" "\nThe following examples assume the local time zone is EST.\n\n" "\n\n" "(current-date) --> #<date Thu Dec 27 23:23:20 2007>\n\n(current-date 0) --> #<date Fri Dec 28 04:23:20 2007>\n\n\n(date-zone-name (current-date)) --> \"EST\" or other system-provided string\n\n(date-zone-name (current-date 0)) --> #f\n") ("system:s211" "\n\nprocedure: (make-date nsec sec min hour day mon year)\n\n\nprocedure: (make-date nsec sec min hour day mon year offset)\n\nreturns: a date object\n\nlibraries: (chezscheme)\n\n" "nsec represents nanoseconds and must be an exact nonnegative integer\nless than 109.\nsec represents seconds and must be an exact nonnegative integer\nless than 62.\nmin represents minutes and must be an exact nonnegative integer\nless than 60.\nhour must be an exact nonnegative integer less than 24.\nday must be an exact integer, 1  day  31.\n(The actual upper limit may be less depending on the month and year.)\nmon represents the month must be an exact integer, 1  mon  12.\nyear must be an exact integer.\nIt should be at least 1970.\noffset represents the time-zone offset in seconds east of UTC,\nas described above.\nIt must be an exact integer in the range -86400 to +86400, inclusive.\nUTC may be specified by passing an offset of zero.\n\n" "\nIf offset is not provided, then the current time zone's offset\nis used, and date-dst? and date-zone-name report\ninformation about the time zone. If offset is provided, then\ndate-dst? and date-zone-name on the resulting date\nobject produce #f.\n\n" "\n\n" "(make-date 0 0 0 0 1 1 1970 0) --> #<date Thu Jan  1 00:00:00 1970>\n\n(make-date 0 30 7 9 23 9 2007 -14400) --> #<date Sun Sep 23 09:07:30 2007>\n\n\n(date-zone-name (make-date 0 30 7 9 23 9 2007 -14400)) --> #f\n\n(string? (date-zone-name (make-date 0 30 7 9 23 9 2007))) --> #t\n") ("system:s212" "\n\nprocedure: (date? obj)\n\nreturns: #t if obj is a date object, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(date? (current-date))\n\n(date? (make-date 0 30 7 9 23 9 2007 -14400))\n\n(date? \"Sun Sep 23 09:07:30 2007\") --> #f\n") ("system:s213" "\n\nprocedure: (date-nanosecond date)\n\nreturns: the nanosecond of date\n\n\nprocedure: (date-second date)\n\nreturns: the second of date\n\n\nprocedure: (date-minute date)\n\nreturns: the minute of date\n\n\nprocedure: (date-hour date)\n\nreturns: the hour of date\n\n\nprocedure: (date-day date)\n\nreturns: the day of date\n\n\nprocedure: (date-month date)\n\nreturns: the month of date\n\n\nprocedure: (date-year date)\n\nreturns: the year of date\n\n\nprocedure: (date-zone-offset date)\n\nreturns: the time-zone offset of date\n\nlibraries: (chezscheme)\n\n" "date must be a date object.\n\n" "\n\n" "(define d (make-date 0 30 7 9 23 9 2007 -14400))\n\n(date-nanosecond d) --> 0\n\n(date-second d) --> 30\n\n(date-minute d) --> 7\n\n(date-hour d) --> 9\n\n(date-day d) --> 23\n\n(date-month d) --> 9\n\n(date-year d) --> 2007\n\n(date-zone-offset d) --> -14400\n") ("system:s214" "\n\nprocedure: (date-week-day date)\n\nreturns: the week-day of date\n\n\nprocedure: (date-year-day date)\n\nreturns: the year-day of date\n\nlibraries: (chezscheme)\n\n" "These procedures allow the day-of-week or day-of-year to be determined for\nthe date represented by date.\nA week-day is an exact nonnegative integer less than 7, where\n0 represents Sunday, 1 represents Monday, and so on.\nA year-day is an exact nonnegative integer less than 367, where\n0 represents the first day of the year (January 1), 1 the\nsecond day, 2 the third, and so on.\n\n" "\n\n" "(define d1 (make-date 0 0 0 0 1 1 1970 -18000))\n\nd1 --> #<date Thu Jan  1 00:00:00 1970>\n\n(date-week-day d1) --> 4\n\n(date-year-day d1) --> 0\n\n\n(define d2 (make-date 0 30 7 9 23 9 2007 -14400))\n\nd2 --> #<date Sun Sep 23 09:07:30 2007>\n\n(date-week-day d2) --> 0\n\n(date-year-day d2) --> 265\n") ("system:s215" "\n\nprocedure: (date-dst? date)\n\nreturns: whether date is in Daylight Saving Time\n\n\nprocedure: (date-zone-name date)\n\nreturns: #f or a string naming the time zone of date\n\nlibraries: (chezscheme)\n\n" "These procedures report time-zone information for\nthe date represented by date for a date object that\nis constructed without an explicit time-zone offset. When\na date object is created instead with explicit time-zone offset,\nthese procedures produce #f.\n\n" "\nDaylight Saving Time status for the current time zone and a name\nstring for the time zone are computed using platform-specific routines.\nIn particular, the format of the zone name is platform-specific.\n\n" "\n\n" "(define d (make-date 0 30 7 9 23 9 2007))\n\n(date-zone-offset d) --> -14400 assuming Eastern U.S. time zone\n\n(date-dst? d) --> #t\n\n(date-zone-name d) --> \"EDT\" or some system-provided string\n") ("system:s216" "\n\nprocedure: (time-utc->date time)\n\n\nprocedure: (time-utc->date time offset)\n\nreturns: a date object corresponding to time\n\n\nprocedure: (date->time-utc date)\n\nreturns: a time object corresponding to date\n\nlibraries: (chezscheme)\n\n" "These procedures are used to convert between time and date objects.\nThe time argument to time-utc->date must have time-type\nutc, and date->time-utc always returns a time\nobject with time-type utc.\n\n" "\nFor time-utc->date,\noffset represents the time-zone offset in seconds east of UTC,\nas described at the beginning of this section.\nIt must be an exact integer in the range -86400 to\n+86400, inclusive and defaults to the local time-zone offset.\nUTC may be obtained by passing an offset of zero.\n\n" "\nIf offset is not provided to time-utc->date, then the current time zone's offset\nis used, and date-dst? and date-zone-name report\ninformation about the time zone. If offset is provided, then\ndate-dst? and date-zone-name on the resulting date\nobject produce #f.\n\n" "\n\n" "(define d (make-date 0 30 7 9 23 9 2007 -14400))\n\n(date->time-utc d) --> #<time-utc 1190552850.000000000>\n\n(define t (make-time 'time-utc 0 1190552850))\n\n(time-utc->date t) --> #<date Sun Sep 23 09:07:30 2007>\n\n(time-utc->date t 0) --> #<date Sun Sep 23 13:07:30 2007>\n") ("system:s217" "\n\nprocedure: (date-and-time)\n\n\nprocedure: (date-and-time date)\n\nreturns: a string giving the current date and time\n\nlibraries: (chezscheme)\n\n" "The string is always in the format illustrated by the examples below and\nalways has length 24.\n\n" "\n\n" "(date-and-time) --> \"Fri Jul 13 13:13:13 2001\"\n\n(define d (make-date 0 0 0 0 1 1 2007 0))\n\n(date-and-time d) --> \"Mon Jan 01 00:00:00 2007\"\n") ("system:s218" "\n\nprocedure: (sleep time)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "time must be a time object with type time-duration.\nsleep causes the invoking thread to suspend operation for\napproximately the amount of time indicated by the time object, unless\nthe process receives a signal that interrupts the sleep operation.\nThe actual time slept depends on the granularity of the system clock\nand how busy the system is running other threads and processes.\n\n\n") ("system:s219" "\n\n\nsyntax: (time expr)\n\nreturns: the values of expr\n\nlibraries: (chezscheme)\n\n" "time evaluates expr and, as a side-effect, prints (to the\nconsole-output port) the amount of cpu time, the amount of real time,\nthe number of bytes allocated, and the amount of collection overhead\nassociated with evaluating expr.\n\n" "\n\n" "> (time (collect))\n\n(time (collect))\n\n    1 collection\n\n    1 ms elapsed cpu time, including 1 ms collecting\n\n    1 ms elapsed real time, including 1 ms collecting\n\n    160 bytes allocated, including 8184 bytes reclaimed\n") ("system:s220" "\n\nprocedure: (display-statistics)\n\n\nprocedure: (display-statistics textual-output-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure displays a running total of the amount of\ncpu time, real time, bytes allocated, and collection overhead.\nIf textual-output-port is not supplied, it defaults to the current output port.\n\n\n") ("system:s221" "\n\n\nprocedure: (cpu-time)\n\nreturns: the amount of cpu time consumed since system start-up\n\nlibraries: (chezscheme)\n\n" "The amount is in milliseconds.\nThe amount includes \"system\" as well as \"user\" time, i.e., time\nspent in the kernel on behalf of the process as well as time spent in\nthe process itself.\n\n" "\nSee also current-time, which returns more precise information.\n\n\n") ("system:s222" "\n\n\nprocedure: (real-time)\n\nreturns: the amount of real time that has elapsed since system start-up\n\nlibraries: (chezscheme)\n\n" "The amount is in milliseconds.\n\n" "\nSee also current-time, which returns more precise information.\n\n\n") ("system:s223" "\n\n\nprocedure: (bytes-allocated)\n\n\nprocedure: (bytes-allocated g)\n\nreturns: the number of bytes currently allocated\n\nlibraries: (chezscheme)\n\n" "If g is supplied, bytes-allocated returns the number of\nbytes currently allocated for Scheme objects in the specified generation.\ng must be a nonnegative exact integer no greater than the\nmaximum nonstatic generation, i.e., the\nvalue returned by collect-maximum-generation, or the symbol\nstatic.\nIf g is not supplied, bytes-allocated returns the total\nnumber of bytes allocated in all generations.\n\n\n") ("system:s224" "\n\n\nprocedure: (initial-bytes-allocated)\n\nreturns: the total number of bytes allocated after loading boot files\n\nlibraries: (chezscheme)\n\n") ("system:s225" "\n\nprocedure: (bytes-deallocated)\n\nreturns: the total number of bytes deallocated by the garbage collector\n\nlibraries: (chezscheme)\n\n" "The total number of bytes allocated by the current process, whether\nstill in use or not, can be obtained by summing\n(bytes-deallocated) and (bytes-allocated)\nand possibly subtracting (initial-bytes-allocated).\n\n") ("system:s226" "\n\n\nprocedure: (current-memory-bytes)\n\nreturns: the total number of bytes currently allocated, including overhead\n\nlibraries: (chezscheme)\n\n" "current-memory-bytes returns the total size of the heap\nin bytes, including not only the bytes occupied for Scheme objects\nbut also various forms of overhead, including fragmentation and\nreserved but not currently occupied memory, and is thus an accurate\nmeasure of the amount of heap memory currently reserved from the\noperating system for the current process.\n\n") ("system:s227" "\n\n\nprocedure: (maximum-memory-bytes)\n\nreturns: the maximum number of bytes ever allocated, including overhead\n\nlibraries: (chezscheme)\n\n" "maximum-memory-bytes returns the maximum size of the heap\nin bytes, i.e., the maximum value that current-memory-bytes\nreturned or could have returned, since the last call to\nreset-maximum-memory-bytes! or, if there has been no such\ncall, since the process started.\n\n") ("system:s228" "\n\n\nprocedure: (reset-maximum-memory-bytes!)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "reset-maximum-memory-bytes! resets the maximum recorded size\nof the heap to the current size of the heap.\n\n") ("system:s229" "\n\n\nprocedure: (collections)\n\nreturns: the number garbage collections so far\n\nlibraries: (chezscheme)\n\n") ("system:s230" "\n\nprocedure: (statistics)\n\nreturns: a sstats record containing current statistics\n\nlibraries: (chezscheme)\n\n" "statistics packages together various timing and allocation\nstatistics into a single sstats record.\nA sstats record has the following fields:\n\n" "\n\ncpu, the cpu time consumed,\nreal, the elapsed real time,\nbytes, the number of bytes allocated,\ngc-count, the number of collections,\ngc-cpu, the cpu time consumed during collections,\ngc-real, the elapsed real time during collections, and\ngc-bytes, the number of bytes reclaimed by the collector.\n\n\n" "\nAll values are computed since system start-up.\nThe time values are time objects (Section 12.10),\nand the bytes and count values are exact integers.\n\n" "\nstatistics might be defined as follows:\n\n" "\n\n" "(define statistics\n\n  (lambda ()\n\n    (make-sstats\n\n      (current-time 'time-thread)\n\n      (current-time 'time-monotonic)\n\n      (- (+ (bytes-allocated) (bytes-deallocated))\n\n         (initial-bytes-allocated))\n\n      (collections)\n\n      (current-time 'time-collector-cpu)\n\n      (current-time 'time-collector-real)\n\n      (bytes-deallocated))))\n") ("system:s231" "\n\nprocedure: (make-sstats cpu real bytes gc-count gc-cpu gc-real gc-bytes)\n\nreturns: a sstats record\n\nlibraries: (chezscheme)\n\n" "The time arguments (cpu, real, gc-cpu, and gc-real) must be time objects.\nThe other arguments must be exact integers.\n\n\n") ("system:s232" "\n\n\nprocedure: (sstats? obj)\n\nreturns: #t if obj is a sstats record, otherwise #f\n\nlibraries: (chezscheme)\n\n") ("system:s233" "\n\nprocedure: (sstats-cpu s)\n\n\nprocedure: (sstats-real s)\n\n\nprocedure: (sstats-bytes s)\n\n\nprocedure: (sstats-gc-count s)\n\n\nprocedure: (sstats-gc-cpu s)\n\n\nprocedure: (sstats-gc-real s)\n\n\nprocedure: (sstats-gc-bytes s)\n\nreturns: the value of the corresponding field of s\n\nlibraries: (chezscheme)\n\n" "s must be a sstats record.\n\n") ("system:s234" "\n\n\nprocedure: (set-sstats-cpu! s new-value)\n\n\nprocedure: (set-sstats-real! s new-value)\n\n\nprocedure: (set-sstats-bytes! s new-value)\n\n\nprocedure: (set-sstats-gc-count! s new-value)\n\n\nprocedure: (set-sstats-gc-cpu! s new-value)\n\n\nprocedure: (set-sstats-gc-real! s new-value)\n\n\nprocedure: (set-sstats-gc-bytes! s new-value)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "s must be a sstats record, the new-value arguments for the time fields\n(cpu, real, gc-cpu, and gc-real)\nmust be time objects, and\nthe other new-value arguments must be exact integers.\nEach procedure sets the value of the corresponding field of s to\nnew-value.\n\n\n") ("system:s235" "\n\n\nprocedure: (sstats-difference s1 s2)\n\nreturns: a sstats record representing the difference between s1 and s2\n\nlibraries: (chezscheme)\n\n" "s1 and s2 must be sstats records.\nsstats-difference subtracts each field of s2 from the\ncorresponding field of s1 to produce the resulting sstats\nrecord.\n\n") ("system:s236" "\n\n\nprocedure: (sstats-print s)\n\n\nprocedure: (sstats-print s textual-output-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "s must be a sstats record.\nIf textual-output-port is not supplied, it defaults to the current output port.\nsstats-print displays the fields of s in a manner similar\nto display-statistics and time.\n\n\n") ("system:s237" "\n\n\nglobal parameter: enable-object-counts\n\nlibraries: (chezscheme)\n\n" "The value of enable-object-counts is a boolean value that\ndetermines whether the collector records object counts as it runs and\nhence whether the object counts returned by the procedure\nobject-counts are accurate.\nThe parameter is set to #f by default, since enabling object\ncounts adds overhead to collection.\n\n" "\nCounts for the static generation are always correct.\nCounts for a nonstatic generation n are correct immediately after a\ncollection of generation m  n (regardless of whether the target\ngeneration is m or m + 1) if enable-object-counts\nwas set to #t during the collection.\n\n" "\nOne strategy for collecting object counts with minimal overhead is\nto enable object counts only while collecting the maximum nonstatic\ngeneration and to obtain the object counts immediately after that\ncollection.\n\n") ("system:s238" "\n\n\nprocedure: (object-counts)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "The procedure object-counts returns a nested association list\nrepresenting object counts and bytes allocated for each heap-allocated\nprimitive type and record type with at least one live instance in one\nor more generations.\n(Heap-allocated primitive types include, e.g., pairs and vectors, but\nnot, e.g., fixnums or characters.)\nObject counts are gathered by the collector only when\nenable-object-counts is #t.\nThe description of enable-object-counts details the\ncircumstances under which the counts are accurate.\n\n" "\nThe association list returned by object-counts has the following\nstructure:\n\n" "\n\n" "((type (generation count . bytes) ...) ...)\n" "type is either the name of a primitive type, represented as a\nsymbol, e.g., pair, or a record-type descriptor (rtd).\ngeneration is a nonnegative fixnum between 0 and the value\nof (collect-maximum-generation), inclusive, or the symbol\nstatic representing the static generation.\ncount and bytes are nonnegative fixnums.\n\n" "\n\n" "(collect-request-handler void)\n\n(enable-object-counts #t)\n\n(define-record-type frob (fields x))\n\n(define x (make-frob (make-frob #f)))\n\n(collect 3 3)\n\n(cdr (assoc 3\n\n       (cdr (assoc (record-type-descriptor frob)\n\n              (object-counts)))))                --> (2 . 16)\n") ("system:s239" "\n\n\nthread parameter: generate-allocation-counts\n\nlibraries: (chezscheme)\n\n" "When this parameter has a true value, the compiler inserts a short sequence of\ninstructions at each allocation point in generated code to track the amount of\nallocation that occurs.\nThis parameter is initially false.\n\n") ("system:s240" "\n\n\nthread parameter: generate-instruction-counts\n\nlibraries: (chezscheme)\n\n" "When this parameter has a true value, the compiler inserts a short\nsequence of instructions in each block of generated code to track the\nnumber of instructions executed by that block.\nThis parameter is initially false.\n\n") ("system:s241" "\n\n\nprocedure: (make-cost-center)\n\nreturns: a new cost center\n\nlibraries: (chezscheme)\n\n" "The recorded costs of the new cost center are initialized to zero.\n\n") ("system:s242" "\n\n\nprocedure: (cost-center? obj)\n\nreturns: #t if obj is a cost center, otherwise #f\n\nlibraries: (chezscheme)\n\n") ("system:s243" "\n\nprocedure: (with-cost-center cost-center thunk)\n\n\nprocedure: (with-cost-center timed? cost-center thunk)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "thunk must be a procedure that accepts zero arguments.\nwith-cost-center invokes thunk without arguments and\nreturns its values.\nIt also tracks, dynamically, the bytes allocated, instructions executed,\nand cpu time elapsed while evaluating the invocation of thunk and\nadds the tracked costs to the cost center's running record of these costs.\n\n" "\nAs described above, allocation counts are tracked only for code\ncompiled with the parameter generate-allocation-counts set\nto true, and instruction counts are tracked only for code compiled\nwith generate-instruction-counts set to true.\nCpu time is tracked only if timed? is provided and not false and\nincludes cpu time spent in instrumented, uninstrumented, and non-Scheme\ncode.\n\n") ("system:s244" "\n\n\nprocedure: (cost-center-instruction-count cost-center)\n\nreturns: the number of instructions tracked by cost-center\n\nlibraries: (chezscheme)\n\n") ("system:s245" "\n\nprocedure: (cost-center-allocation-count cost-center)\n\nreturns: the number of allocated bytes tracked by cost-center\n\nlibraries: (chezscheme)\n\n") ("system:s246" "\n\nprocedure: (cost-center-time cost-center)\n\nreturns: the cpu time tracked by cost-center\n\nlibraries: (chezscheme)\n\n" "The cpu time is returned as a time object with time-type time-duration.\n\n") ("system:s247" "\n\n\nprocedure: (reset-cost-center! cost-center)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure resets the costs recorded by cost-center to zero.\n\n\n") ("system:s248" "\n\n\nprocedure: (make-parameter object)\n\n\nprocedure: (make-parameter object procedure)\n\nreturns: a parameter (procedure)\n\nlibraries: (chezscheme)\n\n" "make-parameter accepts one or two arguments.\nThe first argument is the initial value of the internal variable, and\nthe second, if present, is a filter applied to the initial value\nand all subsequent values.\nThe filter should accept one argument.\nIf the value is not appropriate, the filter should raise an exception or\nconvert the value into a more appropriate form.\n\n" "\nFor example, the default value of print-length is defined as\nfollows:\n\n" "\n\n" "(define print-length\n\n  (make-parameter\n\n    #f\n\n    (lambda (x)\n\n      (unless (or (not x) (and (fixnum? x) (fx>= x 0)))\n\n        (assertion-violationf 'print-length\n\n          \"~s is not a positive fixnum or #f\"\n\n          x))\n\n      x)))\n" "\n" "(print-length)  --> #f\n\n(print-length 3)\n\n(print-length)  --> 3\n\n(format \"~s\" '(1 2 3 4 5 6))  --> \"(1 2 3 ...)\"\n\n(print-length #f)\n\n(format \"~s\" '(1 2 3 4 5 6))  --> \"(1 2 3 4 5 6)\"\n" "The definition of make-parameter is straightforward using\ncase-lambda:\n\n" "\n\n" "(define make-parameter\n\n  (case-lambda\n\n    [(init guard)\n\n     (let ([v (guard init)])\n\n       (case-lambda\n\n         [() v]\n\n         [(u) (set! v (guard u))]))]\n\n    [(init)\n\n     (make-parameter init (lambda (x) x))]))\n" "In threaded versions of Chez Scheme, make-parameter creates\nglobal parameters.\nThe procedure make-thread-parameter, described in\nSection 15.7, may be used to make thread\nparameters.\n\n\n") ("system:s250" "\n\n\nsyntax: (parameterize ((param expr) ...) body1 body2 ...)\n\nreturns: the values of the body body1 body2 ...\n\nlibraries: (chezscheme)\n\n" "Using the syntactic form parameterize, the values of parameters can\nbe changed in a manner analogous to fluid-let for ordinary variables.\nEach param is set to the value of the corresponding\nexpr while the body is evaluated.\nWhen control leaves the body by normal return or by the invocation of a\ncontinuation created outside of the body, the parameters are restored to\ntheir original values.\nIf control returns to the body via a continuation created during the\nexecution of the body, the parameters are again set to their temporary\nvalues.\n\n" "\n\n" "(define test\n\n  (make-parameter 0))\n\n(test)  --> 0\n\n(test 1)\n\n(test)  --> 1\n\n(parameterize ([test 2])\n\n  (test))  --> 2\n\n(test)  --> 1\n\n(parameterize ([test 2])\n\n  (test 3)\n\n  (test))  --> 3\n\n(test)  --> 1\n\n(define k (lambda (x) x))\n\n(begin (set! k (call/cc k))\n\n       'k)  --> k\n\n(parameterize ([test 2])\n\n  (test (call/cc k))\n\n  (test))  --> k\n\n(test)  --> 1\n\n(k 3)  --> 3\n\n(test)  --> 1\n" "The definition of parameterize is similar to the definition of\nfluid-let (page 117):\n\n" "\n\n" "(define-syntax parameterize\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ () b1 b2 ...) #'(begin b1 b2 ...)]\n\n      [(_ ((x e) ...) b1 b2 ...)\n\n       (with-syntax ([(p ...) (generate-temporaries #'(x ...))]\n\n                     [(y ...) (generate-temporaries #'(x ...))])\n\n         #'(let ([p x] ... [y e] ...)\n\n             (let ([swap (lambda ()\n\n                           (let ([t (p)]) (p y) (set! y t))\n\n                           ...)])\n\n               (dynamic-wind swap (lambda () b1 b2 ...) swap))))])))\n") ("system:s251" "\n\n\nprocedure: (virtual-register-count)\n\nreturns: the number of virtual registers\n\nlibraries: (chezscheme)\n\n" "As of Version 9.0, the number of virtual registers is set at 16.\nIt cannot be changed except by recompiling Chez Scheme from\nsource.\n\n") ("system:s252" "\n\n\nprocedure: (set-virtual-register! k x)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "set-virtual-register! stores x in virtual register k.\nk must be a nonnegative fixnum less than the value of\n(virtual-register-count).\n\n") ("system:s253" "\n\n\nprocedure: (virtual-register k)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "virtual-register returns the value most recently\nstored in virtual register k (on the current thread, in\nthreaded versions of the system).\n\n\n") ("system:s254" "\n\n\nprocedure: (scheme-version)\n\nreturns: a version string\n\nlibraries: (chezscheme)\n\n" "The version string is in the form\n\n" "\n\n" "\"Chez Scheme Version version\"\n" "for Chez Scheme, and\n\n" "\n\n" "\"Petite Chez Scheme Version version\"\n" "for Petite Chez Scheme.\n\n") ("system:s255" "\n\n\nprocedure: (scheme-version-number)\n\nreturns: three values: the major, minor, and sub-minor version numbers\n\nlibraries: (chezscheme)\n\n" "Each of the three return values is a nonnegative fixnum.\n\n" "\nIn Chez Scheme Version 7.9.4:\n\n" "\n\n" "(scheme-version-number) --> 7\n\n                        gifs/ghostRightarrow.gif 9\n\n                        gifs/ghostRightarrow.gif 4\n") ("system:s256" "\n\nprocedure: (petite?)\n\nreturns: #t if called in Petite Chez Scheme, #f otherwise\n\nlibraries: (chezscheme)\n\n" "The only difference between Petite Chez Scheme and Chez Scheme is that\nthe compiler is not available in the former, so this predicate can serve as\na way to determine if the compiler is available.\n\n\n") ("system:s257" "\n\n\nprocedure: (threaded?)\n\nreturns: #t if called in a threaded version of the system, #f otherwise\n\nlibraries: (chezscheme)\n\n") ("system:s258" "\n\nprocedure: (interactive?)\n\nreturns: #t if system is run interactively, #f otherwise\n\nlibraries: (chezscheme)\n\n" "This predicate returns #t if the Scheme process's\nstdin and stdout are connected to a tty (Unix-based systems) or console\n(Windows).\nOtherwise, it returns #f.\n\n\n") ("system:s259" "\n\n\nprocedure: (get-process-id)\n\nreturns: the operating system process id of the current process\n\nlibraries: (chezscheme)\n\n") ("system:s260" "\n\nprocedure: (getenv key)\n\nreturns: environment value of key or #f\n\nlibraries: (chezscheme)\n\n" "key must be a string.\ngetenv returns the operating system shell's environment value\nassociated with key, or #f if no environment value\nis associated with key.\n\n" "\n\n" "(getenv \"HOME\") --> \"/u/freddy\"\n") ("system:s261" "\n\nprocedure: (putenv key value)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "key and value must be strings.\n\n" "\nputenv stores the key, value pair in the\nenvironment of the process,\nwhere it is available to the current process (e.g., via getenv)\nand any spawned processes.\n\n" "\n\n" "(putenv \"SCHEME\" \"rocks!\")\n\n(getenv \"SCHEME\") --> \"rocks!\"\n") ("system:s262" "\n\nprocedure: (get-registry key)\n\nreturns: registry value of key or #f\n\n\nprocedure: (put-registry! key val)\n\n\nprocedure: (remove-registry! key)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "key and val must be strings.\n\n" "\nget-registry returns a string containing the registry\nvalue of key if the value exists.\nIf no registry value for key exists, get-registry returns\n#f.\n\n" "\nput-registry! sets the registry\nvalue of key to val.\nIt raises an exception with condition type &assertion if the\nvalue cannot be set, which may happen if\nthe user has insufficient access.\n\n" "\nremove-registry! removes the registry\nkey or value named by key.\nIt raises an exception with condition type &assertion if the\nvalue cannot be removed.\nReasons for failure include the key not being present, the user having\ninsufficient access, or key being a key with subkeys.\n\n" "\nThese routines are defined for Windows only.\n\n" "\n\n" "(get-registry \"hkey_local_machine\\\\Software\\\\North\\\\South\") --> #f\n\n(put-registry! \"hkey_local_machine\\\\Software\\\\North\\\\South\" \"east\")\n\n(get-registry \"hkey_local_machine\\\\Software\\\\North\\\\South\") --> \"east\"\n\n(remove-registry! \"hkey_local_machine\\\\Software\\\\North\")\n\n(get-registry \"hkey_local_machine\\\\Software\\\\North\\\\South\") --> #f\n") ("system:s263" "\n\n\nthread parameter: subset-mode\n\nlibraries: (chezscheme)\n\n") ("control:s0" "\n\n\nsyntax: (exclusive-cond clause1 clause2 ...)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "exclusive-cond is a version of cond\n(Section http://scheme.com/tspl4/./control.html#g995.3 of TSPLFOUR) that differs\nfrom cond in that the tests embedded within the clauses\nare assumed to be exclusive in the sense that if one of the tests\nis true, the others are not.\nThis allows the implementation to reorder clauses when profiling\ninformation is available at expansion time (Section 12.7).\n\n" "\nThe (test) form of clause is not supported.\nThe order chosen when profiling information is available is based\non the relative numbers of times the RHS of each clause is executed,\nand (test) has no RHS.\n(test => values) is equivalent, albeit less concise.\n\n") ("control:s1" "\n\n\nsyntax: (case expr0 clause1 clause2 ...)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "Each clause but the last must take one of the forms:\n\n" "\n\n" "((key ...) expr1 expr2 ...)\n\n(key expr1 expr2 ...)\n" "where each key is a datum distinct from the other keys.\nThe last clause may be in the above form or it may be an\nelse clause of the form\n\n" "\n\n" "(else expr1 expr2 ...)\n" "expr0 is evaluated and the result is compared\n(using equal?) against the keys of each clause in order.\nIf a clause containing a matching key is found, the\nexpressions expr1 expr2 ... are evaluated in sequence\nand the values of the last expression are returned.\n\n" "\nIf none of the clauses contains a matching key and an else clause\nis present, the expressions expr1 expr2 ... of the\nelse clause are evaluated in sequence and the values of the last\nexpression are returned.\n\n" "\nIf none of the clauses contains a matching key and no else clause\nis present, the value or values are unspecified.\n\n" "\nThe Revised6 Report version of case does not support singleton\nkeys (the second of the first two clause forms above) and uses\neqv? rather than equal? as the comparison procedure.\nBoth versions are defined in terms of exclusive-cond so that\nif profiling information is available at expansion time, the clauses will\nbe reordered to put those that are most frequently executed first.\n\n" "\n\n" "(let ([ls '(ii iv)])\n\n  (case (car ls)\n\n    [i 1]\n\n    [ii 2]\n\n    [iii 3]\n\n    [(iiii iv) 4]\n\n    [else 'out-of-range])) --> 2\n\n\n(define p\n\n  (lambda (x)\n\n    (case x\n\n      [(\"abc\" \"def\") 'one]\n\n      [((a b c)) 'two]\n\n      [else #f])))\n\n\n(p (string #\\d #\\e #\\f)) --> one\n\n(p '(a b c)) --> two\n") ("control:s3" "\n\nsyntax: (record-case expr clause1 clause2 ...)\n\nreturns: see explanation\n\nlibraries: (chezscheme)\n\n" "record-case is a restricted form of case that supports the\ndestructuring of records, or tagged lists.\nA record has as its first element a tag that determines what \"type\"\nof record it is; the remaining elements are the fields of the record.\n\n" "\nEach clause but the last must take the form\n\n" "\n\n" "((key ...) formals body1 body2 ...)\n" "where each key is a datum distinct from the other keys.\nThe last clause may be in the above form or it may be an\nelse clause of the form\n\n" "\n\n" "(else body1 body2 ...)\n" "expr must evaluate to a pair.\nexpr is evaluated and the car of its value is compared\n(using eqv?) against the keys of each clause in order.\nIf a clause containing a matching key is found, the variables in\nformals are bound to the remaining elements\nof the list and the expressions\nbody1 body2 ... are evaluated in sequence.\nThe value of the last expression is returned.\nThe effect is identical to the application of\n\n" "\n\n" "(lambda formals body1 body2 ...)\n" "to the cdr of the list.\n\n" "\nIf none of the clauses contains a matching key and an else clause\nis present, the expressions body1 body2 ... of the\nelse clause are evaluated in sequence and the value of the last\nexpression is returned.\n\n" "\nIf none of the clauses contains a matching key and no else clause\nis present, the value is unspecified.\n\n\n" "\n\n" "(define calc\n\n  (lambda (x)\n\n    (record-case x\n\n      [(add) (x y) (+ x y)]\n\n      [(sub) (x y) (- x y)]\n\n      [(mul) (x y) (* x y)]\n\n      [(div) (x y) (/ x y)]\n\n      [else (assertion-violationf 'calc \"invalid expression ~s\" x)])))\n\n\n(calc '(add 3 4)) --> 7\n\n(calc '(div 3 4)) --> 3/4\n") ("control:s7" "\n\n\nprocedure: (ormap procedure list1 list2 ...)\n\nreturns: see explanation\n\nlibraries: (chezscheme)\n\n" "ormap is identical to the Revised6 Report exists.\n\n") ("control:s8" "\n\n\nprocedure: (andmap procedure list1 list2 ...)\n\nreturns: see explanation\n\nlibraries: (chezscheme)\n\n" "andmap is identical to the Revised6 Report for-all.\n\n\n") ("control:s9" "\n\n\nprocedure: (call/1cc procedure)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "call/1cc obtains its continuation and passes it to procedure,\nwhich should accept one argument.\nThe continuation itself is represented by a procedure.\nThis procedure normally takes one argument but may take an arbitrary\nnumber of arguments depending upon whether the context of the call\nto call/1cc\nexpects multiple return values or not.\nWhen this procedure is applied to a value or values, it returns the values\nto the continuation of the call/1cc application.\n\n" "\nThe continuation obtained by call/1cc is a\n\"one-shot continuation.\"\nA one-shot continuation should not be returned to multiple times, either\nby invoking the continuation or returning normally from procedure more\nthan once.\nA one-shot continuation is \"promoted\" into a normal (multishot)\ncontinuation, however, if it is \nstill active when a\nnormal continuation is obtained by call/cc.\nAfter a one-shot continuation is promoted into a multishot continuation,\nit behaves exactly as if it had been obtained via call/cc.\nThis allows call/cc and call/1cc to be used together\ntransparently in many applications.\n\n" "\nOne-shot continuations may be more efficient for some applications than\nmultishot continuations.\nSee the paper \"Representing control in the presence of one-shot\ncontinuations\" [citation3] for more information about\none-shot continuations, including how they are implemented in\nChez Scheme.\n\n" "\nThe following examples highlight the similarities and differences\nbetween one-shot and normal continuations.\n\n" "\n\n" "(define prod\n\n ; compute the product of the elements of ls, bugging out\n\n ; with no multiplications if a zero element is found\n\n  (lambda (ls)\n\n    (lambda (k)\n\n      (if (null? ls)\n\n          1\n\n          (if (= (car ls) 0)\n\n              (k 0)\n\n              (* (car ls) ((prod (cdr ls)) k)))))))\n\n\n(call/cc (prod '(1 2 3 4))) --> 24\n\n(call/1cc (prod '(1 2 3 4))) --> 24\n\n\n(call/cc (prod '(1 2 3 4 0))) --> 0\n\n(call/1cc (prod '(1 2 3 4 0))) --> 0\n\n\n(let ([k (call/cc (lambda (x) x))])\n\n  (k (lambda (x) 0))) --> 0\n\n\n(let ([k (call/1cc (lambda (x) x))])\n\n  (k (lambda (x) 0))) --> exception\n") ("control:s11" "dynamic-wind\n\n\nprocedure: (dynamic-wind in body out)\n\n\nprocedure: (dynamic-wind critical? in body out)\n\nreturns: values resulting from the application of body\n\nlibraries: (chezscheme)\n\n" "The first form is identical to the Revised6 Report dynamic-wind.\nWhen the optional critical? argument is present and non-false,\nthe in thunk is invoked in a critical section along with the code\nthat records that the body has been entered, and the out thunk is\ninvoked in a critical section along with the code that records\nthat the body has been exited.\nExtreme caution must be taken with this form of dynamic-wind,\nsince an error or long-running computation can leave interrupts\nand automatic garbage collection disabled.\n\n") ("control:s16" "\n\n\nprocedure: (make-engine thunk)\n\nreturns: an engine\n\nlibraries: (chezscheme)\n\n" "An engine is created by passing a thunk (no argument procedure)\nto make-engine.\nThe body of the thunk is the computation to be performed by the engine.\nAn engine itself is a procedure of three arguments:\n\n" "\n\nticks:\na positive integer that specifies\nthe amount of fuel to be given\nto the engine.\nAn engine executes until this fuel runs out or until its computation\nfinishes.\n\n" "\ncomplete:\na procedure of one or more\narguments that\nspecifies what to do if the computation finishes.\nIts arguments are the amount of fuel left over and the\nvalues produced by the computation.\n\n" "\nexpire:\na procedure of one argument that\nspecifies what to do if the fuel runs\nout before the computation finishes.\nIts argument is a new engine capable of continuing the computation\nfrom the point of interruption.\n\n\n" "\nWhen an engine is applied to its arguments, it sets up a timer\nto fire in ticks time units.\n(See set-timer on page 330.)\nIf the engine computation completes before the timer expires, the\nsystem invokes complete, passing \nit the number of ticks left over and\nthe values produced by the computation.\nIf, on the other hand, the timer goes off before the engine computation\ncompletes, the system creates a new engine from the continuation of\nthe interrupted computation and passes this engine to expire.\ncomplete and expire are invoked in the continuation\nof the engine invocation.\n\n" "\nAn implementation of engines is given\nin Section http://scheme.com/tspl4/./examples.html#g20812.11.\nof The Scheme Programming Language, 4th Edition.\n\n" "\nDo not use the timer interrupt (see set-timer) and engines\nat the same time, since engines are implemented in terms of the timer.\n\n" "\nThe following example creates an engine from a trivial computation,\n3, and gives the engine 10 ticks.\n\n" "\n\n" "(define eng\n\n  (make-engine\n\n    (lambda () 3)))\n\n\n(eng 10\n\n     (lambda (ticks value) value)\n\n     (lambda (x) x)) --> 3\n" "It is often useful to pass list as the complete\nprocedure to an engine, causing an engine that completes to return a\nlist whose first element is the ticks remaining and whose remaining elements\nare the values returned by the computation.\n\n" "\n\n" "(define eng\n\n  (make-engine\n\n    (lambda () 3)))\n\n\n(eng 10\n\n     list\n\n     (lambda (x) x)) --> (9 3)\n" "In the example above, the value is 3 and there are 9 ticks left over,\ni.e., it takes one unit of fuel to evaluate 3.\n(The fuel amounts given here are for illustration only.\nYour mileage may vary.)\n\n" "\nTypically, the engine computation does not finish in one try.\nThe following example displays the use of an engine to\ncompute the 10th Fibonacci number in steps.\n\n" "\n\n" "(define fibonacci\n\n  (lambda (n)\n\n    (let fib ([i n])\n\n      (cond\n\n        [(= i 0) 0]\n\n        [(= i 1) 1]\n\n        [else (+ (fib (- i 1))\n\n                 (fib (- i 2)))]))))\n\n\n(define eng\n\n  (make-engine\n\n    (lambda ()\n\n      (fibonacci 10))))\n\n\n(eng 50\n\n     list\n\n     (lambda (new-eng)\n\n       (set! eng new-eng)\n\n       \"expired\")) --> \"expired\"\n\n\n(eng 50\n\n     list\n\n     (lambda (new-eng)\n\n       (set! eng new-eng)\n\n       \"expired\")) --> \"expired\"\n\n\n(eng 50\n\n     list\n\n     (lambda (new-eng)\n\n       (set! eng new-eng)\n\n       \"expired\")) --> \"expired\"\n\n\n(eng 50\n\n     list\n\n     (lambda (new-eng)\n\n       (set! eng new-eng)\n\n       \"expired\")) --> (21 55)\n" "Each time the engine's fuel runs out, the expire procedure assigns\neng to the new engine.\nThe entire computation requires four blocks of 50 ticks to complete; of the\nlast 50 it uses all but 21.\nThus, the total amount of fuel used is 179 ticks.\nThis leads to the following procedure, mileage, which \"times\" a\ncomputation using engines:\n\n" "\n\n" "(define mileage\n\n  (lambda (thunk)\n\n    (let loop ([eng (make-engine thunk)] [total-ticks 0])\n\n      (eng 50\n\n           (lambda (ticks . values)\n\n             (+ total-ticks (- 50 ticks)))\n\n           (lambda (new-eng)\n\n             (loop new-eng\n\n                   (+ total-ticks 50)))))))\n\n\n(mileage (lambda () (fibonacci 10))) --> 179\n" "The choice of 50 for the number of ticks to use each time is\narbitrary, of course.\nIt might make more sense to pass a much larger number, say 10000,\nin order to reduce the number of times the computation is interrupted.\n\n" "\nThe next procedure is similar to mileage, but it returns a list\nof engines, one for each tick it takes to complete the computation.\nEach of the engines in the list represents a \"snapshot\" of the\ncomputation, analogous to a single frame of a moving picture.\nsnapshot might be useful for \"single stepping\" a computation.\n\n" "\n\n" "(define snapshot\n\n  (lambda (thunk)\n\n    (let again ([eng (make-engine thunk)])\n\n      (cons eng\n\n            (eng 1 (lambda (t . v) '()) again)))))\n" "The recursion embedded in this procedure is rather strange.\nThe complete procedure performs the base case, returning the empty\nlist, and the expire procedure performs the recursion.\n\n" "\nThe next procedure, round-robin, could be the basis for a simple\ntime-sharing operating system.\nround-robin maintains a queue of processes (a list of engines),\ncycling through the queue in a round-robin fashion, allowing each\nprocess to run for a set amount of time.\nround-robin returns a list of the values returned by the engine\ncomputations in the order that the computations complete.\nEach computation is assumed to produce exactly one value.\n\n" "\n\n" "(define round-robin\n\n  (lambda (engs)\n\n    (if (null? engs)\n\n        '()\n\n        ((car engs)\n\n         1\n\n         (lambda (ticks value)\n\n           (cons value (round-robin (cdr engs))))\n\n         (lambda (eng)\n\n           (round-robin\n\n             (append (cdr engs) (list eng))))))))\n" "Since the amount of fuel supplied each time, one tick, is constant,\nthe effect of round-robin is to return a list of the values sorted\nfrom the quickest to complete to the slowest to complete.\nThus, when we call round-robin on a list of engines, each computing\none of the Fibonacci numbers, the output list is sorted with the earlier\nFibonacci numbers first, regardless of the order of the input list.\n\n" "\n\n" "(round-robin\n\n  (map (lambda (x)\n\n         (make-engine\n\n           (lambda ()\n\n             (fibonacci x))))\n\n       '(4 5 2 8 3 7 6 2))) --> (1 1 2 3 5 8 13 21)\n" "More interesting things can happen if the amount of fuel varies\neach time through the loop.\nIn this case, the computation would\nbe nondeterministic, i.e., the results would vary from call to call.\n\n" "\nThe following syntactic form, por (parallel-or), returns the\nfirst of its expressions to complete with a true value.\npor is implemented with the procedure first-true, which is\nsimilar to round-robin but quits when any of the engines\ncompletes with a true value.\nIf all of the engines complete, but none with a true value,\nfirst-true (and hence por) returns #f.\nAlso, although first-true passes a fixed amount of fuel to each\nengine, it chooses the next engine to run at random, and is thus\nnondeterministic.\n\n" "\n\n" "(define-syntax por\n\n  (syntax-rules ()\n\n    [(_ x ...)\n\n     (first-true\n\n       (list (make-engine (lambda () x)) ...))]))\n\n\n(define first-true\n\n  (let ([pick\n\n         (lambda (ls)\n\n           (list-ref ls (random (length ls))))])\n\n    (lambda (engs)\n\n      (if (null? engs)\n\n          #f\n\n          (let ([eng (pick engs)])\n\n            (eng 1\n\n                 (lambda (ticks value)\n\n                   (or value\n\n                       (first-true\n\n                         (remq eng engs))))\n\n                 (lambda (new-eng)\n\n                   (first-true\n\n                     (cons new-eng\n\n                           (remq eng engs))))))))))\n" "The list of engines is maintained with pick, which randomly\nchooses an element of the list, and remq, which removes the\nchosen engine from the list.\nSince por is nondeterministic, subsequent uses with the same\nexpressions may not return the same values.\n\n" "\n\n" "(por 1 2 3) --> 2\n\n(por 1 2 3) --> 3\n\n(por 1 2 3) --> 2\n\n(por 1 2 3) --> 1\n" "Furthermore, even if one of the expressions is an infinite loop,\npor still finishes as long as one of the other expressions\ncompletes and returns a true value.\n\n" "\n\n" "(por (let loop () (loop)) 2) --> 2\n" "With engine-return and engine-block, it is possible to\nterminate an engine explicitly.\nengine-return causes the engine to complete, as if the\ncomputation had finished.\nIts arguments are passed to the complete procedure along with the\nnumber of ticks remaining.\nIt is essentially a nonlocal exit from the engine.\nSimilarly, engine-block causes the engine to expire, as if the\ntimer had run out.\nA new engine is made from the continuation of the call to engine-block\nand passed to the expire procedure.\n\n\n") ("control:s27" "\n\n\nprocedure: (engine-block)\n\nreturns: does not return\n\nlibraries: (chezscheme)\n\n" "This causes a running engine to stop, create a new engine capable\nof continuing the computation, and pass the new engine to the original\nengine's third argument\n(the expire procedure).\nAny remaining fuel is forfeited.\n\n" "\n\n" "(define eng\n\n  (make-engine\n\n    (lambda ()\n\n      (engine-block)\n\n      \"completed\")))\n\n\n(eng 100\n\n     (lambda (ticks value) value)\n\n     (lambda (x)\n\n        (set! eng x)\n\n        \"expired\")) --> \"expired\"\n\n\n(eng 100\n\n     (lambda (ticks value) value)\n\n     (lambda (x)\n\n        (set! eng x)\n\n        \"expired\")) --> \"completed\"\n") ("control:s28" "\n\nprocedure: (engine-return obj ...)\n\nreturns: does not return\n\nlibraries: (chezscheme)\n\n" "This causes a running engine to stop and pass control to the\nengine's complete argument.\nThe first argument passed to the complete procedure is the amount of\nfuel remaining, as usual, and\nthe remaining arguments are the objects obj ...\npassed to engine-return.\n\n" "\n\n" "(define eng\n\n  (make-engine\n\n    (lambda ()\n\n      (reverse (engine-return 'a 'b 'c)))))\n\n\n(eng 100\n\n     (lambda (ticks . values) values)\n\n     (lambda (new-eng) \"expired\")) --> (a b c)\n") ("syntax:s0" "\n\n\nsyntax: (fluid-let-syntax ((keyword expr) ...) form1 form2 ...)\n\nreturns: see explanation\n\nlibraries: (chezscheme)\n\n" "Each expr must evaluate to a transformer.\nfluid-let-syntax is similar to the standard let-syntax, except\nthat instead of introducing new bindings for the keywords\nkeyword ...,\nfluid-let-syntax temporarily alters the existing bindings\nfor the keywords during the expansion of its body.\nThat is, during the expansion of form1 form2 ...,\nthe visible lexical (or top-level) binding\nfor each keyword is temporarily replaced by a new association\nbetween the keyword and the corresponding transformer.\nThis affects any references to the keyword that resolve\nto the same lexical (or top-level) binding whether the references occur\nin the text of the body or are introduced during its expansion.\nIn contrast, let-syntax captures only those references that\noccur within the text of its body.\n\n" "\nThe following example shows how fluid-let-syntax\ndiffers from let-syntax.\n\n" "\n\n" "(let ([f (lambda (x) (+ x 1))])\n\n  (let-syntax ([g (syntax-rules ()\n\n                    [(_ x) (f x)])])\n\n    (let-syntax ([f (syntax-rules ()\n\n                      [(_ x) x])])\n\n      (g 1)))) --> 2\n\n\n(let ([f (lambda (x) (+ x 1))])\n\n  (let-syntax ([g (syntax-rules ()\n\n                    [(_ x) (f x)])])\n\n    (fluid-let-syntax ([f (syntax-rules ()\n\n                            [(_ x) x])])\n\n      (g 1)))) --> 1\n" "The two expressions are identical except that the inner\nlet-syntax form\nin the first expression is a fluid-let-syntax form in the second.\nIn the first expression, the f occurring in the expansion of\n(g 1) refers to\nthe let-bound variable f, whereas in the second it refers\nto the keyword f by virtue of the fluid syntax binding for\nf.\n\n" "\nThe following code employs fluid-let-syntax in the definition\nof a define-integrable form that is similar\nto define for procedure definitions except that it causes the\ncode for the procedure to be integrated, or inserted, wherever\na direct call to the procedure is found.\nNo semantic difference is visible between procedures defined with\ndefine-integrable and those defined with define, except that\na top-level define-integrable form must appear before the first\nreference to the defined identifier.\nLexical scoping is preserved, the actual parameters\nin an integrated call are evaluated once and at the proper time,\nintegrable procedures may be used as first-class values, and\nrecursive procedures do not cause indefinite recursive expansion.\n\n" "\n\n" "(define-syntax define-integrable\n\n  (syntax-rules (lambda)\n\n    [(_ name (lambda formals form1 form2 ...))\n\n     (begin\n\n       (define xname\n\n         (fluid-let-syntax ([name (identifier-syntax xname)])\n\n           (lambda formals form1 form2 ...)))\n\n       (define-syntax name\n\n         (lambda (x)\n\n           (syntax-case x ()\n\n             [_ (identifier? x) #'xname]\n\n             [(_ arg (... ...))\n\n              #'((fluid-let-syntax ([name (identifier-syntax xname)])\n\n                   (lambda formals form1 form2 ...))\n\n                  arg\n\n                  (... ...))]))))]))\n" "A define-integrable has the following form.\n\n" "\n\n" "(define-integrable name lambda-expression)\n" "A define-integrable form expands into a pair of definitions: a syntax\ndefinition of name and a variable definition of xname.\nThe transformer for name converts apparent calls to\nname into direct calls to lambda-expression.\nSince the resulting forms are merely direct lambda applications\n(the equivalent of let expressions),\nthe actual parameters are evaluated exactly once and before evaluation\nof the procedure's body, as required.\nAll other references to name are replaced with references to\nxname.\nThe definition of xname binds it to the value of\nlambda-expression.\nThis allows the procedure to be used as a first-class value.\nBecause xname is introduced by the transformer, the binding for\nxname is not visible anywhere except where references to it\nare introduced by the transformer for name.\n\n" "\nWithin lambda-expression, wherever it appears, name\nis rebound to a transformer that expands all references into references\nto xname.\nThe use of fluid-let-syntax\nfor this purpose prevents indefinite\nexpansion from indirect recursion among integrable procedures.\nThis allows the procedure to be recursive without causing indefinite\nexpansion.\nNothing special is done by define-integrable to maintain lexical\nscoping, since lexical scoping is maintained automatically by the\nexpander.\n\n" "\nChez Scheme integrates locally defined procedures automatically when it is\nappropriate to do so.\nIt cannot integrate procedures defined at top-level,\nhowever, since code that assigns top-level variables can be introduced\ninto the system (via eval or load) at any time.\ndefine-integrable can be used to force the integration of\nprocedures bound at top-level, even if the integration of locally bound\nprocedures is left to the compiler.\nIt can also be used to force the integration of large procedures that\nthe compiler would not normally integrate.\n(The expand/optimize procedure is useful for determining when\nintegration does or does not take place.)\n\n") ("syntax:s4" "\n\n\nsyntax: (syntax-rules (literal ...) clause ...)\n\nreturns: a transformer\n\nlibraries: (chezscheme)\n\n" "Each literal must be an identifier other than\nan underscore ( _ ) or ellipsis ( ... ).\nEach clause must take the form below.\n\n" "\n\n" "(pattern template)\n\n(pattern fender template)\n" "The first form is the only form supported by the Revised6 Report.\n\n\n") ("syntax:s6" "\n\n\nprocedure: (syntax->list syntax-object)\n\nreturns: a list of syntax objects\n\nlibraries: (chezscheme)\n\n" "This procedure takes a syntax object representing\na list-structured form and returns a list of syntax objects, each representing\nthe corresponding subform of the input form.\n\n\n" "\nsyntax->list may be defined as follows.\n\n" "\n\n" "(define syntax->list\n\n  (lambda (ls)\n\n    (syntax-case ls ()\n\n      [() '()]\n\n      [(x . r) (cons #'x (syntax->list #'r))])))\n\n\n#'(a b c) --> #<syntax (a b c)>\n\n(syntax->list #'(a b c)) --> (#<syntax a> #<syntax b> #<syntax c>)\n" "syntax->list is not required for list structures constructed\nfrom individual pattern variable values or sequences of pattern-variable\nvalues, since such structures are already lists.\nFor example:\n\n" "\n\n" "(list? (with-syntax ([x #'a] [y #'b] [z #'c]) #'(x y z)))) --> #t\n\n(list? (with-syntax ([(x ...) #'(a b c)]) #'(x ...))) --> #t\n") ("syntax:s7" "\n\nprocedure: (syntax->vector syntax-object)\n\nreturns: a vector of syntax objects\n\nlibraries: (chezscheme)\n\n" "This procedure takes a syntax object representing\na vector-structured form and returns a vector of syntax objects, each representing\nthe corresponding subform of the input form.\n\n\n" "\nsyntax->vector may be defined as follows.\n\n" "\n\n" "(define syntax->vector\n\n  (lambda (v)\n\n    (syntax-case v ()\n\n      [#(x ...) (apply vector (syntax->list #'(x ...)))])))\n\n\n#'#(a b c) --> #<syntax #(a b c)>\n\n(syntax->vector #'#(a b c)) --> #(#<syntax a> #<syntax b> #<syntax c>)\n" "syntax->vector is not required for vector structures constructed\nfrom individual pattern variable values or sequences of pattern-variable\nvalues, since such structures are already vectors.\nFor example:\n\n" "\n\n" "(vector? (with-syntax ([x #'a] [y #'b] [z #'c]) #'#(x y z)))) --> #t\n\n(vector? (with-syntax ([(x ...) #'(a b c)]) #'#(x ...))) --> #t\n") ("syntax:s8" "\n\nprocedure: (syntax-object->datum obj)\n\nreturns: obj stripped of syntactic information\n\nlibraries: (chezscheme)\n\n" "syntax-object->datum is identical to the Revised6 Report\nsyntax->datum.\n\n\n") ("syntax:s9" "\n\n\nsyntax: (datum template)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "(datum template) is a convenient shorthand syntax for\n\n" "\n\n" "(syntax->datum (syntax template))\n" "datum may be defined simply as follows.\n\n" "\n\n" "(define-syntax datum\n\n  (syntax-rules ()\n\n    [(_ t) (syntax->datum #'t)]))\n\n\n(with-syntax ((a #'(a b c))) (datum a)) --> (a b c)\n") ("syntax:s10" "\n\nprocedure: (datum->syntax-object template-identifier obj)\n\nreturns: a syntax object\n\nlibraries: (chezscheme)\n\n" "datum->syntax-object is identical to the Revised6 Report\ndatum->syntax.\n\n") ("syntax:s11" "\n\n\nsyntax: (with-implicit (id0 id1 ...) body1 body2 ...)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "This form abstracts over the common usage of datum->syntax\nfor creating implicit identifiers (see above).\nThe form\n\n" "\n\n" "(with-implicit (id0 id1 ...)\n\n  body1 body2 ...)\n" "is equivalent to\n\n" "\n\n" "(with-syntax ([id1 (datum->syntax #'id0 'id1)] ...)\n\n  body1 body2 ...)\n" "with-implicit can be defined simply as follows.\n\n" "\n\n" "(define-syntax with-implicit\n\n  (syntax-rules ()\n\n    [(_ (tid id ...) b1 b2 ...)\n\n     (with-syntax ([id (datum->syntax #'tid 'id)] ...)\n\n       b1 b2 ...)]))\n" "We can use with-implicit to simplify the (correct version of)\nloop above.\n\n" "\n\n" "(define-syntax loop\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(k e ...)\n\n       (with-implicit (k break)\n\n         #'(call-with-current-continuation\n\n             (lambda (break)\n\n               (let f () e ... (f)))))])))\n") ("syntax:s12" "\n\nsyntax: (include path)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\ninclude expands into a begin expression containing\nthe forms found in the file named by path.\nFor example, if the file f-def.ss contains\n(define f (lambda () x)), the expression\n\n" "\n\n" "(let ([x \"okay\"])\n\n  (include \"f-def.ss\")\n\n  (f))\n" "evaluates to \"okay\".\nAn include form is treated as a definition if it appears within a\nsequence of definitions and the forms on the file named by\npath are all definitions, as in the above example.\nIf the file contains expressions instead, the include form is\ntreated as an expression.\n\n" "\ninclude may be defined portably as follows, although\nChez Scheme uses an implementation-dependent definition that allows\nit to capture and maintain source information for included code.\n\n" "\n\n" "(define-syntax include\n\n  (lambda (x)\n\n    (define read-file\n\n      (lambda (fn k)\n\n        (let ([p (open-input-file fn)])\n\n          (let f ([x (read p)])\n\n            (if (eof-object? x)\n\n                (begin (close-input-port p) '())\n\n                (cons (datum->syntax k x)\n\n                      (f (read p))))))))\n\n    (syntax-case x ()\n\n      [(k filename)\n\n       (let ([fn (datum filename)])\n\n         (with-syntax ([(exp ...) (read-file fn #'k)])\n\n           #'(begin exp ...)))])))\n" "The definition of include uses datum->syntax to convert\nthe objects read from the file into syntax objects in the proper\nlexical context, so that identifier references and definitions within\nthose expressions are scoped where the include form appears.\n\n" "\nIn Chez Scheme's implementation of include,\nthe parameter source-directories (Section 12.5)\ndetermines the set of directories searched for source files not identified\nby absolute path names.\n\n\n") ("syntax:s13" "\ndesc:syntax-error\n\n\nprocedure: (syntax-error obj string ...)\n\nreturns: does not return\n\nlibraries: (chezscheme)\n\n" "Syntax errors may be reported with syntax-error, which produces\na message by concatenating string ... and a printed\nrepresentation of obj.\nIf no string arguments are provided, the string \"invalid syntax\"\nis used instead.\nWhen obj is a syntax object, the syntax-object wrapper is\nstripped (as with syntax->datum) before the printed representation\nis created.\nIf source file information is present in the syntax-object wrapper,\nsyntax-error incorporates this information into the error\nmessage.\n\n" "\nsyntax-case and syntax-rules call syntax-error\nautomatically if the input fails to match one of the clauses.\n\n" "\nWe can use syntax-error to precisely report the cause\nof the errors detected in the following definition of\n(unnamed) let.\n\n" "\n\n" "(define-syntax let\n\n  (lambda (x)\n\n    (define check-ids!\n\n      (lambda (ls)\n\n        (unless (null? ls)\n\n          (unless (identifier? (car ls))\n\n            (syntax-error (car ls) \"let cannot bind non-identifier\"))\n\n          (check-ids! (cdr ls)))))\n\n    (define check-unique!\n\n      (lambda (ls)\n\n        (unless (null? ls)\n\n          (let ([x (car ls)])\n\n            (when (let mem? ([ls (cdr ls)])\n\n                    (and (not (null? ls))\n\n                         (or (bound-identifier=? x (car ls))\n\n                             (mem? (cdr ls)))))\n\n              (syntax-error x \"let cannot bind two occurrences of\")))\n\n          (check-unique! (cdr ls)))))\n\n    (syntax-case x ()\n\n      [(_ ((i e) ...) b1 b2 ...)\n\n       (begin\n\n         (check-ids! #'(i ...))\n\n         (check-unique! #'(i ...))\n\n         #'((lambda (i ...) b1 b2 ...) e ...))])))\n" "With this change, the expression\n\n" "\n\n" "(let ([a 3] [a 4]) (+ a a))\n" "produces the error message \"let cannot bind two occurrences of a.\"\n\n") ("syntax:s14" "\n\n\nprocedure: (literal-identifier=? identifier1 identifier2)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "This procedure is identical to the Revised6 Report\nfree-identifier=?, and is provided for backward\ncompatibility only.\n\n") ("syntax:s15" "\n\n\nprocedure: (make-compile-time-value obj)\n\nreturns: a compile-time value\n\nlibraries: (chezscheme)\n\n" "A compile time value is a kind of transformer with which a keyword may\nbe associated by any of the keyword binding constructs, e.g., define-syntax\nor let-syntax.\nThe transformer encapsulates the supplied obj.\nThe encapsulated object may be retrieved as described above.\n\n" "\nThe following example illustrates how this feature might be used to define\na simple syntactic record-definition mechanism where the record type descriptor\nis generated at expansion time.\n\n" "\n\n" "(define-syntax drt\n\n  (lambda (x)\n\n    (define construct-name\n\n      (lambda (template-identifier . args)\n\n        (datum->syntax template-identifier\n\n          (string->symbol\n\n            (apply string-append\n\n              (map (lambda (x)\n\n                     (if (string? x)\n\n                         x\n\n                         (symbol->string (syntax->datum x))))\n\n                   args))))))\n\n    (define do-drt\n\n      (lambda (rname fname* prtd)\n\n        (with-syntax ([rname rname]\n\n                      [rtd (make-record-type-descriptor\n\n                             (syntax->datum rname) prtd #f #f #f\n\n                             (list->vector\n\n                               (map (lambda (fname)\n\n                                      `(immutable ,(syntax->datum fname)))\n\n                                    fname*)))]\n\n                      [make-rname (construct-name rname \"make-\" rname)]\n\n                      [rname? (construct-name rname rname \"?\")]\n\n                      [(rname-fname ...)\n\n                       (map (lambda (fname)\n\n                              (construct-name fname rname \"-\" fname))\n\n                            fname*)]\n\n                      [(i ...) (enumerate fname*)])\n\n          #'(begin\n\n              (define-syntax rname (make-compile-time-value 'rtd))\n\n              (define rcd (make-record-constructor-descriptor 'rtd #f #f))\n\n              (define make-rname (record-constructor rcd))\n\n              (define rname? (record-predicate 'rtd))\n\n              (define rname-fname (record-accessor 'rtd i))\n\n              ...))))\n\n    (syntax-case x (parent)\n\n      [(_ rname (fname ...))\n\n       (for-all identifier? #'(rname fname ...))\n\n       (do-drt #'rname #'(fname ...) #f)]\n\n      [(_ rname pname (fname ...))\n\n       (for-all identifier? #'(rname pname fname ...))\n\n       (lambda (lookup)\n\n         (let ([prtd (lookup #'pname)])\n\n           (unless (record-type-descriptor? prtd)\n\n             (syntax-error #'pname \"unrecognized parent record type\"))\n\n           (do-drt #'rname #'(fname ...) prtd)))])))\n" "\n" "(drt prec (x y))\n\n(drt crec prec (z))\n\n(define r (make-crec 1 2 3))\n\n(prec? r) --> #t\n\n(prec-x r) --> 1\n\n(crec-z r) --> 3\n\nprec --> exception: invalid syntax prec\n") ("syntax:s16" "\n\nprocedure: (compile-time-value? obj)\n\nreturns: #t if obj is a compile-time value; #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "(define-syntax x (make-compile-time-value \"eggs\"))\n\n(compile-time-value? (top-level-syntax 'x)) --> #t\n") ("syntax:s17" "\n\nprocedure: (compile-time-value-value ctv)\n\nreturns: the value of a compile-time value\n\nlibraries: (chezscheme)\n\n" "\n" "(define-syntax x (make-compile-time-value \"eggs\"))\n\n(compile-time-value-value (top-level-syntax 'x)) --> \"eggs\"\n") ("syntax:s18" "\n\nsyntax: (define-property id key expr)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "A define-property form attaches a property to an\nexisting identifier binding without disturbing the existing meaning\nof the identifier in the scope of that binding.\nIt is typically used by one macro to record information about a binding\nfor use by another macro.\nBoth id and key must be identifiers.\nThe expression expr is evaluated when the define-property\nform is expanded, and a new property associating key with the\nvalue of expr is attached to the existing binding of\nid, which must have a visible local or top-level binding.\n\n" "\ndefine-property is a definition and can appear anywhere\nother definitions can appear.\nThe scope of a property introduced by define-property is the\nentire body in which the define-property form appears or global\nif it appears at top level, except\nwhere it is replaced by a property for the same id and\nkey or where the binding to which it is attached is shadowed.\nAny number of properties can be attached to the same binding with\ndifferent keys.\nAttaching a new property with the same name as an property already\nattached to a binding shadows the existing property with the new\nproperty.\n\n" "\nThe following example defines a macro, get-info, that retrieves\nthe info property of a binding, defines the variable x,\nattaches an info property to the binding of x, retrieves\nthe property via get-info, references x to show that\nits normal binding is still intact, and uses get-info again\nwithin the scope of a different binding of x to show that the\nproperties are shadowed as well as the outer binding of x.\n\n" "\n\n" "(define info)\n\n(define-syntax get-info\n\n  (lambda (x)\n\n    (lambda (lookup)\n\n      (syntax-case x ()\n\n        [(_ q)\n\n         (let ([info-value (lookup #'q #'info)])\n\n           #`'#,(datum->syntax #'* info-value))]))))\n\n(define x \"x-value\")\n\n(define-property x info \"x-info\")\n\n(get-info x) --> \"x-info\"\n\nx --> \"x-value\"\n\n(let ([x \"inner-x-value\"]) (get-info x)) --> #f\n" "For debugging, it is often useful to have a form that retrieves\nan arbitrary property, given an identifier and a key.\nThe get-property macro below does\njust that.\n\n" "\n\n" "(define-syntax get-property\n\n  (lambda (x)\n\n    (lambda (r)\n\n      (syntax-case x ()\n\n        [(_ id key)\n\n         #`'#,(datum->syntax #'* (r #'id #'key))]))))\n\n(get-property x info) --> \"x-info\"\n" "The bindings for both identifiers must be visible where\nget-property is used.\n\n" "\nThe version of drt defined below is like the one defined using\nmake-compile-time-value above, except that it defines the\nrecord name as a macro that raises an exception with a more descriptive\nmessage, while attaching the record type descriptor to the binding as a\nseparate property.\nThe variable drt-key defined along with drt is used\nonly as the key for the property that drt attaches to a record\nname.\nBoth drt-key and drt are defined within a module that\nexports only the latter, ensuring that the properties used by drt\ncannot be accessed or forged.\n\n" "\n\n" "(library (drt) (export drt) (import (chezscheme))\n\n  (define drt-key)\n\n  (define-syntax drt\n\n    (lambda (x)\n\n      (define construct-name\n\n        (lambda (template-identifier . args)\n\n          (datum->syntax template-identifier\n\n            (string->symbol\n\n              (apply string-append\n\n                (map (lambda (x)\n\n                       (if (string? x)\n\n                           x\n\n                           (symbol->string (syntax->datum x))))\n\n                     args))))))\n\n      (define do-drt\n\n        (lambda (rname fname* prtd)\n\n          (with-syntax ([rname rname]\n\n                        [rtd (make-record-type-descriptor\n\n                               (syntax->datum rname) prtd #f #f #f\n\n                               (list->vector\n\n                                 (map (lambda (fname)\n\n                                        `(immutable ,(syntax->datum fname)))\n\n                                      fname*)))]\n\n                        [make-rname (construct-name rname \"make-\" rname)]\n\n                        [rname? (construct-name rname rname \"?\")]\n\n                        [(rname-fname ...)\n\n                         (map (lambda (fname)\n\n                                (construct-name fname rname \"-\" fname))\n\n                              fname*)]\n\n                        [(i ...) (enumerate fname*)])\n\n            #'(begin\n\n                (define-syntax rname\n\n                  (lambda (x)\n\n                    (syntax-error x \"invalid use of record name\")))\n\n                (define rcd (make-record-constructor-descriptor 'rtd #f #f))\n\n                (define-property rname drt-key 'rtd)\n\n                (define make-rname (record-constructor rcd))\n\n                (define rname? (record-predicate 'rtd))\n\n                (define rname-fname (record-accessor 'rtd i))\n\n                ...))))\n\n      (syntax-case x (parent)\n\n        [(_ rname (fname ...))\n\n         (for-all identifier? #'(rname fname ...))\n\n         (do-drt #'rname #'(fname ...) #f)]\n\n        [(_ rname pname (fname ...))\n\n         (for-all identifier? #'(rname pname fname ...))\n\n         (lambda (lookup)\n\n           (let ([prtd (lookup #'pname #'drt-key)])\n\n             (unless prtd\n\n               (syntax-error #'pname \"unrecognized parent record type\"))\n\n             (do-drt #'rname #'(fname ...) prtd)))]))))\n" "\n" "(import (drt))\n\n(drt prec (x y))\n\n(drt crec prec (z))\n\n(define r (make-crec 1 2 3))\n\n(prec? r) --> #t\n\n(prec-x r) --> 1\n\n(crec-z r) --> 3\n\nprec --> exception: invalid use of record name prec\n") ("syntax:s21" "\n\n\nsyntax: (module name interface defn ... init ...)\n\n\nsyntax: (module interface defn ... init ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "name is an identifier, defn ...\nare definitions, and init ... are expressions.\ninterface is a list of exports (export ...),\nwhere each export is either an identifier identifier\nor of the form (identifier export ...).\n\n" "\nThe first syntax for module establishes a named scope that\nencapsulates a set of identifier bindings.\nThe exported bindings may be made visible via import or\nimport-only (Section 10.4)\nanywhere the module name is visible.\nThe second syntax for module introduces an anonymous module\nwhose bindings are implicitly imported (as if by import of a\nhidden module name) where the module form appears.\n\n" "\nA module consists of a (possibly empty) set of\ndefinitions and a (possibly empty) sequence of initialization expressions.\nThe identifiers defined within a module are visible within the body\nof the module and, if exported, within the scope of an import for the\nmodule.\nEach identifier listed in a module's interface must be defined within\nor imported into that module.\nA module form is a definition and can appear anywhere other\ndefinitions can appear, including\nat the top level of a program, nested within the bodies of\nlambda expressions, nested within library and\ntop-level program forms, and nested within other modules.\nAlso, because module names are scoped like other identifiers,\nmodules and libraries may export module names as well as variables and keywords.\n\n" "\nWhen an interface contains an export of the form\n(identifier export ...), only identifier is\nvisible in the importing context.\nThe identifiers within export ... are\nindirect imports, as if declared via an\nindirect-export form (Section 10.4).\n\n" "\nModule names occupy the same namespace as other identifiers and follow\nthe same scoping rules.\nUnless exported, identifiers defined within a module are visible only\nwithin that module.\n\n" "\nExpressions within a module can reference identifiers bound outside of\nthe module.\n\n" "\n\n" "(let ([x 3])\n\n  (module m (plusx)\n\n    (define plusx (lambda (y) (+ x y))))\n\n  (import m)\n\n  (let ([x 4])\n\n    (plusx 5))) --> 8\n" "Similarly, import does not prevent access to identifiers that\nare visible where the import form appears, except for those variables\nshadowed by the imported identifiers.\n\n" "\n\n" "(module m (y) (define y 'm-y))\n\n(let ([x 'local-x] [y 'local-y])\n\n  (import m)\n\n  (list x y)) --> (local-x m-y)\n" "On the other hand, use of import-only within a module\nestablishes an isolated scope in\nwhich the only visible identifiers are those exported by the\nimported module.\n\n" "\n\n" "(module m (y) (define y 'm-y))\n\n(let ([x 'local-x] [y 'local-y])\n\n  (import-only m)\n\n  x) --> Error: x is not visible\n" "This is sometimes desirable for static verification that no\nidentifiers are used except those explicitly imported into a\nmodule or local scope.\n\n" "\nUnless a module imported via import-only exports\nimport or\nimport-only and the name of at least one module, subsequent\nimports within the scope of the import-only form are not\npossible.\nTo create an isolated scope containing the exports of more than one\nmodule without making import or import-only\nvisible, all of the modules to be imported must be listed in the\nsame import-only form.\n\n" "\nAnother solution is to create a single module that contains\nthe exports of each of the other modules.\n\n" "\n\n" "(module m2 (y) (define y 'y))\n\n(module m1 (x) (define x 'x))\n\n(module mega-module (cons x y)\n\n  (import m1)\n\n  (import m2)\n\n  (import scheme))\n\n(let ([y 3])\n\n  (import-only mega-module)\n\n  (cons x y)) --> (x . y)\n" "" "Before it is compiled, a source program is translated into\na core language program containing no syntactic abstractions, syntactic\ndefinitions, library definitions, module definitions, or import forms.\nTranslation is performed by a syntax expander that\nprocesses the forms in the source program via recursive descent.\n\n" "\nA define-syntax form associates a keyword\nwith a transformer in a translation-time environment.\nWhen the expander encounters a keyword, it invokes the\nassociated transformer and reprocesses the resulting form.\nA module form associates a module name with an interface.\nWhen the expander encounters an import form, it extracts the\ncorresponding module interface from the translation-time environment and makes\nthe exported bindings visible in the scope where the import form\nappears.\n\n" "\nInternal definitions and definitions within a module\nbody are processed from left to right so that a module's definition\nand import may appear within the same sequence of definitions.\nExpressions appearing within a body and the right-hand sides of variable\ndefinitions, however, are translated\nonly after the entire set of definitions has been processed, allowing\nfull mutual recursion among variable and syntactic definitions.\n\n" "\nModule and import forms affect only the visibility of identifiers in\nthe source program, not their meanings.\nIn particular, variables are bound to locations whether defined within or\noutside of a module, and import does not introduce new locations.\nLocal variables are renamed as necessary to preserve the scoping\nrelationships established by both modules and syntactic abstractions.\nThus, the expression:\n\n" "\n\n" "(let ([x 1])\n\n  (module m (x setter)\n\n    (define-syntax x (identifier-syntax z))\n\n    (define setter (lambda (x) (set! z x)))\n\n    (define z 5))\n\n  (let ([y x] [z 0])\n\n    (import m)\n\n    (setter 3)\n\n    (+ x y z))) --> 4\n" "is equivalent to the following program\nin which identifiers have been consistently renamed as indicated by\nsubscripts.\n\n" "\n\n" "(let ([x0 1])\n\n  (define-syntax x1 (identifier-syntax z1))\n\n  (define setter1 (lambda (x2) (set! z1 x2)))\n\n  (define z1 5)\n\n  (let ([y3 x0] [z3 0])\n\n    (setter1 3)\n\n    (+ x1 y3 z3)))\n" "Definitions within a top-level begin, lambda, top-level program,\nlibrary, or module body\nare processed from left to right by the expander at expand time, and the\nvariable definitions are evaluated from left-to-right at run time.\nInitialization expressions appearing within a module body\nare evaluated in sequence after the evaluation of the variable\ndefinitions.\n\n" "\nMutually recursive modules can be defined in several ways.\nIn the following program, a and b are mutually recursive\nmodules exported by an anonymous module whose local scope is used to\nstatically link the two.\nFor example,\nthe free variable y within module a refers to\nthe binding for y, provided by importing b,\nin the enclosing module.\n\n" "\n\n" "(module (a b)\n\n  (module a (x) (define x (lambda () y)))\n\n  (module b (y) (define y (lambda () x)))\n\n  (import a)\n\n  (import b))\n" "The following syntactic abstraction generalizes this pattern to\npermit the definition of multiple mutually recursive modules.\n\n" "\n\n" "(define-syntax rec-modules\n\n  (syntax-rules (module)\n\n    [(_ (module m (id ...) form ...) ...)\n\n     (module (m ...)\n\n       (module m (id ...) form ...) ...\n\n       (import m) ...)]))\n" "Because a module can re-export imported bindings,\nit is quite easy to provide multiple views on a single\nmodule, as s and t provide for r\nbelow, or to combine several modules into a compound,\nas r does.\n\n" "\n\n" "(module p (x y)\n\n  (define x 1) (define y 2))\n\n(module q (y z)\n\n  (define y 3) (define z 4))\n\n(module r (a b c d)\n\n  (import* p (a x) (b y))\n\n  (import* q (c y) (d z)))\n\n(module s (a c) (import r))\n\n(module t (b d) (import r))\n" "To allow interfaces to be separated from implementations,\nthe following syntactic abstractions support the definition and use of\nnamed interfaces.\n\n" "\n\n" "(define-syntax define-interface\n\n  (syntax-rules ()\n\n    [(_ name (export ...))\n\n     (define-syntax name\n\n       (lambda (x)\n\n         (syntax-case x ()\n\n           [(_ n defs)\n\n            (with-implicit (n export ...)\n\n              #'(module n (export ...) .\n\n                  defs))])))]))\n\n\n(define-syntax define-module\n\n  (syntax-rules ()\n\n    [(_ name interface defn ...)\n\n     (interface name (defn ...))]))\n" "define-interface creates an interface macro that, given a module\nname and a list of definitions, expands into a module definition with\na concrete interface.\n\n" "\nwith-implicit is used to ensure that the introduced\nexport identifiers are visible in the same scope as the name of\nthe module in the define-module form.\n\n" "\ndefine-interface and define-module can be used as\nfollows.\n\n" "\n\n" "(define-interface simple (a b))\n\n(define-module m simple\n\n  (define-syntax a (identifier-syntax 1))\n\n  (define b (lambda () c))\n\n  (define c 2))\n\n(let () (import m) (+ a (b))) --> 3\n" "The abstract module facility defined below allows a module interface to\nbe satisfied incrementally when module forms are evaluated.\nThis permits flexibility in the separation between the interface and\nimplementation, supports separate compilation of mutually recursive\nmodules, and permits redefinition of module implementations.\n\n" "\n\n" "(define-syntax abstract-module\n\n  (syntax-rules ()\n\n    [(_ name (ex ...) (kwd ...) defn ...)\n\n     (module name (ex ... kwd ...)\n\n       (declare ex) ...\n\n       defn ...)]))\n\n\n(define-syntax implement\n\n  (syntax-rules ()\n\n    [(_ name form ...)\n\n     (module () (import name) form ...)]))\n" "Within an abstract-module form,\neach of the exports in the list ex ... must be\nvariables.\nThe values of these variables are supplied by one or more separate\nimplement forms.\nSince keyword bindings must be present at compile time,\nthey cannot be satisfied incrementally and are instead listed as\nseparate exports and defined within the abstract module.\n\n" "\nWithin an implement form,\nthe sequence of forms form ... is a sequence of\nzero or more definitions followed by a sequence of zero or more\nexpressions.\nSince the module used in the expansion of implement does\nnot export anything, the definitions are all local to the\nimplement form.\nThe expressions may be arbitrary expressions, but should include\none satisfy form for each variable whose definition is\nsupplied by the implement form.\nA satisfy form has the syntax\n\n" "\n\n" "(satisfy variable expr)\n" "declare and satisfy may simply be the equivalents of\ndefine and set!.\n\n" "\n\n" "(define-syntax declare (identifier-syntax define))\n\n(define-syntax satisfy (identifier-syntax set!))\n" "Alternatively, declare can initialize the declared variable to\nthe value of a flag known only to declare and satisfy,\nand satisfy can verify that this flag is still present to insure\nthat only one attempt to satisfy the value of a given identifier is\nmade.\n\n" "\n\n" "(module ((declare cookie) (satisfy cookie))\n\n  (define cookie \"chocolate chip\")\n\n  (define-syntax declare\n\n    (syntax-rules () [(_ var) (define var cookie)]))\n\n  (define-syntax satisfy\n\n    (syntax-rules ()\n\n      [(_ var exp)\n\n       (if (eq? var cookie)\n\n           (set! var exp)\n\n           (assertion-violationf 'satisfy\n\n             \"value of variable ~s has already been satisfied\"\n\n             'var))])))\n" "Using abstract-module and implement, we can define\nmutually recursive and separately compilable modules as follows.\n\n" "\n\n" "(abstract-module e (even?) (pred)\n\n  (define-syntax pred\n\n    (syntax-rules () [(_ exp) (- exp 1)])))\n\n\n(abstract-module o (odd?) ())\n\n\n(implement e\n\n  (import o)\n\n  (satisfy even?\n\n    (lambda (x)\n\n      (or (zero? x) (odd? (pred x))))))\n\n\n(implement o\n\n  (import e)\n\n  (satisfy odd?\n\n    (lambda (x) (not (even? x)))))\n\n\n(let () (import-only e) (even? 38)) --> #t\n") ("syntax:s22" "\n\nsyntax: only\n\n\nsyntax: except\n\n\nsyntax: add-prefix\n\n\nsyntax: drop-prefix\n\n\nsyntax: rename\n\n\nsyntax: alias\n\nlibraries: (chezscheme)\n\n" "These identifiers are auxiliary keywords for import\nand import-only.\nIt is a syntax violation to reference these identifiers except in\ncontexts where they are recognized as auxiliary keywords.\n\n") ("syntax:s28" "\n\n\nmodule: scheme\n\nlibraries: (chezscheme)\n\n" "scheme contains all user-visible top-level bindings\n(variables, keywords, and module names) built into Chez Scheme.\n\n") ("syntax:s29" "\n\n\nmodule: r5rs\n\nlibraries: (chezscheme)\n\n" "r5rs contains all top-level bindings\n(variables and keywords) defined in the\nRevised5 Report on Scheme.\nThe bindings exported from r5rs are precisely those that are\navailable within an expression evaluated via eval with the\nenvironment specifier returned by\nscheme-report-environment.\n\n") ("syntax:s31" "\n\n\nmodule: r5rs-syntax\n\nlibraries: (chezscheme)\n\n" "r5rs-syntax contains all top-level keyword bindings\ndefined in the Revised5 Report on Scheme.\nThe bindings exported from r5rs-syntax are precisely those that are\navailable within an expression evaluated via eval with the\nenvironment specifier returned by\nnull-environment.\n\n") ("syntax:s33" "\n\n\nmodule: ieee\n\nlibraries: (chezscheme)\n\n" "ieee contains all top-level bindings\n(variables and keywords) defined in the\nANSI/IEEE standard for Scheme.\nThe bindings exported from ieee are precisely those that are\navailable within an expression evaluated via eval with the\nenvironment specifier returned by\nieee-environment.\n\n\n") ("syntax:s35" "\n\n\nmodule: $system\n\nlibraries: (chezscheme)\n\n" "$system contains all user-visible top-level bindings built\ninto Chez Scheme along with various undocumented system bindings.\n\n\n") ("syntax:s36" "\n\n\nsyntax: (meta . definition)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "The meta keyword is actually a prefix that can be placed in\nfront of any definition keyword, e.g.,\n\n" "\n\n" "(meta define x 3)\n" "It tells the expander that any variable definition resulting\nfrom the definition is to be an expand-time definition available only\nto the right-hand sides of other meta definitions and, most importantly,\ntransformer expressions.\nIt is used to define expand-time helpers and other information for use\nby one or more syntax-case transformers.\n\n\n" "\n\n" "(module M (helper1 a b)\n\n  (meta define helper1\n\n    (lambda (---)\n\n      ---))\n\n  (meta define helper2\n\n    (lambda (---)\n\n      --- (helper2 ---) ---))\n\n  (define-syntax a\n\n    (lambda (x)\n\n      --- (helper1 ---) ---))\n\n  (define-syntax b\n\n    (lambda (x)\n\n      --- (helper1 ---) ---\n\n      --- (helper2 ---) ---)))\n" "The right-hand-side expressions of a syntax definition or meta definition\ncan refer only to identifiers whose values are already available in the\ncompile-time environment.\nBecause of the left-to-right expansion order for library,\nmodule, lambda, and similar bodies, this implies a\nsemantics similar to let* for a sequence of meta definitions,\nin which each right-hand side can refer only to the variables defined\nearlier in the sequence.\nAn exception is that the right-hand side of a meta definition can refer\nto its own name as long as the reference is not evaluated until after\nthe value of the expression has been computed.\nThis permits meta definitions to be self-recursive but not mutually\nrecursive.\nThe right-hand side of a meta definition can, however, build syntax\nobjects containing occurrences of any identifiers defined in the body\nin which the meta definition appears.\n\n" "\nMeta definitions propagate through macro expansion, so one can write,\nfor example:\n\n" "\n\n" "(module (a)\n\n  (meta define-record foo (x))\n\n  (define-syntax a\n\n    (let ([q (make-foo #''q)])\n\n      (lambda (x) (foo-x q)))))\n\na --> q\n" "where define-record is a macro that expands into a set of defines.\n\n" "\nIt is also sometimes convenient to write\n\n" "\n\n" "(meta begin defn ...)\n" "or\n\n" "\n\n" "(meta module {exports} defn ...)\n" "or\n\n" "\n\n" "(meta include \"path\")\n" "to create groups of meta bindings.\n\n") ("syntax:s37" "\n\n\nsyntax: (meta-cond clause1 clause2 ...)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "Each clause but the last must take the form:\n\n" "\n\n" "(test expr1 expr2 ...)\n" "The last may take the same form or be an else clause of the form:\n\n" "\n\n" "(else expr1 expr2 ...)\n" "During expansion, the test expressions are evaluated in order until\none evaluates to a true value or until all of the tests have been\nevaluated.\nIf a test evaluates to a true value, the meta-cond form\nexpands to a begin form containing the corresponding\nexpressions expr1 expr2 ....\nIf no test evaluates to a true value and an else clause\nis present, the meta-cond form expands to a begin form\ncontaining the expressions expr1 expr2 ... from\nthe else clause.\nOtherwise the meta-cond expression expands into a call to\nthe void procedure.\n\n" "\nmeta-cond might be defined as follows.\n\n" "\n\n" "(define-syntax meta-cond\n\n  (syntax-rules ()\n\n    [(_ [a0 a1 a2 ...] [b0 b1 b2 ...] ...)\n\n     (let-syntax ([expr (cond\n\n                          [a0 (identifier-syntax (begin a1 a2 ...))]\n\n                          [b0 (identifier-syntax (begin b1 b2 ...))]\n\n                          ...)])\n\n       expr)]))\n" "meta-cond is used to choose, at expansion time, from among a\nset of possible forms.\nFor example, one might have safe (error-checking) and unsafe\n(non-error-checking) versions of a procedure and decide which to\ncall based on the compile-time optimization level, as shown\nbelow.\n\n" "\n\n" "(meta-cond\n\n  [(= (optimize-level) 3) (unsafe-frob x)]\n\n  [else (safe-frob x)])\n") ("syntax:s38" "\n\n\nsyntax: (alias id1 id2)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "alias is a definition and can appear anywhere\nother definitions can appear.\nIt is used to transfer the binding from one identifier to\nanother.\n\n" "\n\n" "(let ([x 3]) (alias y x) (set! y 4) (list x y)) --> (4 4)\n\n\n(module lisp (if)\n\n  (module (scheme:if)\n\n    (import scheme)\n\n    (alias scheme:if if))\n\n  (define-syntax if\n\n    (syntax-rules ()\n\n      [(_ e_1 e_2 e_3)\n\n       (scheme:if (not (memq e_1 '(#f ()))) e_2 e_3)])))\n\n(define (length ls)\n\n  (import lisp)\n\n  (if ls (+ (length (cdr ls)) 1) 0))\n\n(length '(a b c)) --> 3\n" "Because of left-to-right expansion order, aliases should appear after\nthe definition of the right-hand-side identifier, e.g.:\n\n" "\n\n" "(let ()\n\n  (import-only (chezscheme))\n\n  (define y 3)\n\n  (alias x y)\n\n  x) --> 3\n" "rather than:\n\n" "\n\n" "(let ()\n\n  (import-only (chezscheme))\n\n  (alias x y)\n\n  (define y 3)\n\n  x) --> exception: unbound identifier\n") ("syntax:s49" "\n\n\nprocedure: (make-annotation obj source-object stripped-obj)\n\n\nprocedure: (make-annotation obj source-object stripped-obj options)\n\nreturns: an annotation\n\nlibraries: (chezscheme)\n\n" "The annotation is formed with obj as its expression component,\nsource-object as its source-object component, and stripped-obj\nas its stripped component.\nobj should represent an expression, possibly with embedded\nannotations.\nstripped-obj should be a stripped version of obj, i.e.,\nequivalent to obj with each annotation replaced by its\nexpression component.\noptions, if present must be an enumeration set over\nthe symbols debug and profile, and defaults to an\nenumeration set containing both debug and profile.\nAnnotations marked debug are used for compile-time error\nreporting and run-time error reporting and inspection; annotations\nmarked profile are used for profiling.\n\n") ("syntax:s50" "\n\n\nprocedure: (annotation? obj)\n\nreturns: #t if obj is an annotation, otherwise #f\n\nlibraries: (chezscheme)\n\n") ("syntax:s51" "\n\nprocedure: (annotation-expression annotation)\n\nreturns: the expression component of annotation\n\nlibraries: (chezscheme)\n\n") ("syntax:s52" "\n\nprocedure: (annotation-source annotation)\n\nreturns: the source-object component of annotation\n\nlibraries: (chezscheme)\n\n") ("syntax:s53" "\n\nprocedure: (annotation-stripped annotation)\n\nreturns: the stripped component of annotation\n\nlibraries: (chezscheme)\n\n") ("syntax:s54" "\n\nprocedure: (annotation-options annotation)\n\nreturns: the options enumeration set of annotation\n\nlibraries: (chezscheme)\n\n") ("syntax:s55" "\n\nprocedure: (make-source-object sfd bfp efp)\n\n\nprocedure: (make-source-object sfd bfp efp line column)\n\nreturns: a source object\n\nlibraries: (chezscheme)\n\n" "sfd must be a source-file descriptor.\nbfp and efp must be exact nonnegative integers, and bfp\nshould not be greater than efp.\nline and column must be exact positive integers.\n\n") ("syntax:s56" "\n\n\nprocedure: (source-object? obj)\n\nreturns: #t if obj is a source object, otherwise #f\n\nlibraries: (chezscheme)\n\n") ("syntax:s57" "\n\nprocedure: (source-object-sfd source-object)\n\nreturns: the sfd component of source-object\n\nlibraries: (chezscheme)\n\n") ("syntax:s58" "\n\nprocedure: (source-object-bfp source-object)\n\nreturns: the bfp component of source-object\n\nlibraries: (chezscheme)\n\n") ("syntax:s59" "\n\nprocedure: (source-object-efp source-object)\n\nreturns: the efp component of source-object\n\nlibraries: (chezscheme)\n\n") ("syntax:s60" "\n\nprocedure: (source-object-line source-object)\n\nreturns: the line component of source-object if present, otherwise #f\n\nlibraries: (chezscheme)\n\n") ("syntax:s61" "\n\nprocedure: (source-object-column source-object)\n\nreturns: the column component of source-object if present, otherwise #f\n\nlibraries: (chezscheme)\n\n") ("syntax:s62" "\n\nthread parameter: current-make-source-object\n\nlibraries: (chezscheme)\n\n" "current-make-source-object is used by the reader to construct\na source object for an annotation. current-make-source-object\nis initially bound to make-source-object, and the reader always\ncalls the function bound to the paramater with three arguments.\n\n" "\nAdjust this parameter to, for example, eagerly convert a position integer\nto a file-position object, instead of delaying the conversion to\nlocate-source.\n\n") ("syntax:s63" "\n\n\nprocedure: (make-source-file-descriptor string binary-input-port)\n\n\nprocedure: (make-source-file-descriptor string binary-input-port reset?)\n\nreturns: a source-file descriptor\n\nlibraries: (chezscheme)\n\n" "To compute the checksum encapsulated in the source-file descriptor,\nthis procedure must read all of the data from\nbinary-input-port.\nIf reset? is present and #t, the port is reset to its\noriginal position, as if via port-position.\nOtherwise, it is left pointing at end-of-file.\n\n") ("syntax:s64" "\n\n\nprocedure: (source-file-descriptor? obj)\n\nreturns: #t if obj is a source-file descriptor, otherwise #f\n\nlibraries: (chezscheme)\n\n") ("syntax:s65" "\n\nprocedure: (source-file-descriptor-checksum sfd)\n\nreturns: the checksum component of sfd\n\nlibraries: (chezscheme)\n\n") ("syntax:s66" "\n\nprocedure: (source-file-descriptor-path sfd)\n\nreturns: the path component of sfd\n\nlibraries: (chezscheme)\n\n" "sfd must be a source-file descriptor.\n\n") ("syntax:s67" "\n\n\nprocedure: (source-file-descriptor path checksum)\n\nreturns: a new source-file-descriptor\n\nlibraries: (chezscheme)\n\n" "path must be a string, and checksum must be an exact nonnegative integer.\nThis procedure can be used to construct custom source-file descriptors or to reconstitute\nsource-file descriptors from the path and checksum components.\n\n") ("syntax:s68" "\n\n\nsyntax: (annotation-option-set symbol ...)\n\nreturns: an annotation-options enumeration set\n\nlibraries: (chezscheme)\n\n" "Annotation-options enumeration sets may be passed to make-annotation to\ncontrol whether the annotation is used for debugging, profiling, both, or neither.\nAccordingly, each symbol must be either debug or profile.\n\n") ("syntax:s69" "\n\n\nprocedure: (syntax->annotation obj)\n\nreturns: an annotation or #f\n\nlibraries: (chezscheme)\n\n" "If obj is an annotation or syntax-object encapsulating an annotation,\nthe annotation is returned.\n\n") ("syntax:s70" "\n\n\nprocedure: (get-datum/annotations textual-input-port sfd bfp)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "sfd must be a source-file descriptor.\nbfp must be an exact nonnegative integer and should be the\ncharacter position of the next character to be read from\ntextual-input-port.\n\n" "\nThis procedure returns two values: an annotated object and an ending\nfile position.\nIn most cases, bfp should be 0 for the first call\nto get-datum/annotation at the start of a file,\nand it should be the second return value of the preceding\ncall to get-datum/annotation for each subsequent\ncall.\nThis protocol is necessary to handle files containing multiple-byte\ncharacters, since file positions do not necessarily correspond\nto character positions.\n\n") ("syntax:s71" "\n\n\nprocedure: (open-source-file sfd)\n\nreturns: a port or #f\n\nlibraries: (chezscheme)\n\n" "sfd must be a source-file descriptor.\nThis procedure attempts to locate and open the source file identified\nby sfd.\nIt returns a textual input port, positioned at the beginning of the file,\nif successful, and #f otherwise.\nIt can fail even if a file with the correct name exists in one of\nthe source directories when the file's checksum does not match the\nchecksum recorded in sfd.\n\n") ("syntax:s72" "\n\n\nprocedure: (locate-source sfd pos)\n\n\nprocedure: (locate-source sfd pos use-cache?)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "sfd must be a source-file descriptor, and pos must be an\nexact nonnegative integer.\n\n" "\nThis procedure either uses cached information from a previous\nrequest for sfd (only when use-cache? is provided as true)\nor attempts to locate and open the source file identified\nby sfd.\nIf successful, it returns three values: a string path, an exact\nnonnegative integer line, and an exact nonnegative integer char\nrepresenting the absolute pathname, line, and character position within\nthe line represented by the specified source-file descriptor and file\nposition.\nIf unsuccessful, it returns zero values.\nIt can fail even if a file with the correct name exists in one of\nthe source directories when the file's checksum does not match the\nchecksum recorded in sfd.\n\n") ("syntax:s73" "\n\n\nprocedure: (locate-source-object-source source-object get-start? use-cache?)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "This procedure is similar to locate-source, but instead of\ntaking an sfd and a position, it takes a source object plus a request\nfor either the start or end location.\n\n" "\nIf get-start? is true and source-object has a line and column,\nthis procedure returns the path in\nsource-objects's sfd, source-object's line, and\nsource-objects's column.\n\n" "\nIf source-object has no line and column, then\nthis procedure calls locate-source on\nsource-object's sfd, either source-object's bfp or efp\ndepending on get-start?, and use-cache?.\n\n") ("syntax:s74" "\n\n\nthread parameter: current-locate-source-object-source\n\nlibraries: (chezscheme)\n\n" "current-locate-source-object-source determines the\nsource-location lookup function that is used by the system to report\nerrors based on source objects. This parameter is initially bound to\nlocate-source-object-object.\n\n" "\nAdjust this parameter to control the way that source locations are\nextracted from source objects, possibly using recorded information,\ncaches, and the filesystem in a way different from\nlocate-source-object-object.\n\n\n") ("syntax:s81" "\n\n\nprocedure: (make-source-table)\n\nreturns: a source table\n\nlibraries: (chezscheme)\n\n" "A source table contains associations between source objects and arbitrary\nvalues.  For purposes of the source-table operations described below, two\nsource objects are the same if they have the same source-file descriptor,\nequal beginning file positions and equal ending file positions.\nTwo source-file descriptors are the same if they have the same path and\nchecksum.\n\n") ("syntax:s82" "\n\n\nprocedure: (source-table? obj)\n\nreturns: #t if obj is a source-table; #f otherwise\n\nlibraries: (chezscheme)\n\n") ("syntax:s83" "\n\nprocedure: (source-table-set! source-table source-object obj)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "source-table-set! associates source-object\nwith obj in source-table, replacing the\nexisting association, if any.\n\n\n") ("syntax:s84" "\n\n\nprocedure: (source-table-ref source-table source-object default)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "default may be any Scheme value.\n\n" "\nsource-table-ref returns the value\nassociated with source-object in source-table.\nIf no value is associated with source-object in source-table,\nsource-table-ref returns default.\n\n\n") ("syntax:s85" "\n\n\nprocedure: (source-table-contains? source-table source-object)\n\nreturns: #t if an association for source-object exists in source-table, #f otherwise\n\nlibraries: (chezscheme)\n\n") ("syntax:s86" "\n\nprocedure: (source-table-cell source-table source-object default)\n\nreturns: a pair (see below)\n\nlibraries: (chezscheme)\n\n" "default may be any Scheme value.\n\n" "\nIf no value is associated with source-object in source-table,\nsource-table-cell modifies source-table to associate source-object with\ndefault.\nRegardless, it returns a pair whose car is source-object and whose cdr is\nthe associated value.\nChanging the cdr of this pair effectively updates the table to\nassociate source-object with a new value.\nThe car field of the pair should not be modified.\n\n\n") ("syntax:s87" "\n\n\nprocedure: (source-table-delete! source-table source-object)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "source-table-delete! drops the association\nfor source-object from source-table, if\none exists.\n\n\n") ("syntax:s88" "\n\n\nprocedure: (source-table-size source-table)\n\nreturns: the number of entries in source-table\n\nlibraries: (chezscheme)\n\n") ("syntax:s89" "\n\nprocedure: (put-source-table textual-output-port source-table)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure writes a representation of the information stored in source-table to the port.\n\n\n") ("syntax:s90" "\n\n\nprocedure: (get-source-table! textual-input-port source-table)\n\n\nprocedure: (get-source-table! textual-input-port source-table combine)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "The port must be positioned at a representation of source-table\ninformation written by some previous call to put-source-table,\nwhich reads the information and merges it into source-table.\n\n" "\nIf present and non-false, combine must be a procedure and\nshould accept two arguments.\nIt is called whenever associations for the same source object are\npresent both in source-table and in the information read from\nthe port.\nIn this case, combine is passed two arguments: the associated\nvalue from source-table and the associated value from the\nport (in that order) and must return one value, which is recorded\nas the new associated value for the source object in source-table.\n\n" "\nIf combine is not present, combine is #f, or\nno association for a source object read from the port already exists\nin source-table, the value read from the port is recorded as\nthe associated value of the source object in source-table.\n\n" "\n\n" "(define st (make-source-table))\n\n(call-with-port (open-input-file \"profile.out1\")\n\n  (lambda (ip) (get-source-table! ip st)))\n\n(call-with-port (open-input-file \"profile.out2\")\n\n  (lambda (ip) (get-source-table! ip st +)))\n") ("smgmt:s9" "\n\n\nprocedure: (collect)\n\n\nprocedure: (collect cg)\n\n\nprocedure: (collect cg max-tg)\n\n\nprocedure: (collect cg min-tg max-tg)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure causes the storage manager to perform a garbage\ncollection.\ncollect is invoked periodically without arguments by the\ndefault collect-request handler, but it may also be called explicitly,\ne.g., from a custom collect-request handler, between phases of a\ncomputation when collection is most likely to be successful, or\nbefore timing a computation.\nIn the threaded versions of Chez Scheme, the thread that invokes\ncollect must be the only active thread.\n\n" "\nWhen called without arguments, the system determines automatically\nwhich generations to collect and the target generation for each\ncollected generation as described in the lead-in to this section.\n\n" "\nWhen called with arguments, the system collects all and only objects\nin generations less than or equal to cg (the maximum collected\ngeneration) into the target generation or generations determined\nby min-tg (the minimum target generation) and max-tg\n(the maximum target generation).\nSpecifically, the target generation for any object in a collected\ngeneration g is\nmath/csug/5.gif, where\nstatic is taken to have the value one greater\nthan the maximum nonstatic generation.\n\n" "\nIf present, cg must be a nonnegative fixnum no greater than\nthe maximum nonstatic generation, i.e., the current value of the\nparameter collect-maximum-generation.\n\n" "\nIf present, max-tg must be a nonnegative fixnum or the symbol\nstatic and either equal to cg or one greater than\ncg, again treating static as having the value one\ngreater than the maximum nonstatic generation.\nIf max-tg is not present (but cg is), it defaults to\ncg if cg is equal to the maximum target generation and\nto one more than cg otherwise.\n\n" "\nIf present, min-tg must be a nonnegative fixnum or the symbol\nstatic and no greater than max-tg, again treating\nstatic as having the value one greater than the maximum\nnonstatic generation.\nUnless max-cg is the same as cg, min-tg must also\nbe greater than cg.\nIf min-tg is not present (but cg is), it defaults to\nthe same value as max-tg.\n\n") ("smgmt:s10" "\n\n\nprocedure: (collect-rendezvous)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "Requests a garbage collection in the same way as when the system\ndetermines that a collection should occur. All running threads are\ncoordinated so that one of them calls the collect-request handler, while\nthe other threads pause until the handler returns.\n\n" "\nNote that if the collect-request handler (see\ncollect-request-handler) does not call collect, then\ncollect-rendezvous does not actually perform a garbage\ncollection.\n\n\n") ("smgmt:s11" "\n\n\nglobal parameter: collect-notify\n\nlibraries: (chezscheme)\n\n" "If collect-notify is set to a true value, the collector prints\na message whenever a collection is run.\ncollect-notify is set to #f by default.\n\n\n") ("smgmt:s12" "\n\n\nglobal parameter: collect-trip-bytes\n\nlibraries: (chezscheme)\n\n" "This parameter determines the approximate amount of storage that is\nallowed to be allocated between garbage collections.\nIts value must be a positive fixnum.\n\n" "\nChez Scheme allocates memory internally in large chunks and\nsubdivides these chunks via inline operations for efficiency.\nThe storage manager determines whether to request a collection only\nonce per large chunk allocated.\nFurthermore, some time may elapse between when a collection is\nrequested by the storage manager and when the collect request is\nhonored, especially if interrupts are temporarily disabled via\nwith-interrupts-disabled\nor disable-interrupts.\nThus, collect-trip-bytes is an approximate measure only.\n\n\n") ("smgmt:s15" "\n\n\nglobal parameter: collect-generation-radix\n\nlibraries: (chezscheme)\n\n" "This parameter determines how often each generation is collected\nwhen collect is invoked without arguments, as by the default\ncollect-request handler.\nIts value must be a positive fixnum.\nGenerations are collected once every rg times a collection occurs,\nwhere r is the\nvalue of collect-generation-radix and g is the generation\nnumber.\n\n" "\nSetting collect-generation-radix to one forces all generations\nto be collected each time a collection occurs.\nSetting collect-generation-radix to a very large number\neffectively delays collection of older generations indefinitely.\n\n\n") ("smgmt:s16" "\n\n\nglobal parameter: collect-maximum-generation\n\nlibraries: (chezscheme)\n\n" "This parameter determines the maximum nonstatic generation, hence the\ntotal number of generations, currently in use.\nIts value is an exact integer in the range 1 through 254.\nWhen set to 1, only two nonstatic generations are used; when set to 2,\nthree nonstatic generations are used, and so on.\nWhen set to 254, 255 nonstatic generations are used, plus the single\nstatic generation for a total of 256 generations.\nIncreasing the number of generations effectively decreases how often old\nobjects are collected, potentially decreasing collection overhead but\npotentially increasing the number of inaccessible objects retained in the\nsystem and thus the total amount of memory required.\n\n\n") ("smgmt:s17" "\n\n\nglobal parameter: collect-request-handler\n\nlibraries: (chezscheme)\n\n" "The value of collect-request-handler must be a procedure.\nThe procedure is invoked without arguments whenever the\nsystem determines that a collection should occur, i.e., some time after\nan amount of storage determined by the parameter\ncollect-trip-bytes has been allocated since the last\ncollection.\n\n" "\nBy default, collect-request-handler simply invokes\ncollect without arguments.\n\n" "\nAutomatic collection may be disabled by setting\ncollect-request-handler to a procedure that does nothing,\ne.g.:\n\n" "\n\n" "(collect-request-handler void)\n" "Collection can also be temporarily disabled using\ncritical-section, which prevents any interrupts from\nbeing handled.\n\n" "\nIn the threaded versions of Chez Scheme, the collect-request\nhandler is invoked by a single thread with all other threads\ntemporarily suspended.\n\n\n") ("smgmt:s18" "\n\n\nglobal parameter: release-minimum-generation\n\nlibraries: (chezscheme)\n\n" "This parameter's value must be between 0 and the value of\ncollect-maximum-generation, inclusive, and defaults to the\nvalue of collect-maximum-generation.\n\n" "\nAs new data is allocated and collections occur, the storage-management\nsystem automatically requests additional virtual memory address space\nfrom the operating system.\nCorrespondingly, in the event the heap shrinks significantly, the system\nattempts to return some of the virtual-memory previously obtained from\nthe operating system back to the operating system.\nBy default, the system attempts to do so only after a collection that\ntargets the maximum nonstatic generation.\nThe system can be asked to do so after collections\ntargeting younger generations as well by altering the value\nrelease-minimum-generation to something less than the value\nof collect-maximum-generation.\nWhen the generation to which the parameter is set, or any older\ngeneration, is the target generation of a collection, the storage\nmanagement system attempts to return unneeded virtual memory to the\noperating system following the collection.\n\n" "\nWhen collect-maximum-generation is set to a new value g,\nrelease-minimum-generation is implicitly set to g as well\nif (a) the two parameters have the same value before the change, or (b)\nrelease-minimum-generation has a value greater than g.\n\n") ("smgmt:s19" "\n\n\nglobal parameter: heap-reserve-ratio\n\nlibraries: (chezscheme)\n\n" "This parameter determines the approximate amount of memory reserved (not\nreturned to the O/S as described in the entry for release-minimum-generation)\nin proportion to the amount currently occupied, excluding areas\nof memory that have been made static.\nIts value must be an inexact nonnegative flonum value; if set to an exact\nreal value, the exact value is converted to an inexact value.\nThe default value, 1.0, reserves one page of memory for each currently\noccupied nonstatic page.\nSetting it to a smaller value may result in a smaller average virtual\nmemory footprint, while setting it to a larger value may result in fewer\ncalls into the operating system to request and free memory space.\n\n\n") ("smgmt:s24" "\ndesc:weak-cons\n\n\nprocedure: (weak-cons obj1 obj2)\n\nreturns: a new weak pair\n\nlibraries: (chezscheme)\n\n" "obj1 becomes the car and obj2 becomes the cdr of the\nnew pair.\nWeak pairs are indistinguishable from ordinary pairs in all but two ways:\n\n" "\n\nweak pairs can be distinguished from pairs using the\nweak-pair? predicate, and\n\n\nweak pairs maintain a weak pointer to the object in the\ncar of the pair.\n\n" "\n\n" "\nThe weak pointer in the car of a weak pair is just like a normal\npointer as long as the object to which it points is accessible through\na normal (nonweak) pointer somewhere in the system.\nIf at some point the garbage collector recognizes that there are no\nnonweak pointers to the object, however, it replaces each weak pointer\nto the object with the \"broken weak-pointer\" object, #!bwp,\nand discards the object.\n\n" "\nThe cdr field of a weak pair is not a weak pointer, so\nweak pairs may be used to form lists of weakly held objects.\nThese lists may be manipulated using ordinary list-processing\noperations such as length, map, and assv.\n(Procedures like map that produce list structure always\nproduce lists formed from nonweak pairs, however, even when their input\nlists are formed from weak pairs.)\nWeak pairs may be altered using set-car! and set-cdr!; after\na set-car! the car field contains a weak pointer to the new\nobject in place of the old object.\nWeak pairs are especially useful for building association pairs\nin association lists or hash tables.\n\n" "\nWeak pairs are printed in the same manner as ordinary pairs; there\nis no reader syntax for weak pairs.\nAs a result, weak pairs become normal pairs when they are written\nand then read.\n\n" "\n\n" "(define x (cons 'a 'b))\n\n(define p (weak-cons x '()))\n\n(car p) --> (a . b)\n\n\n(define x (cons 'a 'b))\n\n(define p (weak-cons x '()))\n\n(set! x '*)\n\n(collect)\n\n(car p) --> #!bwp\n" "The latter example above may in fact return (a . b) if a\ngarbage collection promoting the pair into an older generation occurs\nprior to the assignment of x to *.\nIt may be necessary to force an older generation collection to allow\nthe object to be reclaimed.\nThe storage management system guarantees only that the object\nwill be reclaimed eventually once all nonweak pointers to it are\ndropped, but makes no guarantees about when this will occur.\n\n\n") ("smgmt:s25" "\n\n\nprocedure: (weak-pair? obj)\n\nreturns: #t if obj is a weak pair, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "(weak-pair? (weak-cons 'a 'b)) --> #t\n\n(weak-pair? (cons 'a 'b)) --> #f\n\n(weak-pair? \"oops\") --> #f\n") ("smgmt:s26" "desc:ephemeron-cons\n\n\nprocedure: (ephemeron-cons obj1 obj2)\n\nreturns: a new ephemeron pair\n\nlibraries: (chezscheme)\n\n" "obj1 becomes the car and obj2 becomes the cdr of the\nnew pair.\nEphemeron pairs are indistinguishable from ordinary pairs in all but two ways:\n\n" "\n\nephemeron pairs can be distinguished from pairs using the\nephemeron-pair? predicate, and\n\n\nephemeron pairs maintain a weak pointer to the object in the\ncar of the pair, and the cdr of the pair is preserved only as long\nas the car of the pair is preserved.\n\n" "\n\n" "\nAn ephemeron pair behaves like a weak pair, but the cdr is treated\nspecially in addition to the car: the cdr of an ephemeron is set to\n#!bwp at the same time that the car is set to #!bwp.\nSince the car and cdr fields are set to #!bwp at the same\ntime, then the fact that the car object may be referenced through the\ncdr object does not by itself imply that car must be preserved (unlike\na weak pair); instead, the car must be saved for some reason\nindependent of the cdr object.\n\n" "\nLike weak pairs and other pairs, ephemeron pairs may be altered using\nset-car! and set-cdr!, and ephemeron pairs are\nprinted in the same manner as ordinary pairs; there is no reader\nsyntax for ephemeron pairs.\n\n" "\n\n" "(define x (cons 'a 'b))\n\n(define p (ephemeron-cons x x))\n\n(car p) --> (a . b)\n\n(cdr p) --> (a . b)\n\n\n(define x (cons 'a 'b))\n\n(define p (ephemeron-cons x x))\n\n(set! x '*)\n\n(collect)\n\n(car p) --> #!bwp\n\n(cdr p) --> #!bwp\n\n\n(define x (cons 'a 'b))\n\n(define p (weak-cons x x)) ; not an ephemeron pair\n\n(set! x '*)\n\n(collect)\n\n(car p) --> (a . b)\n\n(cdr p) --> (a . b)\n" "As with weak pairs, the last two expressions of the middle example\nabove may in fact return (a . b) if a garbage collection\npromoting the pair into an older generation occurs prior to the\nassignment of x to *. In the last example above,\nhowever, the results of the last two expressions will always be\n(a . b), because the cdr of a weak pair holds a non-weak\nreference, and that non-weak reference prevents the car field from becoming\n#!bwp.\n\n") ("smgmt:s27" "\n\n\nprocedure: (ephemeron-pair? obj)\n\nreturns: #t if obj is a ephemeron pair, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "(ephemeron-pair? (ephemeron-cons 'a 'b)) --> #t\n\n(ephemeron-pair? (cons 'a 'b)) --> #f\n\n(ephemeron-pair? (weak-cons 'a 'b)) --> #f\n\n(ephemeron-pair? \"oops\") --> #f\n") ("smgmt:s28" "\n\nprocedure: (bwp-object? obj)\n\nreturns: #t if obj is the broken weak-pair object, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "(bwp-object? #!bwp) --> #t\n\n(bwp-object? 'bwp) --> #f\n\n\n(define x (cons 'a 'b))\n\n(define p (weak-cons x '()))\n\n(set! x '*)\n\n(collect (collect-maximum-generation))\n\n(car p) --> #!bwp\n\n(bwp-object? (car p)) --> #t\n") ("smgmt:s29" "\n\nprocedure: (make-guardian)\n\nreturns: a new guardian\n\nlibraries: (chezscheme)\n\n" "Guardians are represented by procedures that encapsulate groups of\nobjects registered for preservation.\nWhen a guardian is created, the group of registered objects is empty.\nAn object is registered with a guardian by passing the object as an\nargument to the guardian:\n\n" "\n\n" "(define G (make-guardian))\n\n(define x (cons 'aaa 'bbb))\n\nx --> (aaa . bbb)\n\n(G x)\n" "It is also possible to specify a \"representative\" object when\nregistering an object.\nContinuing the above example:\n\n" "\n\n" "(define y (cons 'ccc 'ddd))\n\ny --> (ccc . ddd)\n\n(G y 'rep)\n" "The group of registered objects associated with a guardian is logically\nsubdivided into two disjoint subgroups: a subgroup referred to\nas \"accessible\" objects, and one referred to \"inaccessible\" objects.\nInaccessible objects are objects that have been proven to be\ninaccessible (except through the guardian mechanism itself or through\nthe car field of a weak or ephemeron pair), and\naccessible objects are objects that have not been proven so.\nThe word \"proven\" is important here: it may be that some objects in\nthe accessible group are indeed inaccessible but\nthat this has not yet been proven.\nThis proof may not be made in some cases until long after the object\nactually becomes inaccessible (in the current implementation, until a\ngarbage collection of the generation containing the object occurs).\n\n" "\nObjects registered with a guardian are initially placed in the accessible\ngroup and are moved into the inaccessible group at some point after they\nbecome inaccessible.\nObjects in the inaccessible group are retrieved by invoking the guardian\nwithout arguments.\nIf there are no objects in the inaccessible group, the guardian returns\n#f.\nContinuing the above example:\n\n" "\n\n" "(G) --> #f\n\n(set! x #f)\n\n(set! y #f)\n\n(collect)\n\n(G) --> (aaa . bbb)   ; this might come out second\n\n(G) --> rep           ; and this first\n\n(G) --> #f\n" "The initial call to G returns #f, since the pairs bound\nto x and y are the\nonly object registered with G, and the pairs are still accessible\nthrough those bindings.\nWhen collect is called, the objects shift into the inaccessible group.\nThe two calls to G therefore return the pair previously bound to\nx and the representative of the pair previously bound to y,\nthough perhaps in the other order from the one shown.\n(As noted above for weak pairs, the call to collect may not actually be\nsufficient to prove the object inaccessible, if the object has\nmigrated into an older generation.)\n\n" "\nAlthough an object registered without a representative and returned from\na guardian has been proven otherwise\ninaccessible (except possibly via the car field of a weak or ephemeron pair), it has\nnot yet been reclaimed by the storage management system and will not be\nreclaimed until after the last nonweak pointer to it within or outside\nof the guardian system has been dropped.\nIn fact, objects that have been retrieved from a guardian have no\nspecial status in this or in any other regard.\nThis feature circumvents the problems that might otherwise arise with\nshared or cyclic structure.\nA shared or cyclic structure consisting of inaccessible objects is\npreserved in its entirety, and each piece registered for preservation\nwith any guardian is placed in the inaccessible set for that guardian.\nThe programmer then has complete control over the order in which pieces\nof the structure are processed.\n\n" "\nAn object may be registered with a guardian more than once, in which\ncase it will be retrievable more than once:\n\n" "\n\n" "(define G (make-guardian))\n\n(define x (cons 'aaa 'bbb))\n\n(G x)\n\n(G x)\n\n(set! x #f)\n\n(collect)\n\n(G) --> (aaa . bbb)\n\n(G) --> (aaa . bbb)\n" "It may also be registered with more than one guardian, and guardians\nthemselves can be registered with other guardians.\n\n" "\nAn object that has been registered with a guardian without a\nrepresentative and placed in\nthe car field of a weak or ephemeron pair remains in the car field of the\nweak or ephemeron pair until after it has been returned from the guardian and\ndropped by the program or until the guardian itself is dropped.\n\n" "\n\n" "(define G (make-guardian))\n\n(define x (cons 'aaa 'bbb))\n\n(define p (weak-cons x '()))\n\n(G x)\n\n(set! x #f)\n\n(collect)\n\n(set! y (G))\n\ny --> (aaa . bbb)\n\n(car p) --> (aaa . bbb)\n\n(set! y #f)\n\n(collect 1)\n\n(car p) --> #!bwp\n" "(The first collector call above would\npromote the object at least into generation 1, requiring the second\ncollector call to be a generation 1 collection.\nThis can also be forced by invoking collect several times.)\n\n" "\nOn the other hand, if a representative (other than the object itself)\nis specified, the guarded object is dropped from the car field of the\nweak or ephemeron pair at the same time as the representative becomes available\nfrom the guardian.\n\n" "\n\n" "(define G (make-guardian))\n\n(define x (cons 'aaa 'bbb))\n\n(define p (weak-cons x '()))\n\n(G x 'rep)\n\n(set! x #f)\n\n(collect)\n\n(G) --> rep\n\n(car p) --> #!bwp\n" "The following example illustrates that the object is deallocated and\nthe car field of the weak pair set to #!bwp when the guardian\nitself is dropped:\n\n" "\n\n" "(define G (make-guardian))\n\n(define x (cons 'aaa 'bbb))\n\n(define p (weak-cons x '()))\n\n(G x)\n\n(set! x #f)\n\n(set! G #f)\n\n(collect)\n\n(car p) --> #!bwp\n" "The example below demonstrates how guardians might be used to\ndeallocate external storage, such as storage managed by the C library\n\"malloc\" and \"free\" operations.\n\n" "\n\n" "(define malloc\n\n  (let ([malloc-guardian (make-guardian)])\n\n    (lambda (size)\n\n      ; first free any storage that has been dropped.  to avoid long\n\n      ; delays, it might be better to deallocate no more than, say,\n\n      ; ten objects for each one allocated\n\n      (let f ()\n\n        (let ([x (malloc-guardian)])\n\n          (when x\n\n            (do-free x)\n\n            (f))))\n\n      ; then allocate and register the new storage\n\n      (let ([x (do-malloc size)])\n\n        (malloc-guardian x)\n\n        x))))\n" "do-malloc must return a Scheme object \"header\" encapsulating a pointer to the\nexternal storage (perhaps as an unsigned integer), and all access to the\nexternal storage must be made through this header.\nIn particular, care must be taken that no pointers to the external storage\nexist outside of Scheme after the corresponding header has been\ndropped.\ndo-free must deallocate the external storage using the encapsulated\npointer.\nBoth primitives can be defined in terms of foreign-alloc\nand foreign-free or the C-library \"malloc\" and \"free\"\noperators, imported as foreign procedures.  (See\nChapter 4.)\n\n" "\nIf it is undesirable to wait until malloc is called to free dropped\nstorage previously allocated by malloc, a collect-request handler\ncan be used instead to check for and free dropped storage, as shown below.\n\n" "\n\n" "(define malloc)\n\n(let ([malloc-guardian (make-guardian)])\n\n  (set! malloc\n\n    (lambda (size)\n\n      ; allocate and register the new storage\n\n      (let ([x (do-malloc size)])\n\n        (malloc-guardian x)\n\n        x)))\n\n  (collect-request-handler\n\n    (lambda ()\n\n      ; first, invoke the collector\n\n      (collect)\n\n      ; then free any storage that has been dropped\n\n      (let f ()\n\n        (let ([x (malloc-guardian)])\n\n          (when x\n\n            (do-free x)\n\n            (f)))))))\n" "With a bit of refactoring, it would be possible to register\nthe encapsulated foreign address as a representative with\neach header, in which do-free would take just the\nforeign address as an argument.\nThis would allow the header to be dropped from the Scheme\nheap as soon as it becomes inaccessible.\n\n" "\nGuardians can also be created via\nftype-guardian, which\nsupports reference counting of foreign objects.\n\n") ("smgmt:s31" "\n\n\nprocedure: (guardian? obj)\n\nreturns: #t if obj is a guardian, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "(guardian? (make-guardian)) --> #t\n\n(guardian? (ftype-guardian iptr)) --> #t\n\n(guardian? (lambda x x)) --> #f\n\n(guardian? \"oops\") --> #f\n") ("smgmt:s32" "\n\nprocedure: (unregister-guardian guardian)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "unregister-guardian unregisters the\nas-yet unresurrected objects currently registered with the guardian,\nwith one caveat.\n\n" "\nThe caveat, which applies only to threaded versions of Chez Scheme,\nis that objects registered with the guardian by other threads since\nthe last garbage collection might not be unregistered.\nTo ensure that all objects are unregistered in a multithreaded\napplication, a single thread can be used both to register and\nunregister objects.\nAlternatively, an application can arrange to define a\ncollect-request\nhandler that calls unregister-guardian after it calls\ncollect.\n\n" "\nIn any case, unregister-guardian returns a list containing each object\n(or its representative, if specified) that it unregisters, with\nduplicates as appropriate if the same object is registered more\nthan once with the guardian.\nObjects already resurrected but not yet retrieved from the guardian\nare not included in the list but remain retrievable from the\nguardian.\n\n" "\nIn the current implementation, unregister-guardian takes time proportional\nto the number of unresurrected objects currently registered with\nall guardians rather than those registered just with\nthe corresponding guardian.\n\n" "\nThe example below assumes no collections occur except for those resulting from\nexplicit calls to collect.\n\n" "\n\n" "(define g (make-guardian))\n\n(define x (cons 'a 'b))\n\n(define y (cons 'c 'd))\n\n(g x)\n\n(g x)\n\n(g y)\n\n(g y)\n\n(set! y #f)\n\n(collect 0 0)\n\n(unregister-guardian g) --> ((a . b) (a . b))\n\n(g) --> (c . d)\n\n(g) --> (c . d)\n\n(g) --> #f\n" "unregister-guardian can also be used to unregister ftype\npointers registered with guardians created by\nftype-guardian\n(Section 15.6).\n\n\n") ("smgmt:s36" "\n\n\nprocedure: (lock-object obj)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "Locking an object prevents the storage manager from reclaiming or\nrelocating the object.\nLocking should be used sparingly, as it introduces memory fragmentation\nand increases storage management overhead.\n\n" "\nLocking can also lead to accidental retention of storage if objects\nare not unlocked.\nObjects may be unlocked via unlock-object or the equivalent\nC library procedure\nSunlock_object.\n\n" "\nLocking immediate values, such as fixnums, booleans, and characters,\nor objects that have been made static is unnecessary but harmless.\n\n\n") ("smgmt:s38" "\n\n\nprocedure: (unlock-object obj)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "An object may be locked more than once by successive calls to\nlock-object, Slock_object, or both, in which case it must\nbe unlocked by an equal number of calls to\nunlock-object or Sunlock_object before it is\ntruly unlocked.\n\n" "\nAn object contained within a locked object, such as an object in the\ncar of a locked pair, need not also be locked unless a separate C\npointer to the object exists.\nThat is, if the inner object is accessed only via an indirection of the\nouter object, it should be left unlocked so that the collector is free\nto relocate it during collection.\n\n" "\nUnlocking immediate values, such as fixnums, booleans, and characters,\nor objects that have been made static is unnecessary and ineffective but harmless.\n\n\n") ("smgmt:s39" "\n\n\nprocedure: (locked-object? obj)\n\nreturns: #t if obj is locked, immediate, or static\n\nlibraries: (chezscheme)\n\n") ("libraries:s13" "\n\n\nsyntax: (library name exports imports library-body)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "The library form defines a new library with the specified\nname, exports, imports, and body.\nDetails on the syntax and semantics of the library form are given in\nSection http://scheme.com/tspl4/./libraries.html#g14510.3 of The Scheme Programming Language, 4th Edition and in the Revised6\nReport.\n\n" "\nOnly one version of a library can be loaded at any given time, and an\nexception is raised if a library is implicitly loaded via import\nwhen another version of the library has already been loaded.\nChez Scheme permits a different version of the library, or a new\ninstance of the same version, to be entered explicitly into the REPL\nor loaded explicitly from a file, to facilitate interactive testing\nand debugging.\nThe programmer should take care to make sure that any code that uses\nthe library is also reentered or reloaded, to make sure that code\naccesses the bindings of the new instance of the library.\n\n" "\n\n" "(library (test (1)) (export x) (import (rnrs)) (define x 3))\n\n(import (test))\n\n(define f (lambda () x))\n\n(f) --> 3\n\n\n(library (test (1)) (export x) (import (rnrs)) (define x 4))\n\n(import (test))\n\n(f) --> 3    ; oops---forgot to redefine f\n\n(define f (lambda () x))\n\n(f) --> 4\n\n\n(library (test (2)) (export x) (import (rnrs)) (define x 5))\n\n(import (test))\n\n(define f (lambda () x))\n\n(f) --> 5\n" "As with module imports (Section 11.5), a library\nimport may appear anywhere a definition may appear, including at\ntop level in the REPL, in a file to be loaded by load, or within\na lambda, let, letrec, letrec*,\netc., body.\nThe same import form may be used to import from both libraries\nand modules.\n\n" "\n\n" "(library (foo) (export a) (import (rnrs)) (define a 'a-from-foo))\n\n(module bar (b) (define b 'b-from-bar))\n\n(let () (import (foo) bar) (list a b)) --> (a-from-foo b-from-bar)\n" "The import keyword is not visible within a library body\nunless the library imports it from the (chezscheme) library.\n\n") ("libraries:s14" "\n\n\nsyntax: (top-level-program imports body)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "A top-level-program form may be entered into the REPL or placed\nin a file to be loaded via load, where it behaves as if its\nsubforms were placed in a file and loaded via load-program.\nDetails on the syntax and semantics of a top-level program are given in\nSection http://scheme.com/tspl4/./libraries.html#g14510.3 of The Scheme Programming Language, 4th Edition and in the Revised6\nReport.\n\n" "\nThe following transcript illustrates a top-level-program being\ntested in the REPL.\n\n" "\n\n" "> (top-level-program (import (rnrs))\n\n    (display \"hello!\\n\"))\n\nhello!\n") ("libraries:s16" "\n\n\nsyntax: (import import-spec ...)\n\n\nsyntax: (import-only import-spec ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "An import or import-only form is a definition and can\nappear anywhere other definitions can appear, including\nat the top level of a program, nested within the bodies of\nlambda expressions, and nested within modules\nand libraries.\n\n" "\nEach import-spec must take one of the following forms.\n\n" "\n\n" "import-set\n\n(for import-set import-level ...)\n" "The for wrapper and import-level are described in \nChapter http://scheme.com/tspl4/./libraries.html#g14210 of The Scheme Programming Language, 4th Edition.\nThey are ignored by Chez Scheme, which determines\nautomatically the levels at which identifiers must\nbe imported, as permitted by the Revised6 Report.\nThis frees the programmer from the obligation\nto do so and results in more generality as well as more\nprecision in the set of libraries actually imported\nat compile and run time [citation21,citation19].\n\n" "\nAn import-set must take one of the following forms:\n\n" "\n\n" "library-spec\n\nmodule-name\n\n(only import-set identifier ...)\n\n(except import-set identifier ...)\n\n(prefix import-set prefix)\n\n(add-prefix import-set prefix)\n\n(drop-prefix import-set prefix)\n\n(rename import-set (import-name internal-name) ...)\n\n(alias import-set (import-name internal-name) ...)\n" "Several of these are specified by the Revised6 Report; the remainder\nare Chez Scheme extensions, including module-name and the\nadd-prefix, drop-prefix, and alias forms.\n\n" "\nAn import or import-only form makes the specified bindings\nvisible in the scope in which they appear.\nExcept at top level, they differ in that import leaves all bindings\nexcept for those shadowed by the imported names visible, whereas import-only\nhides all existing bindings, i.e., makes only the imported names visible.\nAt top level, import-only behaves like import.\n\n" "\nEach import-set identifies a set of names to make visible\nas follows.\n\n" "\n\nlibrary-spec:\nall exports of the library identified by the Revised6 Report library-spec\n(Chapter http://scheme.com/tspl4/./libraries.html#g14210).\n\n" "\nmodule-name:\nall exports of module named by the identifier module-name\n\n" "\n(only import-set identifier ...):\nof those specified by import-set, just identifier ...\n\n" "\n(except import-set identifier ...):\nall specified by import-set except identifier ...\n\n" "\n(prefix import-set prefix):\nall specified by import-set, each prefixed by prefix\n\n" "\n(add-prefix import-set prefix):\nall specified by import-set, each prefixed by prefix\n(just like prefix)\n\n" "\n(drop-prefix import-set prefix):\nall specified by import-set, with prefix prefix removed\n\n" "\n(rename import-set (import-name internal-name) ...):\nall specified by import-set, with each identifier import-name\nrenamed to the corresponding identifier internal-name\n\n" "\n(alias import-set (import-name internal-name) ...):\nall specified by import-set, with each internal-name as an alias\nfor import-name\n\n\n" "\nThe alias form differs from the rename form in that both\nimport-name and internal-name are in the resulting set,\nrather than just internal-name.\n\n" "\nIt is a syntax violation if the\ngiven selection or transformation cannot be made because of a missing\nexport or prefix.\n\n" "\nAn identifier made visible via an import of a module or library is scoped as if its\ndefinition appears where the import occurs.\nThe following example illustrates these scoping rules, using a local\nmodule m.\n\n" "\n\n" "(library (A) (export x) (import (rnrs)) (define x 0))\n\n(let ([x 1])\n\n  (module m (x setter)\n\n    (define-syntax x (identifier-syntax z))\n\n    (define setter (lambda (x) (set! z x)))\n\n    (define z 2))\n\n  (let ([y x] [z 3])\n\n    (import m (prefix (A) a:))\n\n    (setter 4)\n\n    (list x a:x y z))) --> (4 0 1 3)\n" "The inner let expression binds y to the value of\nthe x bound by the outer let.\nThe import of m makes the definitions of x\nand setter visible within the inner let.\nThe import of (A) makes the variable x exported\nfrom (A) visible as a:x within the body of the\ninner let.\nThus, in the expression (list x a:x y z), x refers to the\nidentifier macro exported from m while a:x refers to the\nvariable x exported from (A) and y and z\nrefer to the bindings established by the inner let.\nThe identifier macro x expands into a reference to\nthe variable z defined within the module.\n\n" "\nWith local import forms, it is rarely necessary to use the extended\nimport specifiers.\nFor example, an abstraction that encapsulates the import and reference\ncan easily be defined and used as follows.\n\n" "\n\n" "(define-syntax from\n\n  (syntax-rules ()\n\n    [(_ m id) (let () (import-only m) id)]))\n\n\n(library (A) (export x) (import (rnrs)) (define x 1))\n\n(let ([x 10])\n\n  (module M (x) (define x 2))\n\n  (cons (from (A) x) (from M x))) --> (1 . 2)\n" "The definition of from could use import rather than\nimport-only, but by using import-only we get feedback\nif an attempt is made to import an identifier from a library or\nmodule that does not export the identifier.\nWith import instead of import-only, the current binding,\nif any, would be visible if the library or module does not export the\nspecified name.\n\n" "\n\n" "(define-syntax lax-from\n\n  (syntax-rules ()\n\n    [(_ m id) (let () (import m) id)]))\n\n\n(library (A) (export x) (import (rnrs)) (define x 1))\n\n\n(let ([x 10])\n\n  (module M (x) (define x 2))\n\n  (+ (from (A) x) (from M y))) --> exception: unbound identifier y\n\n \n\n(let ([x 10] [y 20])\n\n  (module M (x) (define x 2))\n\n  (+ (lax-from (A) x) (lax-from M y))) --> 21\n" "Import visibility interacts with hygienic macro expansion in such a\nway that, as one might expect,\nan identifier x imported from a module M is treated in\nthe importing context as if the corresponding export identifier had\nbeen present in the import form along with M.\n\n" "\nThe from abstraction above works because both M and id\nappear in the input to the abstraction, so the imported id captures\nthe reference to id.\n\n" "\nThe following variant of from also works, because both names are\nintroduced into the output by the transformer.\n\n" "\n\n" "(module M (x) (define x 'x-of-M))\n\n(define-syntax x-from-M\n\n  (syntax-rules ()\n\n    [(_) (let () (import M) x)]))\n\n\n(let ([x 'local-x]) (x-from-M)) --> x-of-M\n" "On the other hand, imports of introduced module names do not capture\nfree references.\n\n" "\n\n" "(let ([x 'local-x])\n\n  (define-syntax alpha\n\n    (syntax-rules ()\n\n      [(_ var) (let () (import M) (list x var))]))\n\n \n\n  (alpha x)) --> (x-of-M local-x)\n" "Similarly, imports from free module names do not capture references\nto introduced variables.\n\n" "\n\n" "(let ([x 'local-x])\n\n  (define-syntax beta\n\n    (syntax-rules ()\n\n      [(_ m var) (let () (import m) (list x var))]))\n\n\n  (beta M x)) --> (local-x x-of-M)\n" "This semantics extends to prefixed, renamed, and aliased bindings\ncreated by the extended import specifiers prefix,\nrename, and alias.\n\n" "\nThe from abstraction\nworks for variables but not for exported keywords, record names,\nor module names, since the output is an expression and may thus appear only where\nexpressions may appear.\nA generalization of this technique is used in the following definition\nof import*, which supports renaming of imported bindings and\nselective import of specific bindings---without the use of the built-in\nimport subforms for selecting and renaming identifiers\n\n" "\n\n" "(define-syntax import*\n\n  (syntax-rules ()\n\n    [(_ m) (begin)]\n\n    [(_ m (new old))\n\n     (module (new)\n\n       (module (tmp)\n\n         (import m)\n\n         (alias tmp old))\n\n       (alias new tmp))]\n\n    [(_ m id) (module (id) (import m))]\n\n    [(_ m spec0 spec1 ...)\n\n     (begin (import* m spec0) (import* m spec1 ...))]))\n" "To selectively import an identifier from module or library m, the\nimport* form expands into an anonymous module that first\nimports all exports of m then re-exports only the selected\nidentifier.\nTo rename on import the macro expands into an anonymous module that\ninstead exports an alias (Section 11.10) bound to the new name.\n\n" "\nIf the output placed the definition of new in the same\nscope as the import of m, a naming conflict would arise\nwhenever new is also present in the interface\nof m.\nTo prevent this, the output instead places the import within a nested\nanonymous module and links old and new\nby means of an alias for the introduced identifier tmp.\n\n" "\nThe macro expands recursively to handle multiple import specifications.\nEach of the following examples imports cons as + and + as\ncons, which is probably not a very good idea.\n\n" "\n\n" "(let ()\n\n  (import* scheme (+ cons) (cons +))\n\n  (+ (cons 1 2) (cons 3 4))) --> (3 . 7)\n\n\n(let ()\n\n  (import* (rnrs) (+ cons) (cons +))\n\n  (+ (cons 1 2) (cons 3 4))) --> (3 . 7)\n") ("libraries:s17" "\n\nsyntax: (export export-spec ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "An export form is a definition and can appear with other\ndefinitions at the front of a library or module.\nIt is a syntax error for an export form to appear in other\ncontexts, including at top level or among the definitions of a\ntop-level program or lambda body.\n\n" "\nEach export-spec must take one of the following forms.\n\n" "\n\n" "identifier\n\n(rename (internal-name export-name) ...)\n\n(import import-spec ...)\n" "where each internal-name and export-name is an identifier.\nThe first two are syntactically identical to library\nexport-specs, while the third is syntactically\nidentical to a Chez Scheme import form, which is an extension of the\nR6RS library import subform.\nThe first form names a single export, identifier, whose export\nname is the same as its internal name.\nThe second names a set of exports, each of whose export name is\ngiven explicitly and may differ from its internal name.\n\n" "\nFor the third, the identifiers identified by the import form\nbecome exports, with aliasing, renaming, prefixing, etc., as specified by the\nimport-specs.\nThe module or library whose bindings are exported by an import\nform appearing within an export form can\nbe defined within or outside the exporting module or library and need\nnot be imported elsewhere within the exporting module or library.\n\n" "\nThe following library exports a two-armed-only variant of if\nalong with all remaining bindings of the (rnrs) library.\n\n" "\n\n" "(library (rnrs-no-one-armed-if) (export) (import (except (chezscheme) if))\n\n  (export if (import (except (rnrs) if)))\n\n  (define-syntax if\n\n    (let ()\n\n      (import (only (rnrs) if))\n\n      (syntax-rules ()\n\n        [(_ tst thn els) (if tst thn els)]))))\n\n\n(import (rnrs-no-one-armed-if))\n\n(if #t 3 4) --> 3\n\n(if #t 3) --> exception: invalid syntax\n" "Another way to define the same library would be to define the\ntwo-armed-only if with a different internal name and use\nrename to export it under the name if:\n\n" "\n\n" "(library (rnrs-no-one-armed-if) (export) (import (chezscheme))\n\n  (export (rename (two-armed-if if)) (import (except (rnrs) if)))\n\n  (define-syntax two-armed-if\n\n    (syntax-rules ()\n\n      [(_ tst thn els) (if tst thn els)])))\n\n\n(import (rnrs-no-one-armed-if))\n\n(if #t 3 4) --> 3\n\n(if #t 3) --> exception: invalid syntax\n" "The placement of the export form in the library body is\nirrelevant, e.g., the export form can appear after the\ndefinition in the examples above.\n\n\n") ("libraries:s18" "\n\n\nsyntax: (indirect-export id indirect-id ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This form is a definition and can appear wherever any other definition\ncan appear.\n\n" "\nAn indirect-export form declares that the named\nindirect-ids are indirectly exported to top level if id\nis exported to top level.\n\n" "\nIn general, if an identifier is not directly exported by a library or\nmodule, it can be referenced outside of the library or module only in\nthe expansion of a macro defined within and exported from the library\nor module.\nEven this cannot occur for libraries or modules defined at top level\n(or nested within other libraries or modules), unless either (1)\nthe library or module has been set up to implicitly export all\nidentifiers as indirect exports, or (2) each indirectly exported\nidentifier is explicitly declared as an indirect export of some\nother identifier that is exported, either directly or indirectly, from\nthe library or module, via an indirect-export or the built-in\nindirect export feature of a module export subform.\nBy default, (1) is true for a library and false for a module, but the\ndefault can be overridden via the implicit-exports\nform, which is described below.\n\n" "\nThis form is meaningful only within a top-level library, top-level module,\nor module enclosed within a library or top-level module, although it\nhas no effect if the library or module already implicitly exports all\nbindings.\nIt is allowed anywhere else definitions can appear, however, so macros\nthat expand into indirect export forms can be used in any definition\ncontext.\n\n" "\nIndirect exports are listed so the compiler can determine the\nexact set of bindings (direct and indirect) that must be inserted\ninto the top-level environment, and conversely, the set of bindings\nthat may be treated more efficiently as local bindings (and\nperhaps discarded, if they are not used).\n\n" "\nIn the example below, indirect-export is used to indirectly\nexport count to top level when current-count is\nexported to top level.\n\n" "\n\n" "(module M (bump-count current-count)\n\n  (define-syntax current-count (identifier-syntax count))\n\n  (indirect-export current-count count)\n\n  (define count 0)\n\n  (define bump-count\n\n    (lambda ()\n\n      (set! count (+ count 1)))))\n\n\n(import M)\n\n(bump-count)\n\ncurrent-count --> 1\n\ncount --> exception: unbound identifier count\n" "An indirect-export form is not required to make count\nvisible for bump-count, since it is a procedure whose code\nis contained within the module rather than a macro that might expand\ninto a reference to count somewhere outside the module.\n\n" "\nIt is often useful to use indirect-export in the output\nof a macro that expands into another macro named a if\na expands into references to identifiers that might not\nbe directly exported, as illustrated by the alternative definition\nof module M above.\n\n" "\n\n" "(define-syntax define-counter\n\n  (syntax-rules ()\n\n    [(_ getter bumper init incr)\n\n     (begin\n\n       (define count init)\n\n       (define-syntax getter (identifier-syntax count))\n\n       (indirect-export getter count)\n\n       (define bumper\n\n         (lambda ()\n\n           (set! count (incr count)))))]))\n\n\n(module M (bump-count current-count)\n\n  (define-counter current-count bump-count 0 add1))\n") ("libraries:s19" "\n\nsyntax: (implicit-exports #t)\n\n\nsyntax: (implicit-exports #f)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "An implicit-exports form is a definition and can appear with other\ndefinitions at the front of a library or module.\nIt is a syntax error for an implicit-exports form to appear in other\ncontexts, including at top level or among the definitions of a\ntop-level program or lambda body.\n\n" "\nThe implicit-exports form determines whether identifiers\nnot directly exported from a module or library are automatically\nindirectly exported to the top level if any meta-binding (keyword, meta\ndefinition, or property definition) is directly exported to top level\nfrom the library or module.\nThe default for libraries is #t, to match the behavior required\nby the Revised6 Report, while the default for modules is #f.\nThe implicit-exports form is meaningful only within a library,\ntop-level module, or module enclosed within a library or top-level module.\nIt is allowed in a module enclosed within a lambda, let,\nor similar body, but ignored there because none of that module's bindings\ncan be exported to top level.\n\n" "\nThe advantage of (implicit-exports #t) is that indirect exports\nneed not be listed explicitly, which is convenient.\nA disadvantage is that it often results in more bindings than necessary\nbeing elevated to top level where they cannot be discarded as useless\nby the optimizer.\nFor modules, another disadvantage is such bindings\ncannot be proven immutable, which inhibits important optimizations such\nas procedure inlining.\nThis can result in significantly lower run-time performance.\n\n") ("libraries:s20" "\n\n\nprocedure: (invoke-library libref)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "libref must be an s-expression in the form of a library reference.\nThe syntax for library references is given in\nChapter http://scheme.com/tspl4/./libraries.html#g14210 of The Scheme Programming Language, 4th Edition and in the Revised6\nReport.\n\n" "\nA library is implicitly invoked when or before some expression\noutside the library (e.g., in another library or in a top-level\nprogram) evaluates a reference to one of the library's exported\nvariables.\nWhen the library is invoked, its body expressions (the right-hand-sides\nof the library's variable definitions and its initialization\nexpressions) are evaluated.\nOnce invoked, the library is not invoked again within the same process,\nunless it is first explicitly redefined or reloaded.\n\n" "\ninvoke-library explicitly invokes the library specified\nby libref if it has not already been invoked or has since\nbeen redefined or reloaded.\nIf the library has not yet been loaded, invoke-library\nfirst loads the library via the process described in\nSection 2.4.\n\n" "\ninvoke-library is typically only useful for libraries whose\nbody expressions have side effects.\nIt is useful to control when the side effects occur and to force\ninvocation of a library that has no exported variables.\nInvoking a library does not force the compile-time code (macro\ntransformer expressions and meta definitions) to be loaded or\nevaluated, nor does it cause the library's bindings to become\nvisible.\n\n" "\nIt is good practice to avoid externally visible side effects in\nlibrary bodies so the library can be used equally well at compile\ntime and run time.\nWhen feasible, consider moving the side effects of a library body\nto an initialization routine and adding a top-level program that\nimports the library and calls the initialization routine.\nWith this structure, calls to invoke-library on the\nlibrary can be replaced by calls to \nload-program on the\ntop-level program.\n\n") ("libraries:s23" "\n\n\nthread parameter: library-directories\n\n\nthread parameter: library-extensions\n\nlibraries: (chezscheme)\n\n" "The parameter library-directories determines where the files\ncontaining library source and object code are located in the file system,\nand the parameter library-extensions determines the filename\nextensions for the files holding the code, as described in\nsection 2.4.\nThe values of both parameters are lists of pairs of strings.\nThe first string in each library-directories pair identifies a\nsource-file root directory, and the second identifies the corresponding\nobject-file root directory.\nSimilarly, the first string in each library-extensions pair\nidentifies a source-file extension, and the second identifies the\ncorresponding object-file extension.\nThe full path of a library source or object file consists of the source or\nobject root followed by the components of the library name prefixed by\nslashes, with the library extension added on the end.\nFor example, for root /usr/lib/scheme, library name\n(app lib1), and extension .sls, the full path is\n/usr/lib/scheme/app/lib1.sls.\nIf the library name portion forms an absolute pathname, e.g.,\n~/.myappinit, the library-directories parameter is\nignored and no prefix is added.\n\n" "\nThe initial values of these parameters are shown below.\n\n" "\n\n" "(library-directories) --> ((\".\" . \".\"))\n\n\n(library-extensions) --> ((\".chezscheme.sls\" . \".chezscheme.so\")\n\n                     gifs/ghostRightarrow.gif  (\".ss\" . \".so\")\n\n                     gifs/ghostRightarrow.gif  (\".sls\" . \".so\")\n\n                     gifs/ghostRightarrow.gif  (\".scm\" . \".so\")\n\n                     gifs/ghostRightarrow.gif  (\".sch\" . \".so\"))\n" "As a convenience, when either of these parameters is set, any element of\nthe list can be specified as a single source string, in which case the\nobject string is determined automatically.\nFor library-directories, the object string is the same as\nthe source string, effectively naming the\nsame directory as a source- and object-code root.\nFor library-extensions, the object string is the result of\nremoving the last (or only) extension from the string and appending\n\".so\".\nThe library-directories and library-extensions\nparameters also accept as input strings in the format described\nin Section 2.5\nfor the\n--libdirs and\n--libexts command-line\noptions.\n\n") ("libraries:s26" "\n\n\nthread parameter: compile-imported-libraries\n\nlibraries: (chezscheme)\n\n" "When the value of this parameter is #t, import\nautomatically calls the value of the compile-library-handler parameter (which defaults\nto a procedure that simply calls compile-library) on any imported library if\nthe object file is missing, older than the corresponding source file,\nolder than any source files included (via include) when the\nobject file was created, or itself requires a library that has or must\nbe recompiled, as described in Section 2.4.\nThe default initial value of this parameter is #f.\nIt can be set to #t via the command-line option\n--compile-imported-libraries.\n\n" "\nWhen import compiles a library via this mechanism, it does not\nalso load the compiled library, because this would cause portions of\nlibrary to be reevaluated.\nBecause of this, run-time expressions in the file outside of a\nlibrary form will not be evaluated.\nIf such expressions are present and should be evaluated, the library\nshould be loaded explicitly.\n\n") ("libraries:s29" "\n\n\nthread parameter: import-notify\n\nlibraries: (chezscheme)\n\n" "When the new parameter import-notify is set to a true value,\nimport displays messages to the console-output port as it\nsearches for the file containing each library it needs to load.\nThe default value of this parameter is #f.\n\n") ("libraries:s30" "\n\n\nthread parameter: library-search-handler\n\nlibraries: (chezscheme)\n\n" "The value of parameter must be a procedure that follows the protocol described\nbelow for default-library-search-handler, which is the default value\nof this parameter.\n\n" "\nThe value of this parameter is invoked to locate the source or object code for\na library during import, compile-whole-program, or\ncompile-whole-library.\n\n") ("libraries:s31" "\n\n\nprocedure: (default-library-search-handler who library directories extensions)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "This procedure is the default value of the library-search-handler,\nwhich is\ncalled to locate the source or object code for a library\nduring import,\ncompile-whole-program, or compile-whole-library.\nwho is a symbol that provides context in import-notify messages.\nlibrary is the name of the desired library.\ndirectories is a list of source and object directory pairs in\nthe form returned by library-directories.\nextensions is a list of source and object extension pairs in the form\nreturned by library-extensions.\n\n" "\nThis procedure searches the specified directories until it finds a library source or\nobject file with one of the specified extensions.\nIf it finds the source file first, it constructs the corresponding\nobject file path and checks whether the file exists.\nIf it finds the object file first, the procedure looks for a corresponding\nsource file with one of the given source extensions in a source directory paired\nwith that object directory.\nThe procedure returns three values:\nthe file-system path of the library source file or #f if not found,\nthe file-system path of the corresponding object file, which may be #f,\nand a boolean that is true if the object file exists.\n\n") ("libraries:s32" "\n\n\nprocedure: (library-list)\n\nreturns: a list of the libraries currently defined\n\nlibraries: (chezscheme)\n\n" "The set of libraries initially defined includes those listed in\nSection 10.1 above.\n\n") ("libraries:s33" "\n\n\nprocedure: (library-version libref)\n\nreturns: the version of the specified library\n\n\nprocedure: (library-exports libref)\n\nreturns: a list of the exports of the specified library\n\n\nprocedure: (library-requirements libref)\n\nreturns: a list of libraries required by the specified library\n\n\nprocedure: (library-requirements libref options)\n\nreturns: a list of libraries required by the specified library, filtered by options\n\n\nprocedure: (library-object-filename libref)\n\nreturns: the name of the object file holding the specified library, if any\n\nlibraries: (chezscheme)\n\n" "Information can be obtained only for built-in libraries or libraries\npreviously loaded into the system.\nlibref must be an s-expression in the form of a library reference.\nThe syntax for library references is given in\nChapter http://scheme.com/tspl4/./libraries.html#g14210 of The Scheme Programming Language, 4th Edition and in the Revised6\nReport.\n\n" "\nThe library-version return value is a list of numbers\n(possibly empty) representing the library's version.\n\n" "\nThe list of exports returned by library-exports is a list of\nsymbols, each identifying one of the library's exports.\nThe order in which the elements appear is unspecified.\n\n" "\nWhen the optional options argument is supplied, it must be\nan enumeration set over the symbols constituting\nvalid library-requirements options, as described in the\nlibrary-requirements-options entry below.\nIt defaults to a set containing all of the options.\nEach element of the list of libraries returned by\nlibrary-requirements is an s-expression form of a library\nreference.\nThe library reference includes the actual version of the library that is\npresent in the system (if nonempty), even if a version was not specified\nwhen it was imported.\nThe order in which the libraries appear in the list returned by\nlibrary-requirements is unspecified.\n\n" "\nlibrary-object-filename returns a string naming the object\nfile if the specified library was loaded from or compiled to an object\nfile.\nOtherwise, it returns #f.\n\n\n" "\n\n" "(with-output-to-file \"A.ss\"\n\n  (lambda ()\n\n    (pretty-print\n\n      '(library (A (1 2)) (export x z)\n\n         (import (rnrs))\n\n         (define x 'ex)\n\n         (define y 23)\n\n         (define-syntax z\n\n           (syntax-rules ()\n\n             [(_ e) (+ y e)])))))\n\n  'replace)\n\n(with-output-to-file \"B.ss\"\n\n  (lambda ()\n\n    (pretty-print\n\n      '(library (B) (export x w)\n\n         (import (rnrs) (A))\n\n         (define w (cons (z 12) x)))))\n\n  'replace)\n\n(compile-imported-libraries #t)\n\n(import (B))\n\n(library-exports '(A)) --> (x z) ; or (z x)\n\n(library-exports '(A (1 2))) --> (x z) ; or (z x)\n\n(library-exports '(B)) --> (x w) ; or (w x)\n\n(library-version '(A)) --> (1 2)\n\n(library-version '(B)) --> ()\n\n(library-requirements '(A)) --> ((rnrs (6)))\n\n(library-requirements '(B)) --> ((rnrs (6)) (A (1 2)))\n\n(library-object-filename '(A)) --> \"A.so\"\n\n(library-object-filename '(B)) --> \"B.so\"\n") ("libraries:s34" "\n\nsyntax: (library-requirements-options symbol ...)\n\nreturns: a library-requirements-options enumeration set\n\nlibraries: (chezscheme)\n\n" "Library-requirements-options enumeration sets are passed to\nlibrary-requirements to determine the library requirements\nto be listed.  The available options are described below.\n\n" "\n\nimport:\nInclude the libraries that must be imported when the specified library\nis imported.\n\n" "\nvisit@visit:\nIncludes the libraries that must be visited when the specified library\nis visited.\n\n" "\ninvoke@visit:\nInclude the libraries that must be invoked when the specified library\nis visited.\n\n" "\ninvoke:\nIncludes the libraries that must be invoked when the specified library\nis invoked.\n\n\n") ("expeditor:s0" "\n\n\nmodule: expression-editor\n\nlibraries: (chezscheme)\n\n" "The expression-editor module exports a set of bindings for\nparameters and other procedures that can be used to modify how the\nexpression editor interacts with the user, including the particular keys\nused to invoke the various editing commands.\n\n" "\n" "Basic use of the expression editor is described in Section 2.2.\n\n\n\n") ("expeditor:s1" "\n\n\nglobal parameter: ee-auto-indent\n\n" "\n\n" "The value of ee-auto-indent is a boolean value that determines\nwhether the expression editor indents expressions as they are entered.\nIts default value is #t.\n\n\n") ("expeditor:s2" "\n\n\nglobal parameter: ee-standard-indent\n\n" "\n\n" "The value of ee-standard-indent is a nonnegative fixnum\nvalue that determines the amount (in single spaces) by which each\nexpression is indented relative to the enclosing expression, if\nnot aligned otherwise by one of the indenter's other heuristics,\nwhen ee-auto-indent is true or when one of the indentation\ncommands is invoked explicitly.\nIt's default value is 2.\n\n\n") ("expeditor:s3" "\n\n\nglobal parameter: ee-auto-paren-balance\n\n" "\n\n" "The value of ee-auto-paren-balance is a boolean value that determines\nwhether the expression editor automatically corrects a close\nparenthesis or bracket, when typed, to match the corresponding open\nparenthesis or bracket, if any.\nIts default value is #t.\n\n\n") ("expeditor:s4" "\n\n\nglobal parameter: ee-flash-parens\n\n" "\n\n" "The value of ee-flash-parens is a boolean value that determines\nwhether the expression editor briefly moves the cursor when an open\nor close parenthesis or bracket is typed to the\nmatching close or open parenthesis or bracket (if any).\nIts default value is #t.\n\n\n") ("expeditor:s5" "\n\n\nglobal parameter: ee-paren-flash-delay\n\n" "\n\n" "The value of ee-paren-flash-delay is a nonnegative fixnum\nvalue that determines the amount of time (in milliseconds) that the\nexpression editor pauses when the cursor is moved to the matching\nparenthesis or bracket, if any, when a parenthesis or bracket is\nentered.\nThe value is ignored if the ee-flash-parens is false.\nIts default value is 100.\n\n\n") ("expeditor:s6" "\n\n\nglobal parameter: ee-default-repeat\n\n" "\n\n" "The value of ee-default-repeat is a nonnegative fixnum\nvalue that determines the number of times the next command is\nrepeated after the ee-command-repeat editing command\n(bound to Esc-^U by default) is used and not\nfollowed by a sequence of digits.\nIt's default value is 4.\n\n\n") ("expeditor:s7" "\n\n\nglobal parameter: ee-noisy\n\n" "\n\n" "The value of ee-noisy is a boolean value that determines\nwhether the expression editor emits a beep (bell) when an error\noccurs, such as an attempt to find the matching delimiter for a\nnon-delimiter character.\nIts default value is #f.\n\n\n") ("expeditor:s8" "\n\n\nglobal parameter: ee-history-limit\n\n" "\n\n" "The value of ee-history-limit is a nonnegative fixnum value\nthat determines the number of history entries retained by the\nexpression editor during and across sessions.\nOnly the last (ee-history-limit) entries are retained.\n\n\n") ("expeditor:s9" "\n\n\nglobal parameter: ee-common-identifiers\n\n" "\n\n" "The value of ee-common-identifiers is list of symbols that\nare considered common enough that they should appear early when\none of the incremental identifier-completion editing commands is\ninvoked.\nIts default value contains a few dozen entries.\nThey are all more than a few characters long (under the theory that\nusers will most likely type short ones out fully) and all would\nappear later than they likely should when incremental\nidentifier-completion is used.\n\n\n") ("expeditor:s10" "\n\n\nprocedure: (ee-bind-key key procedure)\n\n" "\n\nreturns: unspecified\n\n" "The ee-bind-key procedure is used to add to or change the\nset of key bindings recognized by the expression editor.\n\n" "\nThe key must be a character or string; if it is a string, it\nmust have the following form.\n\n" "\n\n  \n  \n  \n<key-string>centermath/csug/2.gif\"<key-char>+\"\n\n\n" "\nwhere\n\n" "\n\n  \n  \n  \n<key-char>centermath/csug/2.gif\\\\e (specifying an escape character)\n  center|^x (specifying control-x)\n  center|\\\\^ (specifying caret)\n  center|\\\\\\\\ (specifying back slash)\n  center|plain char (any character other than \\ or ^)\n\n\n" "\nNote that each double-backslash in the syntax actually denotes just\none backslash in the string.\n\n" "\nFor example, the key \"\\\\eX\" represents the two-character\nsequence Escape-x, i.e., the \"escape\" key followed by the (capital)\n\"X\" key.\nSimilarly, they key \"\\\\e^X\" represents the two-character\nsequence Escape-Control-x, i.e., the \"escape\" key followed by\nControl-X.\n\n" "\nCharacter keys and string keys consisting of a single plain character\nalways represent a single keystroke.\n\n" "\nThe procedure argument should normally be one of the built-in editing\ncommands described below.\nIt is also possible to define new editing commands with\nee-string-macro\nand ee-compose.\n\n\n") ("expeditor:s77" "\n\n\nprocedure: (ee-string-macro string)\n\n" "\n\nreturns: a new editing command\n\n" "The new editing command produced inserts string before the current\ncursor position.\n\n" "\nTwo string macros are predefined:\n\n" "\nleft\n(ee-string-macro \"(define \") left   escape-dleft\n(ee-string-macro \"(lambda \") left   escape-l\n\n\n") ("expeditor:s78" "\n\n\nprocedure: (ee-compose ecmd ...)\n\n" "\n\nreturns: a new editing command\n\n" "Each ecmd must be an editing command.\n\n" "\nThe new editing command runs each of the editing commands\necmd ... in sequence.\n\n\n" "\nFor example, the following expression binds ^X-p to an editing\ncommand that behaves like ee-history-bwd-prefix but leaves the\ncursor at the end of the expression rather than at the end of the first\nline, causing the entire entry to be displayed.\n\n" "\n\n" "(let ()\n\n  (import expression-editor)\n\n  (ee-bind-key \"^Xp\"\n\n    (ee-compose ee-history-bwd ee-end-of-entry)))\n" "A command such as ee-id-completion that performs a different\naction when run twice in succession will not recognize that it has been\nrun twice in succession if run as part of a composite command.\n\n\n") ("debug:s0" "\n\n\nsyntax: (trace-lambda name formals body1 body2 ...)\n\nreturns: a traced procedure\n\nlibraries: (chezscheme)\n\n" "A trace-lambda expression is equivalent to a\nlambda expression with the same formals and body\nexcept that trace information is printed to the trace output port whenever\nthe procedure is invoked, using name to identify the procedure.\nThe trace information shows the value of the arguments passed to the\nprocedure and the values returned by the procedure, with indentation to\nshow the nesting of calls.\n\n" "\nThe traced procedure half defined below\nreturns the integer quotient of its argument and 2.\n\n" "\n\n" "(define half\n\n  (trace-lambda half (x)\n\n    (cond\n\n      [(zero? x) 0]\n\n      [(odd? x) (half (- x 1))]\n\n      [(even? x) (+ (half (- x 1)) 1)])))\n" "A trace of the call (half 5), which returns 2, is shown below.\n\n" "\n\n" "|(half 5)\n\n|(half 4)\n\n| (half 3)\n\n| (half 2)\n\n| |(half 1)\n\n| |(half 0)\n\n| |0\n\n| 1\n\n|2\n" "This example highlights the proper treatment of tail and nontail calls\nby the trace package.\nSince half tail calls itself when its argument is odd, the call\n(half 4) appears at the same level of indentation as the call\n(half 5).\nFurthermore, since the return values of (half 5) and\n(half 4) are necessarily the same, only one return value is\nshown for both calls.\n\n") ("debug:s3" "\n\n\nsyntax: (trace-case-lambda name clause ...)\n\nreturns: a traced procedure\n\nlibraries: (chezscheme)\n\n" "A trace-case-lambda expression is\nequivalent to a case-lambda expression with the same clauses\nexcept that trace information is printed to the trace output port whenever\nthe procedure is invoked, using name to identify the procedure.\nThe trace information shows the value of the arguments passed to the\nprocedure and the values returned by the procedure, with indentation to\nshow the nesting of calls.\n\n\n") ("debug:s5" "\n\n\nsyntax: (trace-let name ((var expr) ...) body1 body2 ...)\n\nreturns: the values of the body body1 body2 ...\n\nlibraries: (chezscheme)\n\n" "A trace-let expression is equivalent to a\nnamed let expression with the same name, bindings, and body\nexcept that trace information is printed to the trace output port on\nentry or reentry (via invocation of the procedure bound to name)\ninto the trace-let expression.\n\n" "\nA trace-let expression of the form\n\n" "\n\n" "(trace-let name ([var expr] ...)\n\n  body1 body2 ...)\n" "can be rewritten in terms of trace-lambda as follows:\n\n" "\n\n" "((letrec ([name\n\n           (trace-lambda name (var ...)\n\n             body1 body2 ...)])\n\n   name)\n\n expr ...)\n" "trace-let may be used to trace ordinary let expressions\nas well as let expressions as long as the name inserted along\nwith the trace-let keyword in place of let does not\nappear free within the body of the let expression.\nIt is also sometimes useful to insert a trace-let expression\ninto a program simply to display the value of an arbitrary expression\nat the current trace indentation.\nFor example, a call to the following variant of half\n\n" "\n\n" "(define half\n\n  (trace-lambda half (x)\n\n    (cond\n\n      [(zero? x) 0]\n\n      [(odd? x) (half (trace-let decr-value () (- x 1)))]\n\n      [(even? x) (+ (half (- x 1)) 1)])))\n" "with argument 5 results in the trace:\n\n" "\n\n" "|(half 5)\n\n| (decr-value)\n\n| 4\n\n|(half 4)\n\n| (half 3)\n\n| |(decr-value)\n\n| |2\n\n| (half 2)\n\n| |(half 1)\n\n| | (decr-value)\n\n| | 0\n\n| |(half 0)\n\n| 1\n\n|2\n") ("debug:s7" "\n\nsyntax: (trace-do ((var init update) ...) (test result ...) expr ...)\n\nreturns: the values of the last result expression\n\nlibraries: (chezscheme)\n\n" "A trace-do expression is equivalent to a\ndo expression with the same subforms,\nexcept that trace information is printed to the trace output port,\nshowing the values of var ... and each iteration and\nthe final value of the loop on termination.\nFor example, the expression\n\n" "\n\n" "(trace-do ([old '(a b c) (cdr old)]\n\n           [new '() (cons (car old) new)])\n\n  ((null? old) new))\n" "produces the trace\n\n" "\n\n" "|(do (a b c) ())\n\n|(do (b c) (a))\n\n|(do (c) (b a))\n\n|(do () (c b a))\n\n|(c b a)\n" "and returns (c b a).\n\n\n") ("debug:s9" "\n\n\nsyntax: (trace var1 var2 ...)\n\nreturns: a list of var1 var2 ...\n\n\nsyntax: (trace)\n\nreturns: a list of all currently traced top-level variables\n\nlibraries: (chezscheme)\n\n" "In the first form, trace reassigns the top-level values of\nvar1 var2 ..., whose values must be procedures,\nto equivalent procedures that display trace information in the manner\nof trace-lambda.\n\n" "\ntrace works by encapsulating the old value of each var in a\ntraced procedure.\nIt could be defined approximately as follows.  (The actual version\nrecords and returns information about traced variables.)\n\n" "\n\n" "(define-syntax trace\n\n  (syntax-rules ()\n\n    [(_ var ...)\n\n     (begin\n\n       (set-top-level-value! 'var\n\n         (let ([p (top-level-value 'var)])\n\n           (trace-lambda var args (apply p args))))\n\n       ...)]))\n" "Tracing for a procedure traced in this manner may be disabled via\nuntrace (see below), an assignment of the corresponding\nvariable to a different, untraced value, or a subsequent use of\ntrace for the same variable.\nBecause the value is traced and not the binding, however, a traced\nvalue obtained before tracing is disabled and retained after tracing is\ndisabled will remain traced.\n\n" "\ntrace without subexpressions evaluates to a list of all\ncurrently traced variables.\nA variable is currently traced if it has been traced and\nnot subsequently untraced or assigned to a different value.\n\n" "\nThe following transcript demonstrates the use of trace in\nan interactive session.\n\n" "\n\n" "> (define half\n\n    (lambda (x)\n\n      (cond\n\n        [(zero? x) 0]\n\n        [(odd? x) (half (- x 1))]\n\n        [(even? x) (+ (half (- x 1)) 1)])))\n\n> (half 5)\n\n2\n\n> (trace half)\n\n(half)\n\n> (half 5)\n\n|(half 5)\n\n|(half 4)\n\n| (half 3)\n\n| (half 2)\n\n| |(half 1)\n\n| |(half 0)\n\n| |0\n\n| 1\n\n|2\n\n2\n\n> (define traced-half half)\n\n> (untrace half)\n\n(half)\n\n> (half 2)\n\n1\n\n> (traced-half 2)\n\n|(half 2)\n\n|1\n\n1\n") ("debug:s10" "\n\nsyntax: (untrace var1 var2 ...)\n\n\nsyntax: (untrace)\n\nreturns: a list of untraced variables\n\nlibraries: (chezscheme)\n\n" "untrace restores the original (pre-trace) top-level values\nof each currently traced variable in\nvar1 var2 ...,\neffectively disabling the tracing of the values of these variables.\nAny variable in var1 var2 ... that is not\ncurrently traced is ignored.\nIf untrace is called without arguments, the values of all\ncurrently traced variables are restored.\n\n" "\nThe following transcript demonstrates the use of trace and\nuntrace in an interactive session to debug an incorrect\nprocedure definition.\n\n" "\n\n" "> (define square-minus-one\n\n    (lambda (x)\n\n      (- (* x x) 2)))\n\n> (square-minus-one 3)\n\n7\n\n> (trace square-minus-one * -)\n\n(square-minus-one * -)\n\n> (square-minus-one 3)\n\n|(square-minus-one 3)\n\n| (* 3 3)\n\n| 9\n\n|(- 9 2)\n\n|7\n\n7\n\n> (define square-minus-one\n\n    (lambda (x)\n\n      (- (* x x) 1))) ; change the 2 to 1\n\n> (trace)\n\n(- *)\n\n> (square-minus-one 3)\n\n|(* 3 3)\n\n|9\n\n|(- 9 1)\n\n|8\n\n8\n\n> (untrace square-minus-one)\n\n()\n\n> (untrace * -)\n\n(- *)\n\n> (square-minus-one 3)\n\n8\n" "The first call to square-minus-one indicates there is an error,\nthe second (traced) call indicates the step at which the error occurs,\nthe third call demonstrates that the fix works,\nand the fourth call demonstrates that\nuntrace does not wipe out the fix.\n\n\n") ("debug:s11" "\n\n\nthread parameter: trace-output-port\n\nlibraries: (chezscheme)\n\n" "trace-output-port is a parameter that determines the\noutput port to which tracing information is sent.\nWhen called with no arguments, trace-output-port returns the\ncurrent trace output port.\nWhen called with one argument, which must be a textual output port,\ntrace-output-port changes the value of the current\ntrace output port.\n\n\n") ("debug:s12" "\n\n\nthread parameter: trace-print\n\nlibraries: (chezscheme)\n\n" "The value of trace-print must be a procedure of two arguments,\nan object and an output port.\nThe trace package uses the value of trace-print to print the\narguments and return values for each call to a traced procedure.\ntrace-print is set to pretty-print by default.\n\n" "\nThe trace package sets\npretty-initial-indent\nto an appropriate value for the current nesting level before calling\nthe value of trace-print so that multiline output can be\nindented properly.\n\n\n") ("debug:s14" "\n\n\nsyntax: (trace-define var expr)\n\n\nsyntax: (trace-define (var . idspec) body1 body2 ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "trace-define is a convenient shorthand for defining variables bound\nto traced procedures of the same name.\nThe first form is equivalent to\n\n" "\n\n" "(define var\n\n  (let ([x expr])\n\n    (trace-lambda var args\n\n      (apply x args))))\n" "and the second is equivalent to\n\n" "\n\n" "(define var\n\n  (trace-lambda var idspec\n\n    body1 body2 ...))\n" "In the former case, expr must evaluate to a procedure.\n\n" "\n\n" "> (let ()\n\n    (trace-define plus\n\n      (lambda (x y) \n\n        (+ x y)))\n\n    (list (plus 3 4) (+ 5 6)))\n\n|(plus 3 4)\n\n|7\n\n(7 11)\n") ("debug:s15" "\n\nsyntax: (trace-define-syntax keyword expr)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "trace-define-syntax traces the input and output to the\ntransformer value of expr, stripped of the contextual\ninformation used by the expander to maintain lexical scoping.\n\n" "\n\n" "> (trace-define-syntax let*\n\n    (syntax-rules ()\n\n      [(_ () b1 b2 ...)\n\n       (let () b1 b2 ...)]\n\n      [(_ ((x e) m ...) b1 b2 ...)\n\n       (let ((x e))\n\n         (let* (m ...) b1 b2 ...))]))\n\n> (let* ([x 3] [y (+ x x)]) (list x y))\n\n|(let* (let* [(x 3) (y (+ x x))] [list x y]))\n\n|(let ([x 3]) (let* ([y (+ x x)]) (list x y)))\n\n|(let* (let* [(y (+ x x))] [list x y]))\n\n|(let ([y (+ x x)]) (let* () (list x y)))\n\n|(let* (let* () [list x y]))\n\n|(let () (list x y))\n\n(3 6)\n" "Without contextual information, the displayed forms are more readable\nbut less precise, since different identifiers with the same name are\nindistinguishable, as shown in the example below.\n\n" "\n\n" "> (let ([x 0])\n\n    (trace-define-syntax a\n\n      (syntax-rules ()\n\n        [(_ y) (eq? x y)]))\n\n    (let ([x 1])\n\n      (a x)))\n\n|(a (a x))\n\n|(eq? x x)\n\n#f\n") ("debug:s16" "\n\n\nprocedure: (debug)\n\nreturns: does not return\n\nlibraries: (chezscheme)\n\n" "When the default exception handler receives a serious or non-warning\ncondition, it displays the condition and resets to the current caf.\nBefore it resets, it saves the condition in the parameter\ndebug-condition.\nThe debug procedure may be used to inspect the condition.\nWhenever one of the built-in error-reporting mechanisms is used to\nraise an exception, the continuation at the point where the\nexception was raised can be inspected as well.\nMore generally, debug allows the continuation contained\nwithin any continuation condition created by\nmake-continuation-condition to be inspected.\n\n" "\nIf the parameter debug-on-exception is set to #t,\nthe default exception handler enters the debugger directly for all\nserious and non-warning conditions, delaying its reset until after\nthe debugger exits.\nThe --debug-on-exception\ncommand-line option may be used to set debug-on-exception to\n#t from the command line, which is particularly useful when\ndebugging scripts or top-level programs run via the\n--script or\n--program\ncommand-line options.\n\n\n\n") ("debug:s22" "\n\n\nprocedure: (inspect obj)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "Invokes the inspector on obj, as described above.\nThe commands recognized by the inspector are listed below, categorized\nby the type of the current object.\n\n\n" "\n\n\n\n" "\n" "Generally applicable commands" "" "help or h displays a brief description of how to use the\ninspector.\n\n" "\n" "? displays commands applicable to the current type of\nobject.\n\n" "\n" "?? displays the generally applicable commands.\n\n" "\n" "print or p prints the current object (using pretty-print).\n\n" "\n" "write or w writes the current object (using write).\n\n" "\n" "size writes the size in bytes occupied by the current object\n(determined via compute-size),\nincluding any objects accessible from the current object except those\nfor which the size was previously requested during the same interactive\ninspector session.\n\n" "\n" "find expr [ g ] evaluates expr, which should evaluate\nto a procedure of one argument, and searches\n(via make-object-finder)\nfor the first occurrence\nof an object within the current object for which the predicate returns\na true value, treating immediate values (e.g., fixnums), values in\ngenerations older than g, and values already visited during the\nsearch as leaves.\nIf g is not unspecified, it defaults to the current maximum\ngeneration, i.e., the value of collect-maximum-generation.\nIf specified, g must be an exact nonnegative integer less than or\nequal to the current maximum generation or the symbol static\nrepresenting the static generation.\nIf such an object is found, the inspector's focus moves to that object\nas if through a series of steps that lead from the current object to the\nlocated object, so that the up command can be used to determine\nwhere the object was found relative to the original object.\n\n" "\n" "find-next repeats the last find, locating an\noccurrence not previously found, if any.\n\n" "\n" "up or u n returns to the nth previous level.\nUsed to move outwards in the structure of the inspected object.\nn defaults to 1.\n\n" "\n" "top or t returns to the outermost level of the inspected\nobject.\n\n" "\n" "forward or f moves to the nth next expression.\nUsed to move from one element to another of an object containing\na sequence of elements, such as a list, vector, record, frame, or closure.\nn defaults to 1.\n\n" "\n" "back or b moves to the nth previous expression.\nUsed to move from one element to another of an object containing\na sequence of elements, such as a list, vector, record, frame, or closure.\nn defaults to 1.\n\n" "\n" "=> expr sends the current object to the procedure value\nof expr.\nexpr may begin on the current or following line and may\nspan multiple lines.\n\n" "\n" "file path opens the source file at the specified path for\nlisting.\nThe parameter source-directories (Section 12.5)\ndetermines the set of directories\nsearched for source files.\n\n" "\n" "list line count lists count lines of the\ncurrent source file (see file) starting at line.\nline defaults to the end of the previous set of lines listed and\ncount defaults to ten or the number of lines previously listed.\nIf line is negative, listing begins line lines before the\nprevious set of lines listed.\n\n" "\n" "files shows the currently open source files.\n\n" "\n" "mark or m m marks the current location with the\nsymbolic mark m.\nIf m is not specified, the current location is marked with\na unique default mark.\n\n" "\n" "goto or g m returns to the location marked m.\nIf m is not specified, the inspector returns to the location\nmarked with the default mark.\n\n" "\n" "new-cafe or n enters a new read-eval-print loop\n(caf), giving access to the normal top-level environment.\n\n" "\n" "quit or q exits from the inspector.\n\n" "\n" "reset or r resets to the current caf.\n\n" "\n" "abort or a x aborts from Scheme with exit\nstatus x, which defaults to -1.\n\n\n" "\n" "Continuation commands" "" "show-frames or sf shows the next n frames.\nIf n is not specified, all frames are displayed.\n\n" "\n" "depth displays the number of frames in the continuation.\n\n" "\n" "down or d n move to the nth frame down in the\ncontinuation.\nn defaults to 1.\n\n" "\n" "show or s shows the continuation (next frame) and,\nif available, the calling procedure source, the pending call source,\nthe closure, and the frame and free-variable values.\nSource is available only if generation of inspector information\nwas enabled during compilation of the corresponding lambda\nexpression.\n\n" "\n" "show-local or sl is like show or s\nexcept that free variable values are not shown.  (If present, free variable\nvalues can be found by inspecting the closure.)\n\n" "\n" "length or l displays the number of elements\nin the topmost frame of the continuation.\n\n" "\n" "ref or r moves to the nth or named\nframe element.  n defaults to 0.\nIf multiple elements have the same name, only one is\naccessible by name, and the others must be accessed by number.\n\n" "\n" "code or c moves to the source for the calling procedure.\n\n" "\n" "call moves to the source for the pending call.\n\n" "\n" "file opens the source file containing the pending call,\nif known.\nThe parameter source-directories (Section 12.5)\ndetermines the list of source directories searched for source files\nidentified by relative path names.\n\n" "\nFor absolute pathnames starting with a / (or \\ or a\ndirectory specifier under Windows), the inspector tries the absolute\npathname first, then looks for the last (filename) component of the path in\nthe list of source directories. \nFor pathnames starting with  (or .\\ under Windows)\nor ../ (or ..\\ under Windows), the inspector looks in\n\".\" or \"..\" first, as appropriate, then for the entire\n.- or ..-prefixed\npathname in the source directories, then for the last (filename)\ncomponent in the source directories.\nFor other (relative) pathnames, the inspector looks for the entire\nrelative pathname in the list of source directories, then the last\n(filename) component in the list of source directories. \n\n" "\nIf a file by the same name as but different contents from the original\nsource file is found during this process, it will be skipped over.\nThis typically happens because the file has been modified since it was\ncompiled.\nPass an explicit filename argument to force opening of a particular file\n(see the generally applicable commands above).\n\n\n\n" "\n" "eval or e expr evaluates the expression\nexpr in an environment containing bindings for the elements of\nthe frame.  Within the evaluated expression, the value of each frame\nelement n is accessible via the variable %n.\nNamed elements are accessible via their names as well.  Names are\navailable only if generation of inspector information was enabled\nduring compilation of the corresponding lambda expression.\n\n" "\n" "set! or ! n e sets the value of the nth frame\nelement to e, if the frame element corresponds to\nan assignable variable.\nn defaults to 0.\n\n\n\n" "\n" "Procedure commands" "" "show or s shows the source and free variables of the\nprocedure.\nSource is available only if generation of inspector information\nwas enabled during compilation of the corresponding lambda\nexpression.\n\n" "\n" "code or c moves to the source for the procedure.\n\n" "\n" "file opens the file containing the procedure's source code,\nif known.\nSee the description of the continuation file entry above for more\ninformation.\n\n" "\n" "length or l displays the number of free variables\nwhose values are recorded in the procedure object.\n\n" "\n" "ref or r moves to the nth or named\nfree variable.  n defaults to 0.\nIf multiple free variables have the same name, only one is\naccessible by name, and the others must be accessed by number.\n\n" "\n" "set! or ! n e sets the value of the nth free variable\nto e, if the variable is assignable.\nn defaults to 0.\n\n" "\n" "eval or e expr evaluates the expression\nexpr in an environment containing bindings for the free variables\nof the procedure.\nWithin the evaluated expression, the value of each free variable\nn is accessible via the variable %n.\nNamed free variables are accessible via their names as well.\nNames are available only if generation of inspector information was\nenabled during compilation of the corresponding lambda expression.\n\n\n" "\n" "Pair (list) commands" "" "show or s n shows the first n elements of the list.\nIf n is not specified, all elements are displayed.\n\n" "\n" "length or l displays the list length.\n\n" "\n" "car moves to the object in the car of the current object.\n\n" "\n" "cdr moves to the object in the cdr.\n\n" "\n" "ref or r n moves to the nth element of the list.\nn defaults to 0.\n\n" "\n" "tail n moves to the nth cdr of the list.\nn defaults to 1.\n\n\n" "\n" "Vector, Bytevector, and Fxvector commands" "" "show or s n shows the first n elements of the vector.\nIf n is not specified, all elements are displayed.\n\n" "\n" "length or l displays the vector length.\n\n" "\n" "ref or r n moves to the nth element of the vector.\nn defaults to 0.\n\n\n" "\n" "String commands" "" "show or s n shows the first n elements of the string.\nIf n is not specified, all elements are displayed.\n\n" "\n" "length or l displays the string length.\n\n" "\n" "ref or r n moves to the nth element of the string.\nn defaults to 0.\n\n" "\n" "unicode n displays the first n elements of the string\nas hexadecimal Unicode scalar values.\n\n" "\n" "ascii n displays the first n elements of the string\nas hexadecimal ASCII values, using -- to denote characters whose Unicode\nscalar values are not in the ASCII range.\n\n\n" "\n" "Symbol commands" "" "show or s shows the fields of the symbol.\n\n" "\n" "value or v moves to the top-level value of the symbol.\n\n" "\n" "name or n moves to the name of the symbol.\n\n" "\n" "property-list or pl moves to the property list\nof the symbol.\n\n" "\n" "ref or r n moves to the nth field of the symbol.\nField 0 is the top-level value of the symbol, field 1 \nis the symbol's name, and field 2 is its property list.\nn defaults to 0.\n\n\n\n\n" "\n" "Character commands" "" "unicode displays the hexadecimal Unicode scalar value for\nthe character.\n\n" "\n" "ascii displays the hexadecimal ASCII code for the character,\nusing -- to denote characters whose Unicode scalar values are not\nin the ASCII range.\n\n\n" "\n" "Box commands" "" "show or s shows the contents of the box.\n\n" "\n" "unbox or ref or r moves to the boxed object.\n\n\n" "\n" "Port commands" "" "show or s shows the fields of the port, including\nthe input and output size, index, and buffer fields.\n\n" "\n" "name moves to the port's name.\n\n" "\n" "handler moves to the port's handler.\n\n" "\n" "output-buffer or ob moves to the port's output buffer.\n\n" "\n" "input-buffer or ib moves to the port's input buffer.\n\n\n\n" "\n" "Record commands" "" "show or s shows the contents of the record.\n\n" "\n" "fields moves to the list of field names\nof the record.\n\n" "\n" "name moves to the name of the record.\n\n" "\n" "rtd moves to the record-type descriptor of the record.\n\n" "\n" "ref or r name moves to the named field of the\nrecord, if accessible.\n\n" "\n" "set! or ! name value sets the value\nof the named field of the record, if mutable.\n\n\n" "\n" "Transport Link Cell (TLC) commands" "" "show or s shows the fields of the TLC.\n\n" "\n" "keyval moves to the keyval of the TLC.\n\n" "\n" "tconc moves to the tconc of the TLC.\n\n" "\n" "next moves to the next link of the TLC.\n\n" "\n" "ref or r n moves to the nth field of the symbol.\nField 0 is the keyval, field 1 the tconc, and field 2 the next link.\nn defaults to 0.\n\n\n") ("debug:s25" "\n\n\nprocedure: (inspect/object object)\n\nreturns: an inspector object procedure\n\nlibraries: (chezscheme)\n\n" "inspect/object is used to turn an ordinary Scheme object into an\ninspector object.\nAll inspector objects accept the messages type, print,\nwrite, and size.\nThe type message returns a symbolic representation of the type of\nthe object.\nThe print and write messages must be accompanied by a port\nparameter.\nThey cause a representation of the object to be written to the port,\nusing the Scheme procedures pretty-print and write.\nThe size message returns a fixnum representing the size\nin bytes occupied by the object, including any objects accessible\nfrom the current object except those for which the size was already\nrequested via an inspector object derived from the argument of the\nsame inspect/object call.\n\n" "\nAll inspector objects except for variable inspector objects accept\nthe message value, which returns the actual object encapsulated\nin the inspector object.\n\n" "\n\n" "(define x (inspect/object '(1 2 3)))\n\n(x 'type) --> pair\n\n(define p (open-output-string))\n\n(x 'write p)\n\n(get-output-string p) --> \"(1 2 3)\"\n\n(x 'length) --> (proper 3)\n\n(define y (x 'car))\n\n(y 'type) --> simple\n\n(y 'value) --> 1\n" "\n\n" "\n\n\n" "\n" "Pair inspector objects.\nPair inspector objects contain Scheme pairs.\n\n" "\n" "(pair-object 'type)\nreturns the symbol pair.\n\n" "\n" "(pair-object 'car)\nreturns an inspector object containing the \"car\" field of the pair.\n\n" "\n" "(pair-object 'cdr)\nreturns an inspector object containing the \"cdr\" field of the pair.\n\n" "\n" "(pair-object 'length)\nreturns a list of the form (type count).\nThe type field contains the symbol proper, the symbol improper, or\nthe symbol circular, depending on the structure of the list.\nThe count field contains the number of distinct pairs in the list.\n\n" "\n" "Box inspector objects.\nBox inspector objects contain Chez Scheme boxes.\n\n" "\n" "(box-object 'type)\nreturns the symbol box.\n\n" "\n" "(box-object 'unbox)\nreturns an inspector object containing the contents of the box.\n\n" "\n" "TLC inspector objects.\nBox inspector objects contain Chez Scheme boxes.\n\n" "\n" "(tlc-object 'type)\nreturns the symbol tlc.\n\n" "\n" "(tlc-object 'keyval)\nreturns an inspector object containing the TLC's keyval.\n\n" "\n" "(tlc-object 'tconc)\nreturns an inspector object containing the TLC's tconc.\n\n" "\n" "(tlc-object 'next)\nreturns an inspector object containing the TLC's next link.\n\n" "\n" "Vector, String, Bytevector, and Fxvector inspector objects.\nVector (bytevector, string, fxvector) inspector objects contain Scheme\nvectors (bytevectors, strings, fxvectors).\n\n" "\n" "(vector-object 'type)\nreturns the symbol vector (string, bytevector, fxvector).\n\n" "\n" "(vector-object 'length)\nreturns the number of elements in the vector or string.\n\n" "\n" "(vector-object 'ref n)\nreturns an inspector object containing the nth element of the\nvector or string.\n\n" "\n" "Simple inspector objects.\nSimple inspector objects contain unstructured, unmodifiable objects.\nThese include numbers, booleans, the empty list, the end-of-file\nobject, and the void object.\nThey may be examined directly by asking for the value of the object.\n\n" "\n" "(simple-object 'type)\nreturns the symbol simple.\n\n" "\n" "Unbound inspector objects.\nAlthough unbound objects are not normally accessible to Scheme programs,\nthey may be encountered when inspecting variables.\n\n" "\n" "(unbound-object 'type)\nreturns the symbol unbound.\n\n" "\n" "Procedure inspector objects.\nProcedure inspector objects contain Scheme procedures.\n\n" "\n" "(procedure-object 'type)\nreturns the symbol procedure.\n\n" "\n" "(procedure-object 'length)\nreturns the number of free variables.\n\n" "\n" "(procedure-object 'ref n)\nreturns an inspector object containing the nth free variable of the\nprocedure.\nSee the description below of variable inspector objects.\nn must be nonnegative and less than the length of the procedure.\n\n" "\n" "(procedure-object 'eval expr)\nevaluates expr and returns its value.\nThe values of the procedure's free variables are bound within the\nevaluated expression to\nidentifiers of the form %n, where n is the location number\ndisplayed by the inspector.\nThe values of named variables are also bound to their names.\n\n" "\n" "(procedure-object 'code)\nreturns an inspector object containing the procedure's code object.\nSee the description below of code inspector objects.\n\n\n" "\n" "Continuation inspector objects.\nContinuations created by call/cc are actually\nprocedures.\nHowever, when inspecting such a procedure the underlying data structure\nthat embodies the continuation may be exposed.\nA continuation structure contains the location at which computation is\nto resume, the variable values necessary to perform the computation,\nand a link to the next continuation.\n\n" "\n" "(continuation-object 'type)\nreturns the symbol continuation.\n\n" "\n" "(continuation-object 'length)\nreturns the number of free variables.\n\n" "\n" "(continuation-object 'ref n)\nreturns an inspector object containing the nth free variable of the\ncontinuation.\nSee the description below of variable inspector objects.\nn must be nonnegative and less than the length of the continuation.\n\n" "\n" "(continuation-object 'eval expr)\nevaluates expr and returns its value.\nThe values of frame locations are bound within the\nevaluated expression to\nidentifiers of the form %n, where n is the location number\ndisplayed by the inspector.\nThe values of named locations are also bound to their names.\n\n" "\n" "(continuation-object 'code)\nreturns an inspector object containing the code object for the procedure\nthat was active when the current continuation frame was created.\nSee the description below of code inspector objects.\n\n" "\n" "(continuation-object 'depth)\nreturns the number of frames in the continuation.\n\n" "\n" "(continuation-object 'link)\nreturns an inspector object containing the next continuation frame.\nThe depth must be greater than 1.\n\n" "\n" "(continuation-object 'link* n)\nreturns an inspector object containing the nth continuation link.\nn must be less than the depth.\n\n" "\n" "(continuation-object 'source)\nreturns an inspector object containing the source information attached\nto the continuation (representing the source for the application that\nresulted in the formation of the continuation)\nor #f if no source information is attached.\n\n" "\n" "(continuation-object 'source-object)\nreturns an inspector object containing the source object for the\nprocedure application that resulted in the formation of the continuation\nor #f if no source object is attached.\n\n" "\n" "(continuation-object 'source-path)\nattempts to find the pathname of the file containing the source for\nthe procedure application that resulted in the formation of the continuation.\nIf successful, three values are returned to identify the file and position\nof the application within the file: path, line, and char.\nTwo values, a file name and an absolute character position, are returned\nif the file name is known but the named file cannot be found.\nThe search may be unsuccessful even if a file by the expected\nname is found in the path if the file has been modified since the source\ncode was compiled.\nIf no file name is known, no values are returned.\nThe parameter source-directories (Section 12.5)\ndetermines the set of directories\nsearched for source files identified by relative path names.\n\n\n" "\n" "Code inspector objects.\nCode inspector objects contain Chez Scheme code objects.\n\n" "\n" "(code-object 'type)\nreturns the symbol code.\n\n" "\n" "(code-object 'name)\nreturns a string or #f.\nThe name associated with a code inspector object is the name of the\nvariable to which the procedure was originally bound or assigned.\nSince the binding of a variable can be changed, this name association\nmay not always be accurate.\n#f is returned if the inspector cannot determine a name for the\nprocedure.\n\n" "\n" "(code-object 'source)\nreturns an inspector object containing the source information attached\nto the code object or #f if no source information is attached.\n\n" "\n" "(continuation-object 'source-object)\nreturns an inspector object containing the source object for the\ncode object or #f if no source object is attached.\n\n" "\n" "(code-object 'source-path)\nattempts to find the pathname of the file containing the source for\nthe lambda expression that produced the code object.\nIf successful, three values are returned to identify the file and position\nof the application within the file: path, line, and char.\nTwo values, a file name and an absolute character position, are returned\nif the file name is known but the named file cannot be found.\nThe search may be unsuccessful even if a file by the expected\nname is found in the path if the file has been modified since the source\ncode was compiled.\nIf no file name is known, no values are returned.\nThe parameter source-directories (Section 12.5)\ndetermines the set of directories\nsearched for source files identified by relative path names.\n\n" "\n" "(code-object 'free-count)\nreturns the number of free variables in any procedure for which this is\nthe corresponding code.\n\n\n" "\n" "Variable inspector objects.\nVariable inspector objects encapsulate variable bindings.\nAlthough the actual underlying representation varies, the variable\ninspector object provides a uniform interface.\n\n" "\n" "(variable-object 'type)\nreturns the symbol variable.\n\n" "\n" "(variable-object 'name)\nreturns a symbol or #f.\n#f is returned if the name is not available or if the variable is a\ncompiler-generated temporary variable.\nVariable names are not retained when the parameter\ngenerate-inspector-information\n(page 12.6)\nis false during compilation.\n\n" "\n" "(variable-object 'ref)\nreturns an inspector object containing the current value of the\nvariable.\n\n" "\n" "(variable-object 'set! e)\nreturns unspecified, after setting the current value of the\nvariable to e.\nAn exception is raised with condition type &assertion if the variable is not assignable.\n\n\n\n" "\n" "Port inspector objects.\nPort inspector objects contain ports.\n\n" "\n" "(port-object 'type)\nreturns the symbol port.\n\n" "\n" "(port-object 'input?)\nreturns #t if the port is an input port, #f otherwise.\n\n" "\n" "(port-object 'output?)\nreturns #t if the port is an output port, #f otherwise.\n\n" "\n" "(port-object 'binary?)\nreturns #t if the port is a binary port, #f otherwise.\n\n" "\n" "(port-object 'closed?)\nreturns #t if the port is closed, #f if the port is open.\n\n" "\n" "(port-object 'name)\nreturns an inspector object containing the port's name.\n\n" "\n" "(port-object 'handler)\nreturns a procedure inspector object encapsulating the port handler,\nsuch as would be returned by port-handler.\n\n" "\n" "(port-object 'output-size)\nreturns the output buffer size as a fixnum if the port is an\noutput port (otherwise the value is unspecified).\n\n" "\n" "(port-object 'output-index)\nreturns the output buffer index as a fixnum if the port is an\noutput port (otherwise the value is unspecified).\n\n" "\n" "(port-object 'output-buffer)\nreturns an inspector object containing the string used for buffered\noutput.\n\n" "\n" "(port-object 'input-size)\nreturns the input buffer size as a fixnum if the port is an\ninput port (otherwise the value is unspecified).\n\n" "\n" "(port-object 'input-index)\nreturns the input buffer index as a fixnum if the port is an\ninput port (otherwise the value is unspecified).\n\n" "\n" "(port-object 'input-buffer)\nreturns an inspector object containing the string used for buffered\ninput.\n\n\n" "\n" "Symbol inspector objects.\nSymbol inspector objects contain symbols.\nThese include gensyms.\n\n" "\n" "(symbol-object 'type)\nreturns the symbol symbol.\n\n" "\n" "(symbol-object 'name)\nreturns a string inspector object.\nThe string name associated with a symbol inspector object is the print\nrepresentation of a symbol, such as would be returned by the procedure\nsymbol->string.\n\n" "\n" "(symbol-object 'gensym?)\nreturns #t if the symbol is a gensym, #f otherwise.\nGensyms are created by gensym.\n\n" "\n" "(symbol-object 'top-level-value)\nreturns an inspector object containing the global value of the symbol.\n\n" "\n" "(symbol-object 'property-list)\nreturns an inspector object containing the property list for the\nsymbol.\n\n\n\n" "\n" "Record inspector objects.\nRecord inspector objects contain records.\n\n" "\n" "(record-object 'type)\nreturns the symbol record.\n\n" "\n" "(record-object 'name)\nreturns a string inspector object corresponding to the name of\nthe record type.\n\n" "\n" "(record-object 'fields)\nreturns an inspector object containing a list of the field names of\nthe record type.\n\n" "\n" "(record-object 'length)\nreturns the number of fields.\n\n" "\n" "(record-object 'rtd)\nreturns an inspector object containing the record-type descriptor of the\nrecord type.\n\n" "\n" "(record-object 'accessible? name)\nreturns #t if the named field is accessible, #f otherwise.\nA field may be inaccessible if optimized away by the compiler.\n\n" "\n" "(record-object 'ref name)\nreturns an inspector object containing the value of the named field.\nAn exception is raised with condition type &assertion if the named field is not accessible.\n\n" "\n" "(record-object 'mutable? name)\nreturns #t if the named field is mutable, #f otherwise.\nA field is immutable if it is not declared mutable or if the compiler\noptimizes away all assignments to the field.\n\n" "\n" "(record-object 'set! name value)\nsets the value of the named field to value.\nAn exception is raised with condition type &assertion if the named field is not assignable.\n\n") ("debug:s26" "\n\n\nprocedure: (make-object-finder pred)\n\n\nprocedure: (make-object-finder pred g)\n\n\nprocedure: (make-object-finder pred x g)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "The procedure make-object-finder takes a predicate pred and two optional\narguments: a starting point x and a maximum generation g.\nThe starting point defaults to the value of the procedure oblist,\nand the maximum generation defaults to the value of the parameter\ncollect-maximum-generation.\nmake-object-finder returns an object finder p that can be used to\nsearch for objects satisfying pred within the starting-point object x.\nImmediate objects and objects in generations older than g are treated\nas leaves.\np is a procedure accepting no arguments.\nIf an object y satisfying pred can be found starting with x,\np returns a list whose first element is y and whose remaining\nelements represent the path of objects from x to y, listed\nin reverse order.\np can be invoked multiple times to find additional objects satisfying\nthe predicate, if any.\np returns #f if no more objects matching the predicate\ncan be found.\n\n" "\np maintains internal state recording where it has been so it\ncan restart at the point of the last found object and not return\nthe same object twice.\nThe state can be several times the size of the starting-point object\nx and all that is reachable from x.\n\n" "\nThe interactive inspector provides a convenient interface to the object\nfinder in the form of find and find-next commands.\n\n" "\nRelocation tables for static code objects are discarded by default, which\nprevents object finders from providing accurate results when static code\nobjects are involved.\nThat is, they will not find any objects pointed to directly from a code\nobject that has been promoted to the static generation.\nIf this is a problem, the command-line argument\n--retain-static-relocation\ncan be used to prevent the relocation tables from being discarded.\n\n\n") ("debug:s30" "\n\n\nprocedure: (compute-size object)\n\n\nprocedure: (compute-size object generation)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "object can be any object.\ngeneration must be a fixnum between 0 and the value of\ncollect-maximum-generation, inclusive, or the symbol\nstatic.\nIf generation is not supplied, it defaults to the value of\ncollect-maximum-generation.\n\n" "\ncompute-size returns the amount of memory, in bytes, occupied by\nobject and anything reachable from object in any generation\nless than or equal to generation.\nImmediate values such as fixnums, booleans, and characters have zero size.\n\n" "\nThe following examples are valid for machines with 32-bit pointers.\n\n" "\n\n" "(compute-size 0) --> 0\n\n(compute-size (cons 0 0)) --> 8\n\n(compute-size (cons (vector #t #f) 0)) --> 24\n\n\n(compute-size\n\n  (let ([x (cons 0 0)])\n\n    (set-car! x x)\n\n    (set-cdr! x x)\n\n    x))                  --> 8\n\n\n(define-record-type frob (fields x))\n\n(collect 1 1) ; force rtd into generation 1\n\n(compute-size\n\n  (let ([x (make-frob 0)])\n\n    (cons x x))\n\n  0)                       --> 16\n") ("debug:s31" "\n\nprocedure: (compute-composition object)\n\n\nprocedure: (compute-composition object generation)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "object can be any object.\ngeneration must be a fixnum between 0 and the value of\ncollect-maximum-generation, inclusive, or the symbol\nstatic.\nIf generation is not supplied, it defaults to the value of\ncollect-maximum-generation.\n\n" "\ncompute-composition returns an association list representing\nthe composition of object, including anything reachable from it\nin any generation less than or equal to generation.\nThe association list has the following structure:\n\n" "\n\n" "((type count . bytes) ...)\n" "type is either the name of a primitive type, represented as a\nsymbol, e.g., pair, or a record-type descriptor (rtd).\ncount and bytes are nonnegative fixnums.\n\n" "\nImmediate values such as fixnums, booleans, and characters are not\nincluded in the composition.\n\n" "\nThe following examples are valid for machines with 32-bit pointers.\n\n" "\n\n" "(compute-composition 0) --> ()\n\n(compute-composition (cons 0 0)) --> ((pair 1 . 8))\n\n(compute-composition\n\n  (cons (vector #t #f) 0)) --> ((pair 1 . 8) (vector 1 . 16))\n\n\n(compute-composition\n\n  (let ([x (cons 0 0)])\n\n    (set-car! x x)\n\n    (set-cdr! x x)\n\n    x))                 --> ((pair 1 . 8)\n\n\n(define-record-type frob (fields x))\n\n(collect 1 1) ; force rtd into generation 1\n\n(compute-composition\n\n  (let ([x (make-frob 0)])\n\n    (cons x x))\n\n  0)                       --> ((pair 1 . 8)\n\n                                (#<record type frob> 1 . 8))\n") ("binding:s15" "\n\n\nthread parameter: internal-defines-as-letrec*\n\nlibraries: (chezscheme)\n\n" "When this parameter is set to #t (the default), internal variable\ndefinitions are evaluated using letrec* semantics.\nIt may be set to #f to revert to the letrec semantics\nfor internal variable definitions, for backward compatibility.\n\n\n") ("binding:s16" "\n\n\nsyntax: (define-values formals expr)\n\nlibraries: (chezscheme)\n\n" "A define-values form is a definition and can appear anywhere\nother definitions can appear.\nIt is like a define form but permits an arbitrary formals list\n(like lambda) on the left-hand side.\nIt evaluates expr and binds the variables appearing in formals\nto the resulting values, in the same manner as the formal parameters of a\nprocedure are bound to its arguments.\n\n" "\n\n" "(let ()\n\n  (define-values (x y) (values 1 2))\n\n  (list x y)) --> (1 2)\n\n(let ()\n\n  (define-values (x y . z) (values 1 2 3 4))\n\n  (list x y z)) --> (1 2 (3 4))\n" "A define-values form expands into a sequence of definitions, the\nfirst for a hidden temporary bound to a data structure holding the values\nreturned by expr and the remainder binding each of the formals to\nthe corresponding value or list of values, extracted from the data\nstructure via a reference to the temporary.\nBecause the temporary must be defined before the other variables are\ndefined, this works for internal define-values forms only if\ninternal-defines-as-letrec* is set to the default value\n#t.\n\n\n") ("binding:s17" "\n\n\nsyntax: (rec var expr)\n\nreturns: value of expr\n\nlibraries: (chezscheme)\n\n" "The syntactic form rec creates a recursive object from expr by\nestablishing a binding of var within expr to the value of expr.\nIn essence, it is a special case of letrec for self-recursive objects.\n\n" "\nThis form is useful for creating recursive objects (especially procedures)\nthat do not depend on external variables for the recursion, which are\nsometimes undesirable because the external bindings can change.\nFor example, a recursive procedure defined at top level depends on the value\nof the top-level variable given as its name.\nIf the value of this variable should change, the meaning of the procedure\nitself would change.\nIf the procedure is defined instead with rec, its meaning is independent\nof the variable to which it is bound.\n\n" "\n\n" "(map (rec sum\n\n       (lambda (x)\n\n         (if (= x 0)\n\n             0\n\n             (+ x (sum (- x 1))))))\n\n     '(0 1 2 3 4 5)) --> (0 1 3 6 10 15)\n\n\n(define cycle\n\n  (rec self\n\n    (list (lambda () self))))\n\n\n(eq? ((car cycle)) cycle) --> #t\n" "The definition below expands rec in terms of letrec.\n\n" "\n\n" "(define-syntax rec\n\n  (syntax-rules ()\n\n    [(_ x e) (letrec ((x e)) x)]))\n") ("binding:s19" "\n\n\nsyntax: (fluid-let ((var expr) ...) body1 body2 ...)\n\nreturns: the values of the body body1 body2 ...\n\nlibraries: (chezscheme)\n\n" "The syntactic form fluid-let\nprovides a way to temporarily assign values to a set of variables.\nThe new values are in effect only during the evaluation of the\nbody of the fluid-let expression.\nThe scopes of the variables are not determined by fluid-let; as with\nset!, the variables must be bound at top level or by an enclosing\nlambda or other binding form.\nIt is possible, therefore, to control the scope of a variable with\nlambda or let while establishing a temporary\nvalue with fluid-let.\n\n" "\nAlthough it is similar in appearance to let, its operation is more\nlike that of set!.\nEach var is assigned, as with set!, to the value of the\ncorresponding expr within the body body1 body2 ....\nShould the body\nexit normally or by invoking a continuation made outside of the body\n(see call/cc), the values in effect before the bindings were changed\nare restored.\nShould control return back to the body by the invocation of a continuation\ncreated within the body, the bindings are changed once again to the values\nin effect when the body last exited.\n\n" "\nFluid bindings are most useful for\nmaintaining variables that must be shared by a group of procedures.\nUpon entry to the group of procedures, the shared variables are fluidly\nbound to a new set of initial values so that on exit the original values\nare restored automatically.\nIn this way, the group of procedures itself can be reentrant; it may call\nitself directly or indirectly without affecting the values of its shared\nvariables.\n\n" "\nFluid bindings are similar to\nspecial bindings in Common Lisp [citation30], except that\n(1) there is a single namespace for both lexical and fluid bindings, and\n(2) the scope of a fluidly bound variable is not necessarily global.\n\n" "\n\n" "(let ([x 3])\n\n  (+ (fluid-let ([x 5])\n\n       x)\n\n     x)) --> 8\n\n\n(let ([x 'a])\n\n  (letrec ([f (lambda (y) (cons x y))])\n\n    (fluid-let ([x 'b])\n\n      (f 'c)))) --> (b . c)\n\n\n(let ([x 'a])\n\n  (call/cc\n\n    (lambda (k)\n\n       (fluid-let ([x 'b])\n\n         (letrec ([f (lambda (y) (k '*))])\n\n           (f '*)))))\n\n  x) --> a\n" "fluid-let may be defined in terms of dynamic-wind as follows.\n\n" "\n\n" "(define-syntax fluid-letdefn:fluid-let\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ () b1 b2 ...) #'(let () b1 b2 ...)]\n\n      [(_ ((x e) ...) b1 b2 ...)\n\n       (andmap identifier? #'(x ...))\n\n       (with-syntax ([(y ...) (generate-temporaries #'(x ...))])\n\n         #'(let ([y e] ...)\n\n             (let ([swap (lambda ()\n\n                           (let ([t x]) (set! x y) (set! y t))\n\n                           ...)])\n\n               (dynamic-wind swap (lambda () b1 b2 ...) swap))))])))\n") ("binding:s24" "\n\n\nprocedure: (define-top-level-value symbol obj)\n\n\nprocedure: (define-top-level-value symbol obj env)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "define-top-level-value is used to establish a binding\nfor the variable named by symbol to the value obj\nin the environment env.\nIf env is not provided, it defaults to the\nvalue of interaction-environment, i.e., the\ntop-level evaluation environment\n(Section 12.3).\n\n" "\nAn exception is raised with condition type &assertion if\nenv is not mutable.\n\n" "\nA call to define-top-level-value is similar to a top-level\ndefine form, except that a call to\ndefine-top-level-value need not occur at top-level and\nthe variable for which the binding is to be established can be\ndetermined at run time, as can the environment.\n\n" "\n\n" "(begin\n\n  (define-top-level-value 'xyz \"hi\")\n\n  xyz) --> \"hi\"\n\n\n(let ([var 'xyz])\n\n  (define-top-level-value var \"mom\")\n\n  (list var xyz)) --> (xyz \"mom\")\n") ("binding:s26" "\n\nprocedure: (set-top-level-value! symbol obj)\n\n\nprocedure: (set-top-level-value! symbol obj env)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "set-top-level-value! assigns \nthe variable named by symbol to the value obj\nin the environment env.\nIf env is not provided, it defaults to the\nvalue of interaction-environment, i.e., the\ntop-level evaluation environment\n(Section 12.3).\n\n" "\nAn exception is raised with condition type &assertion if the\nidentifier named by symbol is not defined as a variable in env\nor if the variable or environment is not mutable.\n\n" "\nset-top-level-value! is similar to\nset! when set!\nis used on top-level variables except that the variable to be assigned\ncan be determined at run time, as can the environment.\n\n" "\n\n" "(let ([v (let ([cons list])\n\n           (set-top-level-value! 'cons +)\n\n           (cons 3 4))])\n\n  (list v (cons 3 4))) --> ((3 4) 7)\n") ("binding:s29" "\n\nprocedure: (top-level-value symbol)\n\n\nprocedure: (top-level-value symbol env)\n\nreturns: the top-level value of the variable named by symbol in env\n\nlibraries: (chezscheme)\n\n" "If env is not provided, it defaults to the\nvalue of interaction-environment, i.e., the\ntop-level evaluation environment\n(Section 12.3).\n\n" "\nAn exception is raised with condition type &assertion if the\nidentifier named by symbol is not defined as a variable in env.\n\n" "\ntop-level-value is similar to a top-level variable reference\nexcept that the variable to be referenced can be determined at run time,\nas can the environment.\n\n" "\n\n" "(let ([cons +])\n\n  (list (cons 3 4)\n\n        ((top-level-value 'cons) 3 4))) --> (7 (3 . 4))\n\n\n(define e (copy-environment (scheme-environment)))\n\n(define-top-level-value 'pi 3.14 e)\n\n(top-level-value 'pi e) --> 3.14\n\n(set-top-level-value! 'pi 3.1416 e)\n\n(top-level-value 'pi e) --> 3.1416\n") ("binding:s30" "\n\nprocedure: (top-level-bound? symbol)\n\n\nprocedure: (top-level-bound? symbol env)\n\nreturns: #t if symbol is defined as a variable in env, #f otherwise\n\nlibraries: (chezscheme)\n\n" "If env is not provided, it defaults to the\nvalue of interaction-environment, i.e., the\ntop-level evaluation environment\n(Section 12.3).\n\n" "\nThis predicate is useful in an interpreter to check for the existence of\na top-level binding before requesting the value with\ntop-level-value.\n\n" "\n\n" "(top-level-bound? 'xyz) --> #f\n\n\n(begin\n\n  (define-top-level-value 'xyz 3)\n\n  (top-level-bound? 'xyz)) --> #t\n\n\n(define e (copy-environment (interaction-environment)))\n\n(define-top-level-value 'pi 3.14 e)\n\n(top-level-bound? 'pi) --> #f\n\n(top-level-bound? 'pi e) --> #t\n") ("binding:s31" "\n\nprocedure: (top-level-mutable? symbol)\n\n\nprocedure: (top-level-mutable? symbol env)\n\nreturns: #t if symbol is mutable in env, #f otherwise\n\nlibraries: (chezscheme)\n\n" "If env is not provided, it defaults to the\nvalue of interaction-environment, i.e., the\ntop-level evaluation environment\n(Section 12.3).\n\n" "\nThis predicate is useful in an interpreter to check whether a variable\ncan be assigned before assigning it with\nset-top-level-value!.\n\n" "\n\n" "(define xyz 3)\n\n(top-level-mutable? 'xyz) --> #t\n\n(set-top-level-value! 'xyz 4)\n\n(top-level-value 'xyz) --> 4\n\n\n(define e (copy-environment (interaction-environment) #f))\n\n(top-level-mutable? 'xyz e) --> #f\n\n(set-top-level-value! 'xyz e) --> exception: xyz is immutable\n") ("binding:s32" "\n\nprocedure: (define-top-level-syntax symbol obj)\n\n\nprocedure: (define-top-level-syntax symbol obj env)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "define-top-level-syntax is used to establish a top-level binding\nfor the identifier named by symbol to the value of obj\nin the environment env.\nThe value must be a procedure, the result of a call to\nmake-variable-transformer, or the result of a call to\ntop-level-syntax.\nIf env is not provided, it defaults to the\nvalue of interaction-environment, i.e., the\ntop-level evaluation environment\n(Section 12.3).\n\n" "\nAn exception is raised with condition type &assertion if\nenv is not mutable.\n\n" "\nA call to define-top-level-syntax is similar to a top-level\ndefine-syntax form, except that a call to\ndefine-top-level-syntax need not occur at top-level and\nthe identifier for which the binding is to be established can be\ndetermined at run time, as can the environment.\n\n" "\n\n" "(define-top-level-syntax 'let1\n\n  (syntax-rules ()\n\n    [(_ x e b1 b2 ...) (let ([x e]) b1 b2 ...)]))\n\n(let1 a 3 (+ a 1)) --> 4\n" "define-top-level-syntax can also be used to attach\nto an identifier arbitrary compile-time bindings obtained \nvia top-level-syntax.\n\n") ("binding:s34" "\n\n\nprocedure: (top-level-syntax symbol)\n\n\nprocedure: (top-level-syntax symbol env)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "top-level-syntax is used to retrieve the transformer, compile-time\nvalue, or other compile-time binding to which\nthe identifier named by symbol is bound in the environment env.\nIf env is not provided, it defaults to the\nvalue of interaction-environment, i.e., the\ntop-level evaluation environment\n(Section 12.3).\nAll identifiers bound in an environment have compile-time bindings, including\nvariables.\n\n" "\nAn exception is raised with condition type &assertion if the\nidentifier named by symbol is not defined as a keyword in env.\n\n" "\n\n" "(define-top-level-syntax 'also-let (top-level-syntax 'let))\n\n(also-let ([x 3] [y 4]) (+ x y)) --> 7\n\n\n(define foo 17)\n\n(define-top-level-syntax 'also-foo (top-level-syntax 'foo))\n\nalso-foo --> 17\n\n(set! also-foo 23)\n\nalso-foo --> 23\n\nfoo --> 23\n" "The effect of the last example can be had more clearly with alias:\n\n" "\n\n" "(define foo 17)\n\n(alias also-foo foo)\n\nalso-foo --> 17\n\n(set! also-foo 23)\n\nalso-foo --> 23\n\nfoo --> 23\n") ("binding:s35" "\n\nprocedure: (top-level-syntax? symbol)\n\n\nprocedure: (top-level-syntax? symbol env)\n\nreturns: #t if symbol is bound as a keyword in env, #f otherwise\n\nlibraries: (chezscheme)\n\n" "If env is not provided, it defaults to the\nvalue of interaction-environment, i.e., the\ntop-level evaluation environment\n(Section 12.3).\n\n" "\nAll identifiers bound in an environment have compile-time bindings, including\nvariables, so this predicate amounts to a bound check, but is more general\nthan top-level-bound?, which returns true only for bound variables.\n\n" "\n\n" "(define xyz 'hello)\n\n(top-level-syntax? 'cons) --> #t\n\n(top-level-syntax? 'lambda) --> #t\n\n(top-level-syntax? 'hello) --> #t\n\n\n(top-level-syntax? 'cons (scheme-environment)) --> #t\n\n(top-level-syntax? 'lambda (scheme-environment)) --> #t\n\n(top-level-syntax? 'hello (scheme-environment)) --> #f\n") ("numeric:s11" "\n\n\nprocedure: (bignum? obj)\n\nreturns: #t if obj is a bignum, otherwise #f\n\nlibraries: (chezscheme)\n\n" "\n" "\n(bignum? 0) --> #f\n\n(bignum? (most-positive-fixnum)) --> #f\n\n(bignum? (most-negative-fixnum)) --> #f\n\n(bignum? (* (most-positive-fixnum) 2)) --> #t\n\n(bignum? 3/4) --> #f\n\n(bignum? 'a) --> #f\n") ("numeric:s12" "\n\nprocedure: (ratnum? obj)\n\nreturns: #t if obj is a ratnum, otherwise #f\n\nlibraries: (chezscheme)\n\n" "\n" "\n(ratnum? 0) --> #f\n\n(ratnum? (* (most-positive-fixnum) 2)) --> #f\n\n(ratnum? 3/4) --> #t\n\n(ratnum? -10/2) --> #f\n\n(ratnum? -11/2) --> #t\n\n(ratnum? 'a) --> #f\n") ("numeric:s13" "\n\nprocedure: (cflonum? obj)\n\nreturns: #t if obj is an inexact complexnum or flonum, otherwise #f\n\nlibraries: (chezscheme)\n\n" "\n" "\n(cflonum? 0) --> #f\n\n(cflonum? 0.0) --> #t\n\n(cflonum? 3+4i) --> #f\n\n(cflonum? 3.0+4i) --> #t\n\n(cflonum? +i) --> #f\n\n(cflonum? +1.0i) --> #t\n") ("numeric:s14" "\n\n\nprocedure: (most-positive-fixnum)\n\nreturns: the most positive fixnum supported by the system\n\n\nprocedure: (most-negative-fixnum)\n\nreturns: the most negative fixnum supported by the system\n\nlibraries: (chezscheme)\n\n" "These procedures are identical to the Revised6 Report\ngreatest-fixnum and least-fixnum procedures.\n\n\n") ("numeric:s15" "\n\n\nprocedure: (fx= fixnum1 fixnum2 ...)\n\n\nprocedure: (fx< fixnum1 fixnum2 ...)\n\n\nprocedure: (fx> fixnum1 fixnum2 ...)\n\n\nprocedure: (fx<= fixnum1 fixnum2 ...)\n\n\nprocedure: (fx>= fixnum1 fixnum2 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (chezscheme)\n\n" "The predicate fx= returns #t if its arguments are equal.\nThe predicate fx< returns #t if its arguments are monotonically\nincreasing, i.e., each argument is greater than the preceding ones,\nwhile fx> returns #t if its arguments are monotonically decreasing.\nThe predicate fx<= returns #t if its arguments are monotonically\nnondecreasing, i.e., each argument is not less than the preceding ones,\nwhile fx>= returns #t if its arguments are monotonically nonincreasing.\nWhen passed only one argument, each of these predicates returns #t.\n\n" "\nThese procedures are similar to the Revised6 Report procedures\nfx=?, fx<?, fx>?, fx<=?,\nand fx>=? except that the Revised6 Report procedures\nrequire two or more arguments, and their names have the \"?\"\nsuffix.\n\n" "\n\n" "(fx= 0) --> #t\n\n(fx= 0 0) --> #t\n\n(fx< (most-negative-fixnum) 0 (most-positive-fixnum)) --> #t\n\n(let ([x 3]) (fx<= 0 x 9)) --> #t\n\n(fx<= 0 3 3) --> #t\n\n(fx>= 0 0 (most-negative-fixnum)) --> #t\n") ("numeric:s16" "\n\nprocedure: (fxnonpositive? fixnum)\n\nreturns: #t if fixnum is not greater than zero, #f otherwise\n\n\nprocedure: (fxnonnegative? fixnum)\n\nreturns: #t if fixnum is not less than zero, #f otherwise\n\nlibraries: (chezscheme)\n\n" "fxnonpositive? is equivalent to (lambda (x) (fx<= x 0)),\nand\nfxnonnegative? is equivalent to (lambda (x) (fx>= x 0)).\n\n" "\n\n" "(fxnonpositive? 128) --> #f\n\n(fxnonpositive? 0) --> #t\n\n(fxnonpositive? -1) --> #t\n\n\n(fxnonnegative? -65) --> #f\n\n(fxnonnegative? 0) --> #t\n\n(fxnonnegative? 1) --> #t\n") ("numeric:s17" "\n\nprocedure: (fx+ fixnum ...)\n\nreturns: the sum of the arguments fixnum ...\n\nlibraries: (chezscheme)\n\n" "When called with no arguments, fx+ returns 0.\n\n" "\n\n" "(fx+) --> 0\n\n(fx+ 1 2) --> 3\n\n(fx+ 3 4 5) --> 12\n\n(apply fx+ '(1 2 3 4 5)) --> 15\n") ("numeric:s18" "\n\nprocedure: (fx- fixnum1 fixnum2 ...)\n\nreturns: a fixnum\n\nlibraries: (chezscheme)\n\n" "When called with one argument, fx- returns the negative of fixnum1.\nThus, (fx- fixnum1) is an idiom for (fx- 0 fixnum1).\n\n" "\nWhen called with two or more arguments, fx- returns the result of\nsubtracting the sum of the numbers fixnum2 ... from\nfixnum1.\n\n" "\n\n" "(fx- 3) --> -3\n\n(fx- 4 3) --> 1\n\n(fx- 4 3 2 1) --> -2\n") ("numeric:s19" "\n\nprocedure: (fx* fixnum ...)\n\nreturns: the product of the arguments fixnum ...\n\nlibraries: (chezscheme)\n\n" "When called with no arguments, fx* returns 1.\n\n" "\n\n" "(fx*) --> 1\n\n(fx* 1 2) --> 2\n\n(fx* 3 -4 5) --> -60\n\n(apply fx* '(1 -2 3 -4 5)) --> 120\n") ("numeric:s20" "\n\nprocedure: (fx/ fixnum1 fixnum2 ...)\n\nreturns: see explanation\n\nlibraries: (chezscheme)\n\n" "When called with one argument, fx/ returns the reciprocal\nof fixnum1.\nThat is, (fx/ fixnum1) is an idiom for\n(fx/ 1 fixnum1).\n\n" "\nWhen called with two or more arguments, fx/ returns\nthe result of\ndividing fixnum1 by the product of the remaining arguments\nfixnum2 ....\n\n" "\n\n" "(fx/ 1) --> 1\n\n(fx/ -17) --> 0\n\n(fx/ 8 -2) --> -4\n\n(fx/ -9 2) --> -4\n\n(fx/ 60 5 3 2) --> 2\n") ("numeric:s21" "\n\nprocedure: (fx1+ fixnum)\n\n\nprocedure: (fx1- fixnum)\n\nreturns: fixnum plus 1 or fixnum minus 1\n\nlibraries: (chezscheme)\n\n" "\n" "(define fxplus\n\n  (lambda (x y)\n\n    (if (fxzero? x)\n\n        y\n\n        (fxplus (fx1- x) (fx1+ y)))))\n\n\n(fxplus 7 8) --> 15\n" "fx1+ and fx1- can be defined as follows:\n\n" "\n\n" "(define fx1+ (lambda (x) (fx+ x 1)))\n\n(define fx1- (lambda (x) (fx- x 1)))\n") ("numeric:s22" "\n\nprocedure: (fxquotient fixnum1 fixnum2 ...)\n\nreturns: see explanation\n\nlibraries: (chezscheme)\n\n" "fxquotient is identical to fx/.\nSee the description of fx/ above.\n\n\n") ("numeric:s23" "\n\n\nprocedure: (fxremainder fixnum1 fixnum2)\n\nreturns: the fixnum remainder of fixnum1 divided by fixnum2\n\nlibraries: (chezscheme)\n\n" "The result of fxremainder has the same sign as fixnum1.\n\n" "\n\n" "(fxremainder 16 4) --> 0\n\n(fxremainder 5 2) --> 1\n\n(fxremainder -45 7) --> -3\n\n(fxremainder 10 -3) --> 1\n\n(fxremainder -17 -9) --> -8\n") ("numeric:s24" "\n\nprocedure: (fxmodulo fixnum1 fixnum2)\n\nreturns: the fixnum modulus of fixnum1 and fixnum2\n\nlibraries: (chezscheme)\n\n" "The result of fxmodulo has the same sign as fixnum2.\n\n" "\n\n" "(fxmodulo 16 4) --> 0\n\n(fxmodulo 5 2) --> 1\n\n(fxmodulo -45 7) --> 4\n\n(fxmodulo 10 -3) --> -2\n\n(fxmodulo -17 -9) --> -8\n") ("numeric:s25" "\n\nprocedure: (fxabs fixnum)\n\nreturns: the absolute value of fixnum\n\nlibraries: (chezscheme)\n\n" "\n" "\n(fxabs 1) --> 1\n\n(fxabs -1) --> 1\n\n(fxabs 0) --> 0\n") ("numeric:s26" "\n\n\nprocedure: (flonum->fixnum flonum)\n\nreturns: the fixnum representation of flonum, truncated\n\nlibraries: (chezscheme)\n\n" "The truncated value of flonum must fall within the fixnum range.\nflonum->fixnum is a restricted version of\nexact,\nwhich converts any numeric representation\nto its exact equivalent.\n\n" "\n\n" "(flonum->fixnum 0.0) --> 0\n\n(flonum->fixnum 3.9) --> 3\n\n(flonum->fixnum -2.2) --> -2\n") ("numeric:s28" "\n\nprocedure: (fl= flonum1 flonum2 ...)\n\n\nprocedure: (fl< flonum1 flonum2 ...)\n\n\nprocedure: (fl> flonum1 flonum2 ...)\n\n\nprocedure: (fl<= flonum1 flonum2 ...)\n\n\nprocedure: (fl>= flonum1 flonum2 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (chezscheme)\n\n" "The predicate fl= returns #t if its arguments are equal.\nThe predicate fl< returns #t if its arguments are monotonically\nincreasing, i.e., each argument is greater than the preceding ones,\nwhile fl> returns #t if its arguments are monotonically decreasing.\nThe predicate fl<= returns #t if its arguments are monotonically\nnondecreasing, i.e., each argument is not less than the preceding ones,\nwhile fl>= returns #t if its arguments are monotonically nonincreasing.\nWhen passed only one argument, each of these predicates returns #t.\n\n" "\nIEEE NANs are not comparable, i.e., comparisons involving NANs always return\n#f.\n\n" "\nThese procedures are similar to the Revised6 Report procedures\nfl=?, fl<?, fl>?, fl<=?,\nand fl>=? except that the Revised6 Report procedures\nrequire two or more arguments, and their names have the \"?\"\nsuffix.\n\n" "\n\n" "(fl= 0.0) --> #t\n\n(fl= 0.0 0.0) --> #t\n\n(fl< -1.0 0.0 1.0) --> #t\n\n(fl> -1.0 0.0 1.0) --> #f\n\n(fl<= 0.0 3.0 3.0) --> #t\n\n(fl>= 4.0 3.0 3.0) --> #t\n\n(fl< 7.0 +inf.0) --> #t\n\n(fl= +nan.0 0.0) --> #f\n\n(fl= +nan.0 +nan.0) --> #f\n\n(fl< +nan.0 +nan.0) --> #f\n\n(fl> +nan.0 +nan.0) --> #f\n") ("numeric:s29" "\n\nprocedure: (flnonpositive? fl)\n\nreturns: #t if fl is not greater than zero, #f otherwise\n\n\nprocedure: (flnonnegative? fl)\n\nreturns: #t if fl is not less than zero, #f otherwise\n\nlibraries: (chezscheme)\n\n" "flnonpositive? is equivalent to (lambda (x) (fl<= x 0.0)),\nand\nflnonnegative? is equivalent to (lambda (x) (fl>= x 0.0)).\n\n" "\nEven if the flonum representation distinguishes -0.0 from +0.0, both\nare considered nonpositive and nonnegative.\n\n" "\n\n" "(flnonpositive? 128.0) --> #f\n\n(flnonpositive? 0.0) --> #t\n\n(flnonpositive? -0.0) --> #t\n\n(flnonpositive? -1.0) --> #t\n\n\n(flnonnegative? -65.0) --> #f\n\n(flnonnegative? 0.0) --> #t\n\n(flnonnegative? -0.0) --> #t\n\n(flnonnegative? 1.0) --> #t\n\n\n(flnonnegative? +nan.0) --> #f\n\n(flnonpositive? +nan.0) --> #f\n\n\n(flnonnegative? +inf.0) --> #t\n\n(flnonnegative? -inf.0) --> #f\n") ("numeric:s30" "\n\nprocedure: (decode-float x)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "x must be a flonum.\ndecode-float returns a vector with three integer elements,\nm, e, and s, such that\nx = sm2e.\nIt is useful primarily in the printing of floating-point numbers.\n\n" "\n\n" "(decode-float 1.0) --> #(4503599627370496 -52 1)\n\n(decode-float -1.0) --> #(4503599627370496 -52 -1)\n\n\n(define slow-identity\n\n  (lambda (x)\n\n    (inexact\n\n      (let ([v (decode-float x)])\n\n        (let ([m (vector-ref v 0)]\n\n              [e (vector-ref v 1)]\n\n              [s (vector-ref v 2)])\n\n          (* s m (expt 2 e)))))))\n\n\n(slow-identity 1.0) --> 1.0\n\n(slow-identity -1e20) --> -1e20\n") ("numeric:s31" "\n\nprocedure: (fllp flonum)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "fllp returns the 12-bit integer consisting of the exponent\nplus highest order represented bit of a flonum (ieee 64-bit\nfloating-point number).\nIt can be used to compute a fast approximation of the logarithm of\nthe number.\n\n" "\n\n" "(fllp 0.0) --> 0\n\n(fllp 1.0) --> 2046\n\n(fllp -1.0) --> 2046\n\n\n(fllp 1.5) --> 2047\n\n\n(fllp +inf.0) --> 4094\n\n(fllp -inf.0) --> 4094\n\n\n(fllp #b1.0e-1111111111) --> 1\n\n(fllp #b1.0e-10000000000) --> 0\n") ("numeric:s35" "\n\n\nprocedure: (fl-make-rectangular flonum1 flonum2)\n\nreturns: an inexact complexnum \n\nlibraries: (chezscheme)\n\n" "The inexact complexnum produced by fl-make-rectangular has real part equal\nto flonum1 and imaginary part equal to flonum2.\n\n" "\n\n" "(fl-make-rectangular 2.0 -3.0) --> 2.0-3.0i\n\n(fl-make-rectangular 2.0 0.0) --> 2.0+0.0i\n\n(fl-make-rectangular 2.0 -0.0) --> 2.0-0.0i\n") ("numeric:s36" "\n\nprocedure: (cfl-real-part cflonum)\n\nreturns: the real part of cflonum\n\n\nprocedure: (cfl-imag-part cflonum)\n\nreturns: the imaginary part of cflonum\n\nlibraries: (chezscheme)\n\n" "\n\n" "(cfl-real-part 2.0-3.0i) --> 2.0\n\n(cfl-imag-part 2.0-3.0i) --> -3.0\n\n(cfl-imag-part 2.0-0.0i) --> -0.0\n\n(cfl-imag-part 2.0-inf.0i) --> -inf.0\n") ("numeric:s37" "\n\nprocedure: (cfl= cflonum ...)\n\nreturns: #t if its arguments are equal, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(cfl= 7.0+0.0i 7.0) --> #t\n\n(cfl= 1.0+2.0i 1.0+2.0i) --> #t\n\n(cfl= 1.0+2.0i 1.0-2.0i) --> #f\n") ("numeric:s38" "\n\nprocedure: (cfl+ cflonum ...)\n\n\nprocedure: (cfl* cflonum ...)\n\n\nprocedure: (cfl- cflonum1 cflonum2 ...)\n\n\nprocedure: (cfl/ cflonum1 cflonum2 ...)\n\nreturns: a cflonum\n\nlibraries: (chezscheme)\n\n" "These procedures compute the sum, difference, product, or quotient\nof inexact complex quantities, whether these quantities are represented\nby flonums or inexact complexnums.\nFor example, if cfl+ receives two flonum arguments a and b, it\nreturns the sum a + b; in this case, it behaves the same as fl+.\nWith two inexact complexnum arguments a + bi and c + di, it returns\nthe sum (a + c) + (b + d)i.\nIf one argument is a flonum a and the other an inexact complexnum\nc + di, cfl+ returns (a + c) + di.\n\n" "\nWhen passed zero arguments, cfl+ returns 0.0 and\ncfl* returns 1.0.\nWhen passed one argument, cfl- returns the additive inverse\nof the argument, and cfl/ returns the multiplicative inverse\nof the argument.\nWhen passed three or more arguments, cfl- returns the\ndifference between its first and the sum of its remaining arguments,\nand cfl/ returns the quotient of its first and the product\nof its remaining arguments.\n\n\n" "\n\n" "(cfl+) --> 0.0\n\n(cfl*) --> 1.0\n\n(cfl- 5.0+1.0i) --> -5.0-1.0i\n\n(cfl/ 2.0+2.0i) --> 0.25-0.25i\n\n\n(cfl+ 1.0+2.2i -3.7+5.3i) --> -2.7+7.5i\n\n(cfl+ 1.0 -5.3) --> -4.3\n\n(cfl+ 1.0 2.0 -5.3i) --> 3.0-5.3i\n\n(cfl- 1.0+2.5i -3.7) --> 4.7+2.5i\n\n(cfl* 1.0+2.0i 3.0+4.0i) --> -5.0+10.0i\n\n(cfl/ -5.0+10.0i 1.0+2.0i 2.0) --> 1.5+2.0i\n") ("numeric:s39" "\n\nprocedure: (cfl-conjugate cflonum)\n\nreturns: complex conjugate of cflonum\n\nlibraries: (chezscheme)\n\n" "The procedure cfl-conjugate, when passed an inexact complex argument\na + bi, returns its complex conjugate a + (-b)i.\n\n" "\nSee also conjugate, which is a generic\nversion of this operator that returns the complex conjugate of any\nvalid representation for a complex number.\n\n" "\n\n" "(cfl-conjugate 3.0) --> 3.0\n\n(cfl-conjugate 3.0+4.0i) --> 3.0-4.0i\n\n(cfl-conjugate 1e-20-2e-30i) --> 1e-20+2e-30i\n") ("numeric:s41" "\n\nprocedure: (cfl-magnitude-squared cflonum)\n\nreturns: magnitude of cflonum squared\n\nlibraries: (chezscheme)\n\n" "The procedure cfl-magnitude-squared, when passed an inexact complex\nargument a + bi returns a flonum representing the magnitude of the\nargument squared, i.e., a2 + b2.\n\n" "\nSee also magnitude-squared,\nwhich is a generic version of this\noperator that returns the magnitude squared of any valid representation\nfor a complex number.\nBoth operations are similar to the magnitude procedure,\nwhich returns the magnitude, sqrt(a2 + b2), of its generic complex\nargument.\n\n" "\n\n" "(cfl-magnitude-squared 3.0) --> 9.0\n\n(cfl-magnitude-squared 3.0-4.0i) --> 25.0\n") ("numeric:s44" "\n\n\nprocedure: (logand int ...)\n\nreturns: the logical \"and\" of the arguments int ...\n\nlibraries: (chezscheme)\n\n" "The arguments must be exact integers (fixnums or bignums) and are treated\nas two's complement integers, regardless of the underlying representation.\nWith no arguments, logand returns -1, i.e., all bits set.\n\n" "\n\n" "(logand) --> -1\n\n(logand 15) --> 15\n\n(logand -1 -1) --> -1\n\n(logand -1 0) --> 0\n\n(logand 5 3) --> 1\n\n(logand #x173C8D95 7) --> 5\n\n(logand #x173C8D95 -8) --> #x173C8D90\n\n(logand #b1100 #b1111 #b1101) --> #b1100\n") ("numeric:s45" "\n\nprocedure: (logior int ...)\n\n\nprocedure: (logor int ...)\n\nreturns: the logical \"or\" of the arguments int ...\n\nlibraries: (chezscheme)\n\n" "The arguments must be exact integers (fixnums or bignums) and are treated\nas two's complement integers, regardless of the underlying representation.\nWith no arguments, logior returns 0, i.e., all bits reset.\n\n" "\n\n" "(logior) --> 0\n\n(logior 15) --> 15\n\n(logior -1 -1) --> -1\n\n(logior -1 0) --> -1\n\n(logior 5 3) --> 7\n\n(logior #b111000 #b101010) --> #b111010\n\n(logior #b1000 #b0100 #b0010) --> #b1110\n\n(apply logior '(1 2 4 8 16)) --> 31\n") ("numeric:s46" "\n\nprocedure: (logxor int ...)\n\nreturns: the logical \"exclusive or\" of the arguments int ...\n\nlibraries: (chezscheme)\n\n" "The arguments must be exact integers (fixnums or bignums) and are treated\nas two's complement integers, regardless of the underlying representation.\nWith no arguments, logxor returns 0, i.e., all bits reset.\n\n" "\n\n" "(logxor) --> 0\n\n(logxor 15) --> 15\n\n(logxor -1 -1) --> 0\n\n(logxor -1 0) --> -1\n\n(logxor 5 3) --> 6\n\n(logxor #b111000 #b101010) --> #b010010\n\n(logxor #b1100 #b0100 #b0110) --> #b1110\n") ("numeric:s47" "\n\nprocedure: (lognot int)\n\nreturns: the logical \"not\" of int\n\nlibraries: (chezscheme)\n\n" "The argument must be an exact integer (fixnum or bignum) and is treated\nas a two's complement integer, regardless of the underlying representation.\n\n" "\n\n" "(lognot -1) --> 0\n\n(lognot 0) --> -1\n\n(lognot 7) --> -8\n\n(lognot -8) --> 7\n") ("numeric:s48" "\n\nprocedure: (logbit? index int)\n\nreturns: #t if the specified bit is set, otherwise #f\n\nlibraries: (chezscheme)\n\n" "index must be a nonnegative exact integer.\nint must be an exact integer (fixnum or bignum) and is treated\nas a two's complement integer, regardless of the underlying representation.\n\n" "\nlogbit? returns #t if the bit at index index\nof int is set (one) and #f otherwise.\nThe index is zero-based, counting from the lowest-order toward\nhigher-order bits.\nThere is no upper limit on the index; for nonnegative values of int,\nthe bits above the highest order set bit are all considered to be zero,\nand for negative values, the bits above the highest order reset bit are\nall considered to be one.\n\n" "\nlogbit? is equivalent to\n\n" "\n\n" "(lambda (k n) (not (zero? (logand n (ash 1 k)))))\n" "but more efficient.\n\n" "\n\n" "(logbit? 0 #b1110) --> #f\n\n(logbit? 1 #b1110) --> #t\n\n(logbit? 2 #b1110) --> #t\n\n(logbit? 3 #b1110) --> #t\n\n(logbit? 4 #b1110) --> #f\n\n(logbit? 100 #b1110) --> #f\n\n\n(logbit? 0 -6) --> #f  ; the two's complement of -6 is 1...1010\n\n(logbit? 1 -6) --> #t\n\n(logbit? 2 -6) --> #f\n\n(logbit? 3 -6) --> #t\n\n(logbit? 100 -6) --> #t\n\n\n(logbit? (random 1000000) 0) --> #f\n\n(logbit? (random 1000000) -1) --> #t\n\n\n(logbit? 20000 (ash 1 20000)) --> #t\n") ("numeric:s49" "\n\nprocedure: (logtest int1 int2)\n\nreturns: #t if any common bits are set, otherwise #f\n\nlibraries: (chezscheme)\n\n" "The arguments must be exact integers (fixnums or bignums) and are treated\nas two's complement integers, regardless of the underlying representation.\n\n" "\nlogtest returns #t if any bit set in one argument is\nalso set in the other.\nIt returns #f if the two arguments have no set bits in common.\n\n" "\nlogtest is equivalent to\n\n" "\n\n" "(lambda (n1 n2) (not (zero? (logand n1 n2))))\n" "but more efficient.\n\n" "\n\n" "(logtest #b10001 #b1110) --> #f\n\n(logtest #b10101 #b1110) --> #t\n\n(logtest #b111000 #b110111) --> #t\n\n\n(logtest #b101 -6) --> #f  ; the two's complement of -6 is 1...1010\n\n(logtest #b1000 -6) --> #t\n\n(logtest 100 -6) --> #t\n\n\n(logtest (+ (random 1000000) 1) 0) --> #f\n\n(logtest (+ (random 1000000) 1) -1) --> #t\n\n\n(logtest (ash #b101 20000) (ash #b111 20000)) --> #t\n") ("numeric:s50" "\n\nprocedure: (logbit0 index int)\n\nreturns: the result of clearing bit index of int\n\nlibraries: (chezscheme)\n\n" "index must be a nonnegative exact integer.\nint must be an exact integer (fixnum or bignum) and is treated\nas a two's complement integer, regardless of the underlying representation.\n\n" "\nThe index is zero-based, counting from the lowest-order toward\nhigher-order bits.\nAs with logbit?, there is no upper limit on the index.\n\n" "\nlogbit0 is equivalent to\n\n" "\n\n" "(lambda (i n) (logand (lognot (ash 1 i)) n))\n" "but more efficient.\n\n" "\n\n" "(logbit0 3 #b10101010) --> #b10100010\n\n(logbit0 4 #b10101010) --> #b10101010\n\n(logbit0 0 -1) --> -2\n") ("numeric:s51" "\n\nprocedure: (logbit1 index int)\n\nreturns: the result of setting bit index of int\n\nlibraries: (chezscheme)\n\n" "index must be a nonnegative exact integer.\nint must be an exact integer (fixnum or bignum) and is treated\nas a two's complement integer, regardless of the underlying representation.\n\n" "\nThe index is zero-based, counting from the lowest-order toward\nhigher-order bits.\nAs with logbit?, there is no upper limit on the index.\n\n" "\nlogbit1 is equivalent to\n\n" "\n\n" "(lambda (i n) (logor (ash 1 i) n))\n" "but more efficient.\n\n" "\n\n" "(logbit1 3 #b10101010) --> #b10101010\n\n(logbit1 4 #b10101010) --> #b10111010\n\n(logbit1 4 0) --> #b10000\n\n(logbit1 0 -2) --> -1\n") ("numeric:s52" "\n\nprocedure: (ash int count)\n\nreturns: int shifted left arithmetically by count.\n\nlibraries: (chezscheme)\n\n" "Both arguments must be exact integers.\nThe first argument is treated as a two's complement integer, regardless\nof the underlying representation.\nIf count is negative, int is shifted right by\n-count bits.\n\n" "\n\n" "(ash 8 0) --> 8\n\n(ash 8 2) --> 32\n\n(ash 8 -2) --> 2\n\n(ash -1 2) --> -4\n\n(ash -1 -2) --> -1\n") ("numeric:s53" "\n\nprocedure: (fxlogand fixnum ...)\n\nreturns: the logical \"and\" of the arguments fixnum ...\n\nlibraries: (chezscheme)\n\n" "The arguments are treated as two's complement integers, regardless\nof the underlying representation.\nWith no arguments, fxlogand returns -1, i.e., all bits set.\n\n" "\n\n" "(fxlogand) --> -1\n\n(fxlogand 15) --> 15\n\n(fxlogand -1 -1) --> -1\n\n(fxlogand -1 0) --> 0\n\n(fxlogand 5 3) --> 1\n\n(fxlogand #b111000 #b101010) --> #b101000\n\n(fxlogand #b1100 #b1111 #b1101) --> #b1100\n") ("numeric:s54" "\n\nprocedure: (fxlogior fixnum ...)\n\n\nprocedure: (fxlogor fixnum ...)\n\nreturns: the logical \"or\" of the arguments fixnum ...\n\nlibraries: (chezscheme)\n\n" "The arguments are treated as two's complement integers, regardless\nof the underlying representation.\nWith no arguments, fxlogior returns 0, i.e., all bits reset.\n\n" "\n\n" "(fxlogior) --> 0\n\n(fxlogior 15) --> 15\n\n(fxlogior -1 -1) --> -1\n\n(fxlogior -1 0) --> -1\n\n(fxlogior #b111000 #b101010) --> #b111010\n\n(fxlogior #b1000 #b0100 #b0010) --> #b1110\n\n(apply fxlogior '(1 2 4 8 16)) --> 31\n") ("numeric:s55" "\n\nprocedure: (fxlogxor fixnum ...)\n\nreturns: the logical \"exclusive or\" of the arguments fixnum ...\n\nlibraries: (chezscheme)\n\n" "The arguments are treated as two's complement integers, regardless\nof the underlying representation.\nWith no arguments, fxlogxor returns 0, i.e., all bits reset.\n\n" "\n\n" "(fxlogxor) --> 0\n\n(fxlogxor 15) --> 15\n\n(fxlogxor -1 -1) --> 0\n\n(fxlogxor -1 0) --> -1\n\n(fxlogxor 5 3) --> 6\n\n(fxlogxor #b111000 #b101010) --> #b010010\n\n(fxlogxor #b1100 #b0100 #b0110) --> #b1110\n") ("numeric:s56" "\n\nprocedure: (fxlognot fixnum)\n\nreturns: the logical \"not\" of fixnum\n\nlibraries: (chezscheme)\n\n" "The argument is treated as a two's complement integer, regardless\nof the underlying representation.\n\n" "\n\n" "(fxlognot -1) --> 0\n\n(fxlognot 0) --> -1\n\n(fxlognot 1) --> -2\n\n(fxlognot -2) --> 1\n") ("numeric:s57" "\n\nprocedure: (fxlogbit? index fixnum)\n\nreturns: #t if the specified bit is set, otherwise #f\n\nlibraries: (chezscheme)\n\n" "index must be a nonnegative fixnum.\nfixnum is treated as a two's complement integer, regardless of\nthe underlying representation.\n\n" "\nfxlogbit? returns #t if the bit at index index\nof fixnum is set (one) and #f otherwise.\nThe index is zero-based, counting from the lowest-order toward\nhigher-order bits.\nThe index is limited only by the fixnum range; for nonnegative values of\nfixnum, the bits above the highest order set bit are all considered\nto be zero, and for negative values, the bits above the highest order\nreset bit are all considered to be one.\n\n" "\n\n" "(fxlogbit? 0 #b1110) --> #f\n\n(fxlogbit? 1 #b1110) --> #t\n\n(fxlogbit? 2 #b1110) --> #t\n\n(fxlogbit? 3 #b1110) --> #t\n\n(fxlogbit? 4 #b1110) --> #f\n\n(fxlogbit? 100 #b1110) --> #f\n\n\n(fxlogbit? 0 -6) --> #f  ; the two's complement of -6 is 1...1010\n\n(fxlogbit? 1 -6) --> #t\n\n(fxlogbit? 2 -6) --> #f\n\n(fxlogbit? 3 -6) --> #t\n\n(fxlogbit? 100 -6) --> #t\n\n\n(fxlogbit? (random 1000000) 0) --> #f\n\n(fxlogbit? (random 1000000) -1) --> #t\n") ("numeric:s58" "\n\nprocedure: (fxlogtest fixnum1 fixnum2)\n\nreturns: #t if any common bits are set, otherwise #f\n\nlibraries: (chezscheme)\n\n" "The arguments are treated as two's complement integers, regardless of\nthe underlying representation.\n\n" "\nfxlogtest returns #t if any bit set in one argument is\nalso set in the other.\nIt returns #f if the two arguments have no set bits in common.\n\n" "\n\n" "(fxlogtest #b10001 #b1110) --> #f\n\n(fxlogtest #b10101 #b1110) --> #t\n\n(fxlogtest #b111000 #b110111) --> #t\n\n\n(fxlogtest #b101 -6) --> #f  ; the two's complement of -6 is 1...1010\n\n(fxlogtest #b1000 -6) --> #t\n\n(fxlogtest 100 -6) --> #t\n\n\n(fxlogtest (+ (random 1000000) 1) 0) --> #f\n\n(fxlogtest (+ (random 1000000) 1) -1) --> #t\n") ("numeric:s59" "\n\nprocedure: (fxlogbit0 index fixnum)\n\nreturns: the result of clearing bit index of fixnum\n\nlibraries: (chezscheme)\n\n" "fixnum is treated\nas a two's complement integer, regardless of the underlying representation.\nindex must be nonnegative and less than the number of\nbits in a fixnum, excluding the sign bit, i.e., less than\n(integer-length (most-positive-fixnum)).\nThe index is zero-based, counting from the lowest-order toward\nhigher-order bits.\n\n" "\nfxlogbit0 is equivalent to\n\n" "\n\n" "(lambda (i n) (fxlogand (fxlognot (fxsll 1 i)) n))\n" "but more efficient.\n\n" "\n\n" "(fxlogbit0 3 #b10101010) --> #b10100010\n\n(fxlogbit0 4 #b10101010) --> #b10101010\n\n(fxlogbit0 0 -1) --> -2\n") ("numeric:s60" "\n\nprocedure: (fxlogbit1 index fixnum)\n\nreturns: the result of setting bit index of fixnum\n\nlibraries: (chezscheme)\n\n" "fixnum is treated\nas a two's complement integer, regardless of the underlying representation.\nindex must be nonnegative and less than the number of\nbits in a fixnum, excluding the sign bit, i.e., less than\n(integer-length (most-positive-fixnum)).\nThe index is zero-based, counting from the lowest-order toward\nhigher-order bits.\n\n" "\nfxlogbit1 is equivalent to\n\n" "\n\n" "(lambda (i n) (fxlogor (fxsll 1 i) n))\n" "but more efficient.\n\n" "\n\n" "(fxlogbit1 3 #b10101010) --> #b10101010\n\n(fxlogbit1 4 #b10101010) --> #b10111010\n\n(fxlogbit1 4 0) --> #b10000\n\n(fxlogbit1 0 -2) --> -1\n") ("numeric:s61" "\n\nprocedure: (fxsll fixnum count)\n\nreturns: fixnum shifted left by count\n\nlibraries: (chezscheme)\n\n" "fixnum is treated as a two's complement integer, regardless\nof the underlying representation.\ncount must be nonnegative and not more than the number of\nbits in a fixnum, i.e.,\n(+ (integer-length (most-positive-fixnum)) 1).\nAn exception is raised with condition-type\n&implementation-restriction if the result cannot be represented\nas a fixnum.\n\n" "\n\n" "(fxsll 1 2) --> 4\n\n(fxsll -1 2) --> -4\n") ("numeric:s62" "\n\nprocedure: (fxsrl fixnum count)\n\nreturns: fixnum logically shifted right by count\n\nlibraries: (chezscheme)\n\n" "fixnum is treated as a two's complement integer, regardless\nof the underlying representation.\ncount must be nonnegative and not more than the number of\nbits in a fixnum, i.e.,\n(+ (integer-length (most-positive-fixnum)) 1).\n\n" "\n\n" "(fxsrl 4 2) --> 1\n\n(= (fxsrl -1 1) (most-positive-fixnum)) --> #t\n") ("numeric:s63" "\n\nprocedure: (fxsra fixnum count)\n\nreturns: fixnum arithmetically shifted right by count\n\nlibraries: (chezscheme)\n\n" "fixnum is treated as a two's complement integer, regardless\nof the underlying representation.\ncount must be nonnegative and not more than the number of\nbits in a fixnum, i.e.,\n(+ (integer-length (most-positive-fixnum)) 1).\n\n" "\n\n" "(fxsra 64 3) --> 8\n\n(fxsra -1 1) --> -1\n\n(fxsra -64 3) --> -8\n") ("numeric:s64" "\n\n\nprocedure: (random real)\n\nreturns: a nonnegative pseudo-random number less than real\n\nlibraries: (chezscheme)\n\n" "real must be a positive integer or positive inexact real number.\n\n" "\n\n" "(random 1) --> 0\n\n(random 1029384535235) --> 1029384535001, every now and then\n\n(random 1.0) --> 0.5, every now and then\n") ("numeric:s65" "\n\nthread parameter: random-seed\n\nlibraries: (chezscheme)\n\n" "The random number generator allows the\ncurrent random seed to be obtained and modified via the parameter\nrandom-seed.\n\n" "\nWhen called without arguments, random-seed returns the current\nrandom seed.\nWhen called with one argument, which must be a nonnegative exact integer\nranging from 1 through 232 - 1, random-seed sets the current\nrandom seed to the argument.\n\n" "\n\n" "(let ([s (random-seed)])\n\n  (let ([r1 (random 1.0)])\n\n    (random-seed s)\n\n    (eqv? (random 1.0) r1))) --> #t\n") ("numeric:s67" "\n\n\nprocedure: (= num1 num2 num3 ...)\n\n\nprocedure: (< real1 real2 real3 ...)\n\n\nprocedure: (> real1 real2 real3 ...)\n\n\nprocedure: (<= real1 real2 real3 ...)\n\n\nprocedure: (>= real1 real2 real3 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (chezscheme)\n\n" "These predicates are identical to the Revised6 Report counterparts,\nexcept they are extended to accept one or more rather than two or more\narguments.\nWhen passed one argument, each of these predicates returns #t.\n\n" "\n\n" "(> 3/4) --> #t\n\n(< 3/4) --> #t\n\n(= 3/4) --> #t\n") ("numeric:s68" "\n\nprocedure: (1+ num)\n\n\nprocedure: (add1 num)\n\n\nprocedure: (1- num)\n\n\nprocedure: (-1+ num)\n\n\nprocedure: (sub1 num)\n\nreturns: num plus 1 or num minus 1\n\nlibraries: (chezscheme)\n\n" "1+ and add1 are equivalent to\n(lambda (x) (+ x 1));\n1-, -1+, and sub1 are equivalent to\n(lambda (x) (- x 1)).\n\n" "\n\n" "(define plus\n\n ; x should be a nonnegative integer\n\n  (lambda (x y)\n\n    (if (zero? x)\n\n        y\n\n        (plus (1- x) (1+ y)))))\n\n\n(plus 7 8) --> 15\n\n\n(define double\n\n ; x should be a nonnegative integer\n\n  (lambda (x)\n\n    (if (zero? x)\n\n        0\n\n        (add1 (add1 (double (sub1 x)))))))\n\n\n(double 7) --> 14\n") ("numeric:s69" "\n\nprocedure: (expt-mod int1 int2 int3)\n\nreturns: int1 raised to the int2 power, modulo int3\n\nlibraries: (chezscheme)\n\n" "int1, int2 and int3\nmust be nonnegative integers.\nexpt-mod performs its computation in such a way that the\nintermediate results are never much larger than int3.\nThis means that when int2 is large, expt-mod is more efficient\nthan the equivalent procedure (lambda (x y z) (modulo (expt x y) z)).\n\n" "\n\n" "(expt-mod 2 4 3) --> 1\n\n(expt-mod 2 76543 76543) --> 2\n") ("numeric:s70" "\n\nprocedure: (isqrt n)\n\nreturns: the integer square root of n\n\nlibraries: (chezscheme)\n\n" "n must be a nonnegative integer.\nThe integer square root of n is defined to be\nmath/csug/1.gif.\n\n\n" "\n\n" "(isqrt 0) --> 0\n\n(isqrt 16) --> 4\n\n(isqrt 16.0) --> 4.0\n\n(isqrt 20) --> 4\n\n(isqrt 20.0) --> 4.0\n\n(isqrt (* 2 (expt 10 20))) --> 14142135623\n") ("numeric:s71" "\n\nprocedure: (integer-length n)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "The procedure integer-length returns the length in bits of\nthe smallest two's complement representation for n, with an\nassumed leading 1 (sign) bit for negative numbers.\nFor zero, integer-length returns 0.\n\n" "\n\n" "(integer-length 0) --> 0\n\n(integer-length 1) --> 1\n\n(integer-length 2) --> 2\n\n(integer-length 3) --> 2\n\n(integer-length 4) --> 3\n\n(integer-length #b10000000) --> 8\n\n(integer-length #b11111111) --> 8\n\n(integer-length -1) --> 0\n\n(integer-length -2) --> 1\n\n(integer-length -3) --> 2\n\n(integer-length -4) --> 2\n") ("numeric:s72" "\n\nprocedure: (nonpositive? real)\n\nreturns: #t if real is not greater than zero, #f otherwise\n\nlibraries: (chezscheme)\n\n" "nonpositive? is equivalent to (lambda (x) (<= x 0)).\n\n" "\n\n" "(nonpositive? 128) --> #f\n\n(nonpositive? 0.0) --> #t\n\n(nonpositive? 1.8e-15) --> #f\n\n(nonpositive? -2/3) --> #t\n") ("numeric:s73" "\n\nprocedure: (nonnegative? real)\n\nreturns: #t if real is not less than zero, #f otherwise\n\nlibraries: (chezscheme)\n\n" "nonnegative? is equivalent to (lambda (x) (>= x 0)).\n\n" "\n\n" "(nonnegative? -65) --> #f\n\n(nonnegative? 0) --> #t\n\n(nonnegative? -0.0121) --> #f\n\n(nonnegative? 15/16) --> #t\n") ("numeric:s74" "\n\nprocedure: (conjugate num)\n\nreturns: complex conjugate of num\n\nlibraries: (chezscheme)\n\n" "The procedure conjugate, when passed a complex argument\na + bi, returns its complex conjugate a + (-b)i.\n\n" "\n\n" "(conjugate 3.0+4.0i) --> 3.0-4.0i\n\n(conjugate 1e-20-2e-30i) --> 1e-20+2e-30i\n\n(conjugate 3) --> 3\n") ("numeric:s75" "\n\nprocedure: (magnitude-squared num)\n\nreturns: magnitude of num squared\n\nlibraries: (chezscheme)\n\n" "The procedure magnitude-squared, when passed a complex\nargument a + bi returns its magnitude squared,\ni.e., a2 + b2.\n\n" "\n\n" "(magnitude-squared 3.0-4.0i) --> 25.0\n\n(magnitude-squared 3.0) --> 9.0\n") ("numeric:s76" "\n\nprocedure: (sinh num)\n\n\nprocedure: (cosh num)\n\n\nprocedure: (tanh num)\n\nreturns: the hyperbolic sine, cosine, or tangent of num\n\nlibraries: (chezscheme)\n\n" "\n" "(sinh 0.0) --> 0.0\n\n(cosh 0.0) --> 1.0\n\n(tanh -0.0) --> -0.0\n") ("numeric:s77" "\n\nprocedure: (asinh num)\n\n\nprocedure: (acosh num)\n\n\nprocedure: (atanh num)\n\nreturns: the hyperbolic arc sine, arc cosine, or arc tangent of num\n\nlibraries: (chezscheme)\n\n" "\n" "(acosh 0.0) --> 0.0+1.5707963267948966i\n\n(acosh 1.0) --> 0.0\n\n(atanh -1.0) --> -inf.0\n") ("numeric:s78" "\n\nprocedure: (string->number string)\n\n\nprocedure: (string->number string radix)\n\nreturns: the number represented by string, or #f\n\nlibraries: (chezscheme)\n\n" "This procedure is identical to the Revised6 Report version except\nthat radix may be any exact integer between 2 and 36, inclusive.\nThe Revised6 Report version requires radix to be in the set\n{2,8,10,16}.\n\n" "\n\n" "(string->number \"211012\" 3) --> 559\n\n(string->number \"tobeornottobe\" 36) --> 140613689159812836698\n") ("numeric:s79" "\n\nprocedure: (number->string num)\n\n\nprocedure: (number->string num radix)\n\n\nprocedure: (number->string num radix precision)\n\nreturns: an external representation of num as a string\n\nlibraries: (chezscheme)\n\n" "This procedure is identical to the Revised6 Report version except\nthat radix may be any exact integer between 2 and 36, inclusive.\nThe Revised6 Report version requires radix to be in the set\n{2,8,10,16}.\n\n" "\n\n" "(number->string 10000 4) --> \"2130100\"\n\n(number->string 10000 27) --> \"DJA\"\n") ("compat:s0" "\n\n\nprocedure: (make-hash-table)\n\n\nprocedure: (make-hash-table weak?)\n\nreturns: a new hash table\n\nlibraries: (chezscheme)\n\n" "If weak? is provided and is non-false, the hash\ntable is a weak hash table, which means that it does not protect\nkeys from the garbage collector.\nKeys reclaimed by the garbage collector are removed from the table,\nand their associated values are dropped the next time the table\nis modified, if not sooner.\n\n") ("compat:s1" "\n\n\nprocedure: (hash-table? obj)\n\nreturns: #t if obj is a hash table, otherwise #f\n\nlibraries: (chezscheme)\n\n") ("compat:s2" "\n\nprocedure: (put-hash-table! ht k v)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "ht must be a hash table.\nk and v may be any Scheme values.\n\n" "\nput-hash-table! associates the value\nv with the key k in ht.\n\n") ("compat:s3" "\n\n\nprocedure: (get-hash-table ht k d)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "get-hash-table returns the value\nassociated with k in ht.\nIf no value is associated with k in ht,\nget-hash-table returns d.\n\n" "\nKey comparisons are performed with eq?.\n\n" "\nBecause objects may be moved by the garbage collector, get-hash-table\nmay need to rehash some objects and therefore cause side effects in the\nhash table.\nThus, it is not safe to perform concurrent accesses of the same hash table\nfrom multiple threads using get-hash-table.\n\n") ("compat:s4" "\n\n\nprocedure: (remove-hash-table! ht k)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "remove-hash-table! drops any association\nfor k from ht.\n\n") ("compat:s5" "\n\n\nprocedure: (hash-table-map ht p)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "hash-table-map applies p to each key, value association\nin ht, in no particular order, and returns a list of the resulting\nvalues, again in no particular order.\np should accept two arguments, a key and a value.\n\n\n") ("compat:s6" "\n\n\nprocedure: (hash-table-for-each ht p)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "hash-table-for-each applies p to each key, value\nassociation in ht, in no particular order.\nUnlike hash-table-map, it does not create a list of the values;\ninstead, it's value is unspecified.\np should accept two arguments, a key and a value.\n\n\n") ("compat:s8" "\n\n\nsyntax: (extend-syntax (name key ...) (pat fender template) ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "The identifier name is the name, or syntax keyword, for the\nsyntactic extension to be defined.\nWhen the system expander processes any list expression whose car is\nname, the syntactic transformation procedure generated by\nextend-syntax is invoked on this expression.\nThe remaining identifiers key ... are additional keywords to\nbe recognized within input expressions during expansion (such as\nelse in cond or case).\n\n" "\nEach clause after the list of keys consists of a pattern pat, an\noptional fender,\nand a template.\nThe optional fender is omitted more often than not.\nThe pat specifies the syntax the input expression must have\nfor the clause to be chosen.\nIdentifiers within the pattern that are not keywords\n(pattern variables) are bound to corresponding pieces of the input expression.\nIf present, the fender is a Scheme expression that specifies\nadditional constraints on the input expression (accessed through the\npattern variables) that must be satisfied in order for the clause to\nbe chosen.\nThe template specifies what form the output takes, usually in\nterms of the pattern variables.\n\n" "\nDuring expansion, the transformation procedure extend-syntax\ngenerates attempts to match the input expression against each\npattern in the order the clauses are given.\nIf the input expression matches the pattern, the pattern variables are\nbound to the corresponding pieces of the input expression and the\nfender for the clause, if any, is evaluated.\nIf the fender returns a true value, the given expansion is performed.\nIf input does not match the pattern or if the fender returns a false\nvalue, the transformation procedure tries the next clause.\nAn exception is raised with condition type &assertion if no clause can be chosen.\n\n" "\nWithin the pattern,\nellipsis\n(...) may be\nused to specify zero or more occurrences\nof the preceding pattern fragment, or prototype.\nSimilarly, ellipses may be used in the output to specify the construction\nof zero or more expansion prototypes.\nIn this case, the expansion prototype must contain part of an input pattern\nprototype.\nThe use of patterns, templates, ellipses within patterns and templates,\nand fenders is illustrated in the following sequence of examples.\n\n" "\nThe first example, defining rec, uses a single keyword, a single\nclause with no fender, and no ellipses.\n\n" "\n\n" "(extend-syntax (rec)\n\n  [(rec id val)\n\n   (let ([id #f])\n\n     (set! id val)\n\n     id)])\n" "The second example, defining when, shows\nthe use of ellipses.\n\n" "\n\n" "(extend-syntax (when)\n\n  [(when test exp1 exp2 ...)\n\n   (if test (begin exp1 exp2 ...) #f)])\n" "The next example shows the definition of\nlet.\nThe definition of let shows the use of multiple ellipses, employing\none for the identifier/value pairs and one for the expressions in the body.\nIt also shows that the prototype need not be a single identifier, and that\npieces of the prototype may be separated from one another in the template.\n\n" "\n\n" "(extend-syntax (let)\n\n  [(let ([x e] ...) b1 b2 ...)\n\n   ((lambda (x ...) b1 b2 ...) e ...)])\n" "The next example shows let*, whose syntax is the same as for\nlet, but which is defined recursively in terms of let with\ntwo clauses (one for the base case, one for the recursion step) since\nit must produce a nested structure.\n\n" "\n\n" "(extend-syntax (let*)\n\n  [(let* () b1 b2 ...)\n\n   (let () b1 b2 ...)]\n\n  [(let* ([x e] more ...) b1 b2 ...)\n\n   (let ([x e]) (let* (more ...) b1 b2 ...))])\n" "The first pattern/template pair matches any let* expression with no\nidentifier/value pairs and maps it into the equivalent begin expression.\nThis is the base case.\nThe second pattern/template pair matches any let* expression with one\nor more identifier/value pairs and transforms it into a let expression\nbinding the first pair whose body is a let* expression binding the\nremaining pairs.\nThis is the recursion step, which will eventually lead us to the base case\nbecause we remove one identifier/value pair at each step.\nNotice that the second pattern uses the pattern variable more for the\nsecond and later identifier/value pairs; this makes the pattern and template\nless cluttered and makes it clear that only the first identifier/value pair\nis dealt with explicitly.\n\n" "\nThe definition for and requires three clauses.\nThe first clause is necessary to recognize (and), and the second\ntwo define all other and forms recursively.\n\n" "\n\n" "(extend-syntax (and)\n\n  [(and) #t]\n\n  [(and x) x]\n\n  [(and x y ...) (if x (and y ...) #f)])\n" "The definition for cond requires four clauses.\nAs with let*, cond must be described recursively, partly because\nit produces nested if expressions, and partly because one\nellipsis prototype would not be sufficient to describe all possible\ncond clauses.\nThe definition of cond also requires that we specify else as a\nkeyword, in addition to cond.\nHere is the definition:\n\n" "\n\n" "(extend-syntax (cond else)\n\n  [(cond) #f]\n\n  [(cond (else e1 e2 ...))\n\n   (begin e1 e2 ...)]\n\n  [(cond (test) more ...)\n\n   (or test (cond more ...))]\n\n  [(cond (test e1 e2 ...) more ...)\n\n   (if test\n\n       (begin e1 e2 ...)\n\n       (cond more ...))])\n" "Two of the clauses are base cases and two are recursion steps.\nThe first base case is an empty cond.\nThe value of cond in this case is unspecified, so the choice of\n#f is somewhat arbitrary.\nThe second base case is a cond containing only an else clause;\nthis is transformed to the equivalent begin expression.\nThe two recursion steps differ in the number of expressions in the cond\nclause.\nThe value of cond when the first true clause contains only the test\nexpression is the value of the test.\nThis is similar to what or does, so we expand the cond clause\ninto an or expression.\nOn the other hand, when there are expressions following the test expression,\nthe value of the last expression is returned, so we use if and\nbegin.\n\n" "\nTo be absolutely correct about the syntax of let, we actually\nmust require that the bound identifiers in the input are symbols.\nIf we typed something like (let ([3 x]) x) we would not get an\nerror from let because it does not check to verify that the\nobjects in the identifier positions are symbols.\nInstead, lambda may complain, or perhaps the system evaluator\nlong after expansion is complete. \nThis is where fenders\nare useful.\n\n" "\n\n" "(extend-syntax (let)\n\n  [(let ([x e] ...) b1 b2 ...)\n\n   (andmap symbol? '(x ...))\n\n   ((lambda (x ...) b1 b2 ...) e ...)])\n" "The andmap of symbol?\nover '(x ...) assures that each\nbound identifier is a symbol.\nA fender is simply a Scheme expression.\nWithin that expression, any quoted object is first expanded by the same\nrules as the template part of the clause.\nIn this case, '(x ...) is expanded to the list of identifiers from\nthe identifier/value pairs.\n\n" "\nextend-syntax typically handles everything you need it for, but\nsome syntactic extension definitions require the ability to include the\nresult of evaluating an arbitrary Scheme expression.\nThis ability is provided by with.\n\n\n") ("compat:s20" "\n\n\nsyntax: (with ((pat expr) ...) template)\n\nreturns: processed template\n\n" "\n\n" "with is valid only within an template inside of extend-syntax.\nwith patterns are the same as extend-syntax patterns, with\nexpressions are the same as extend-syntax fenders, and with\ntemplates are the same as extend-syntax templates.\n\n" "\nwith can be used to introduce new pattern identifiers bound to\nexpressions produced by arbitrary Scheme expressions within\nextend-syntax templates.\nThat is, with allows an escape from the declarative style of\nextend-syntax into the procedural style of full Scheme.\n\n" "\nOne common use of with is the introduction of a temporary\nidentifier or list of temporary identifiers into a template.\nwith is also used to perform complex transformations that might\nbe clumsy or inefficient if performed within the extend-syntax\nframework.\n\n" "\nFor example, or requires the use of a temporary identifier.\nWe could define or as follows.\n\n" "\n\n" "(extend-syntax (or)\n\n  [(or) #f]\n\n  [(or x) x]\n\n  [(or x y ...)\n\n   (let ([temp x])\n\n     (if temp temp (or y ...)))])\n" "This would work until we placed an or expression within the scope\nof an occurrence of temp, in which case strange things could happen,\nsince extend-syntax does not respect lexical scoping.\n(This is one of the reasons that define-syntax is preferable to\nextend-syntax.)\n\n" "\n\n" "(let ([temp #t])\n\n  (or #f temp)) --> #f\n" "One solution is to use\ngensym and with to\ncreate a temporary identifier, as follows.\n\n" "\n\n" "(extend-syntax (or)\n\n  [(or) #f]\n\n  [(or x) x]\n\n  [(or x y ...)\n\n   (with ([temp (gensym)])\n\n     (let ([temp x])\n\n       (if temp temp (or y ...))))])\n" "Also, with can be used to combine elements of the input pattern\nin ways not possible directly with extend-syntax, such as the\nfollowing folding-plus example.\n\n" "\n\n" "(extend-syntax (folding-plus)\n\n  [(folding-plus x y)\n\n   (and (number? 'x) (number? 'y))\n\n   (with ([val (+ 'x 'y)])\n\n      val)]\n\n  [(folding-plus x y) (+ x y)])\n" "folding-plus collapses into the value of (+ x y) if both\nx and y are numeric constants.\nOtherwise, folding-plus is transformed into (+ x y) for\nlater evaluation.\nThe fender checks that the operands are numbers at expansion time, and\nthe with performs the evaluation.\nAs with fenders, expansion is performed only within a quoted expressions,\nsince quote sets the data apart from the remainder of the Scheme\nexpression.\n\n" "\nThe example below binds a list of pattern variables to a list of\ntemporary symbols, taking advantage of the fact that with allows\nus to bind patterns to expressions.\nThis list of temporaries helps us to implement the sigma syntactic\nextension.\nsigma is similar to lambda, except it assigns the identifiers\nin the identifier list instead of creating new bindings.\nIt may be used to perform a series of assignments in parallel.\n\n" "\n\n" "(extend-syntax (sigma)\n\n  [(sigma (x ...) e1 e2 ...)\n\n   (with ([(t ...) (map (lambda (x) (gensym)) '(x ...))])\n\n     (lambda (t ...)\n\n       (set! x t) ...\n\n       e1 e2 ...))])\n\n\n(let ([x 'a] [y 'b])\n\n  ((sigma (x y) (list x y)) y x)) --> (b a)\n" "The final example below uses extend-syntax to implement\ndefine-structure, following a similar example using\nsyntax-case in Section http://scheme.com/tspl4/./syntax.html#g1378.4 of\nThe Scheme Programming Language, 4th Edition.\n\n" "\nThe definition of define-structure makes use of two pattern/template\nclauses.\nTwo clauses are needed to handle the optionality of the second subexpression.\nThe first clause matches the form without the second subexpression and\nmerely converts it into the equivalent form with the second subexpression\npresent, but empty.\n\n" "\nThe definition also makes heavy use of with to evaluate Scheme\nexpressions at expansion time.\nThe first four with clauses are used to manufacture the identifiers\nthat name the automatically defined procedures.\n(The procedure format is particularly useful here, but it could be\nreplaced with string-append!, using symbol->string as needed.)\nThe first two clauses yield single identifiers (for the constructor and\npredicate), while the next two yield lists of identifiers (for the field\naccess and assignment procedures).\nThe fifth with clause (the final clause in the outer with)\nis used to count the total length vector needed for each instance of\nthe structure, which must include room for the name and all of the fields.\nThe final with clause (the only clause in the inner with)\nis used to create a list of vector indexes, one for each field (starting at\n1, since the structure name occupies position 0).\n\n" "\n\n" "(extend-syntax (define-structure)\n\n  [(define-structure (name id1 ...))\n\n   (define-structure (name id1 ...) ())]\n\n  [(define-structure (name id1 ...) ([id2 val] ...))\n\n   (with ([constructor\n\n           (string->symbol (format \"make-~a\" 'name))]\n\n          [predicate\n\n           (string->symbol (format \"~a?\" 'name))]\n\n          [(access ...)\n\n           (map (lambda (x)\n\n                  (string->symbol\n\n                    (format \"~a-~a\" 'name x)))\n\n                '(id1 ... id2 ...))]\n\n          [(assign ...)\n\n           (map (lambda (x)\n\n                  (string->symbol\n\n                    (format \"set-~a-~a!\" 'name x)))\n\n                '(id1 ... id2 ...))]\n\n          [count (length '(name id1 ... id2 ...))])\n\n     (with ([(index ...)\n\n             (let f ([i 1])\n\n               (if (= i 'count)\n\n                   '()\n\n                   (cons i (f (+ i 1)))))])\n\n       (begin\n\n         (define constructor\n\n           (lambda (id1 ...)\n\n             (let* ([id2 val] ...)\n\n               (vector 'name id1 ... id2 ...))))\n\n         (define predicate\n\n           (lambda (obj)\n\n             (and (vector? obj)\n\n                  (= (vector-length obj) count)\n\n                  (eq? (vector-ref obj 0) 'name))))\n\n         (define access\n\n           (lambda (obj)\n\n             (vector-ref obj index)))\n\n         ...\n\n         (define assign\n\n           (lambda (obj newval)\n\n             (vector-set! obj index newval)))\n\n         ...)))])\n") ("compat:s25" "\n\n\nsyntax: (define-structure (name id1 ...) ((id2 expr) ...))\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "A define-structure form is a definition and may appear anywhere\nand only where other definitions may appear.\n\n" "\ndefine-structure defines a new data structure, name, and\ncreates a set of procedures for creating and manipulating instances of\nthe structure.\nThe identifiers id1 ... and id2 ...\nname the fields of the data structure.\n\n" "\nThe following procedures are defined by define-structure:\n\n" "\n\na constructor procedure whose name is make-name,\n\n\na type predicate whose name is name?,\n\n\nan access procedure whose name is name-field\nfor each field name id1 ... and\nid2 ..., and\n\n\nan assignment procedure whose name is\nset-name-field!\nfor each field name id1 ... and id2 ....\n\n" "\n\n" "\nThe fields named by the identifiers id1 ... are\ninitialized by the arguments to the constructor procedure.\nThe fields named by the identifiers id2 ... are initialized\nexplicitly to the values of the expressions expr ....\nEach expression is evaluated within the scope of the identifiers\nid1 ... (bound to the corresponding field values) and any\nof the identifiers id2 ... (bound to the corresponding field\nvalues) appearing before it (as if within a let*).\n\n" "\nTo clarify, the constructor behaves as if defined as\n\n" "\n\n" "(define make-name\n\n  (lambda (id1 ...)\n\n    (let* ([id2 expr] ...)\n\n      body)))\n" "where body builds the structure from the values of the identifiers\nid1 ... and id2 ....\n\n" "\nIf no fields other than those initialized by the arguments to the\nconstructor procedure are needed, the second subexpression,\n((id2 expr) ...), may be omitted.\n\n" "\nThe following simple example\ndemonstrates how pairs might be defined in Scheme if they did not\nalready exist.\nBoth fields are initialized by the arguments to the constructor\nprocedure.\n\n" "\n\n" "(define-structure (pare car cdr))\n\n(define p (make-pare 'a 'b))\n\n\n(pare? p) --> #t\n\n(pair? p) --> #f\n\n(pare? '(a . b)) --> #f\n\n\n(pare-car p) --> a\n\n(pare-cdr p) --> b\n\n\n(set-pare-cdr! p (make-pare 'b 'c))\n\n\n(pare-car (pare-cdr p)) --> b\n\n(pare-cdr (pare-cdr p)) --> c\n" "The following example defines a handy string data structure, called a\nstretch-string, that grows as needed.\nThis example uses a field explicitly initialized to a value that\ndepends on the value of the constructor argument fields.\n\n" "\n\n" "(define-structure (stretch-string length fill)\n\n  ([string (make-string length fill)]))\n\n\n(define stretch-string-ref\n\n  (lambda (s i)\n\n    (let ([n (stretch-string-length s)])\n\n      (when (>= i n) (stretch-stretch-string! s (+ i 1) n))\n\n      (string-ref (stretch-string-string s) i))))\n\n\n(define stretch-string-set!\n\n  (lambda (s i c)\n\n    (let ([n (stretch-string-length s)])\n\n      (when (>= i n) (stretch-stretch-string! s (+ i 1) n))\n\n      (string-set! (stretch-string-string s) i c))))\n\n\n(define stretch-string-fill!\n\n  (lambda (s c)\n\n    (string-fill! (stretch-string-string s) c)\n\n    (set-stretch-string-fill! s c)))\n\n\n(define stretch-stretch-string!\n\n  (lambda (s i n)\n\n    (set-stretch-string-length! s i)\n\n    (let ([str (stretch-string-string s)]\n\n          [fill (stretch-string-fill s)])\n\n      (let ([xtra (make-string (- i n) fill)])\n\n        (set-stretch-string-string! s\n\n          (string-append str xtra))))))\n" "As often happens, most of the procedures defined automatically are\nused only to define more specialized procedures, in this case the procedures\nstretch-string-ref and stretch-string-set!.\nstretch-string-length and stretch-string-string are\nthe only automatically defined procedures that are likely to be\ncalled directly in code that uses stretch strings.\n\n" "\n\n" "(define ss (make-stretch-string 2 #\\X))\n\n\n(stretch-string-string ss) --> \"XX\"\n\n(stretch-string-ref ss 3) --> #\\X\n\n(stretch-string-length ss) --> 4\n\n(stretch-string-string ss) --> \"XXXX\"\n\n\n(stretch-string-fill! ss #\\@)\n\n(stretch-string-string ss) --> \"@@@@\"\n\n(stretch-string-ref ss 5) --> #\\@\n\n(stretch-string-string ss) --> \"@@@@@@\"\n\n\n(stretch-string-set! ss 7 #\\=)\n\n(stretch-string-length ss) --> 8\n\n(stretch-string-string ss) --> \"@@@@@@@=\"\n" "Section http://scheme.com/tspl4/./syntax.html#g1378.4 of The Scheme Programming Language, 4th Edition defines a simplified\nvariant of define-structure as an example of the use of\nsyntax-case.\nThe definition given below implements the complete version.\n\n" "\ndefine-structure expands into a series of definitions for names\ngenerated from the structure name and field names.\nThe generated identifiers are created with\ndatum->syntax to\nmake the identifiers visible where the define-structure\nform appears.\nSince a define-structure form expands into a begin\ncontaining definitions, it is itself a definition and can be used\nwherever definitions are valid.\n\n" "\n\n" "(define-syntax define-structure\n\n  (lambda (x)\n\n    (define gen-id\n\n      (lambda (template-id . args)\n\n        (datum->syntax template-id\n\n          (string->symbol\n\n            (apply string-append\n\n                   (map (lambda (x)\n\n                          (if (string? x)\n\n                              x\n\n                              (symbol->string\n\n                                (syntax->datum x))))\n\n                        args))))))\n\n    (syntax-case x ()\n\n      ((_ (name field1 ...))\n\n       (andmap identifier? #'(name field1 ...))\n\n       #'(define-structure (name field1 ...) ()))\n\n      ((_ (name field1 ...) ((field2 init) ...))\n\n       (andmap identifier? #'(name field1 ... field2 ...))\n\n       (with-syntax\n\n         ((constructor (gen-id #'name \"make-\" #'name))\n\n          (predicate (gen-id #'name #'name \"?\"))\n\n          ((access ...)\n\n           (map (lambda (x) (gen-id x #'name \"-\" x))\n\n                #'(field1 ... field2 ...)))\n\n          ((assign ...)\n\n           (map (lambda (x) (gen-id x \"set-\" #'name \"-\" x \"!\"))\n\n                #'(field1 ... field2 ...)))\n\n          (structure-length\n\n           (+ (length #'(field1 ... field2 ...)) 1))\n\n          ((index ...)\n\n           (let f ([i 1] [ids #'(field1 ... field2 ...)])\n\n             (if (null? ids)\n\n                 '()\n\n                 (cons i (f (+ i 1) (cdr ids)))))))\n\n         #'(begin\n\n             (define constructor\n\n               (lambda (field1 ...)\n\n                 (let* ([field2 init] ...)\n\n                   (vector 'name field1 ... field2 ...))))\n\n             (define predicate\n\n               (lambda (x)\n\n                 (and (vector? x)\n\n                      (#3%fx= (vector-length x) structure-length)\n\n                      (eq? (vector-ref x 0) 'name))))\n\n             (define access (lambda (x) (vector-ref x index)))\n\n             ...\n\n             (define assign\n\n               (lambda (x update) (vector-set! x index update)))\n\n             ...))))))\n") ("foreign:s4" "\n\n\nprocedure: (system command)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "command must be a string.\n\n" "\nThe system procedure creates a subprocess to perform the operation\nspecified by command.\nThe subprocess may communicate with the user through the same console\ninput and console output files used by the Scheme process.\nAfter creating the subprocess, system waits for the process to exit\nbefore returning.\n\n" "\nWhen the subprocess exits, system returns the exit code for the\nsubprocess, unless (on Unix-based systems) a signal caused the subprocess\nto terminate, in which case system returns the negation of the\nsignal that caused the termination, e.g., -1 for SIGHUP.\n\n\n") ("foreign:s5" "\n\n\nprocedure: (open-process-ports command)\n\n\nprocedure: (open-process-ports command b-mode)\n\n\nprocedure: (open-process-ports command b-mode ?transcoder)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "command must be a string.\nIf ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure creates textual ports, each of whose\ntranscoder is ?transcoder.\nOtherwise, this procedure returns binary ports.\nb-mode specifies the buffer mode used by each of the ports\nreturned by this procedure and defaults to block.\nBuffer modes are described in Section http://scheme.com/tspl4/./io.html#g1237.2 of\nThe Scheme Programming Language, 4th Edition.\n\n" "\nopen-process-ports creates a subprocess to perform the operation\nspecified by command.\nUnlike system, process returns immediately after creating the\nsubprocess, i.e., without waiting for the subprocess to terminate.\nIt returns four values:\n\n" "\n\ng24to-stdin is an output port to which Scheme can send output to the\nsubprocess through the subprocess's standard input file.\n\n\ng25from-stdout is an input port from which Scheme can read input from\nthe subprocess through the subprocess's standard output file.\n\n\ng26from-stderr is an input port from which Scheme can read input from\nthe subprocess through the subprocess's standard error file.\n\n\ng27process-id is an integer identifying the created subprocess\nprovided by the host operating system.\n\n" "\n\n" "\nIf the process exits or closes its standard output file descriptor, any\nprocedure that reads input from from-stdout will return an\nend-of-file object.\nSimilarly, if the process exits or closes its standard error file\ndescriptor, any procedure that reads input from from-stderr will\nreturn an end-of-file object.\n\n" "\nThe predicate input-port-ready?\nmay be used to detect whether input has been sent by the subprocess to\nScheme.\n\n" "\nIt is sometimes necessary to force output to be sent immediately\nto the subprocess by invoking flush-output-port on\nto-stdin, since Chez Scheme buffers the output for efficiency.\n\n" "\nOn UNIX systems, the process-id is the process identifier\nfor the shell created to execute command.\nIf command is used to invoke an executable file rather than\na shell command, it may be useful to prepend command with\nthe string \"exec \", which causes the shell to load and execute\nthe named executable directly, without forking a new\nprocess---the shell equivalent of a tail call.\nThis will reduce by one the number of subprocesses created and\ncause process-id to reflect the process identifier for the \nexecutable once the shell has transferred control.\n\n\n") ("foreign:s7" "\n\n\nprocedure: (process command)\n\nreturns: see explanation\n\nlibraries: (chezscheme)\n\n" "command must be a string.\n\n" "\nprocess is similar to open-process-ports, but less\ngeneral.\nIt does not return a port from which the subprocess's standard error output\ncan be read, and it always creates textual ports.\nIt returns a list of three values rather than the four separate values\nof open-process-ports.\nThe returned list contains, in order: from-stdout,\nto-stdin, and process-id, which correspond to the second,\nfirst, and fourth return values of open-process-ports.\n\n\n" "\n\n\n") ("foreign:s10" "\n\n\nsyntax: (foreign-procedure conv ... entry-exp (param-type ...) res-type)\n\nreturns: a procedure\n\nlibraries: (chezscheme)\n\n" "entry-exp must evaluate to a string representing a valid foreign\nprocedure entry point or an integer representing the address of the\nforeign procedure.\nThe param-types and res-type must be symbols or\nstructured forms as described below.\nWhen a foreign-procedure expression is evaluated, a Scheme procedure is\ncreated that will invoke the foreign procedure specified by entry-exp.\nWhen the procedure is called each argument is checked and converted according to\nthe specified param-type before it is passed to the foreign procedure.\nThe result of the foreign procedure call is converted as specified\nby the res-type.\nMultiple procedures may be created for the same foreign entry.\n\n" "\npage:conv-descriptionEach conv adjusts specifies the calling convention to be used.\nA #f is allowed as conv to indicate the default calling convention\non the target machine (so the #f has no effect).\nThree other conventions are currently supported under\nWindows: __stdcall, __cdecl, and __com (32-bit only).\nSince __cdecl is the default, specifying __cdecl is\nequivalent to specifying #f or no convention.\nFinally, conv can be __collect_safe to indicate that garbage\ncollection is allowed concurrent to a call of the foreign procedure.\n\n" "\nUse __stdcall to access most Windows API procedures.\nUse __cdecl for Windows API varargs procedures,\nfor C library procedures, and for most other procedures.\nUse __com to invoke COM interface methods; COM uses the\n__stdcall convention but additionally performs the indirections\nnecessary to obtain the correct method from a COM instance.\nThe address of the COM instance must be passed as the first argument,\nwhich should normally be declared as iptr.\nFor the __com interface only, entry-exp must evaluate\nto the byte offset of the method in the COM vtable.\nFor example,\n\n" "\n\n" "(foreign-procedure __com 12 (iptr double-float) integer-32)\n" "creates an interface to a COM method at offset 12 in the vtable\nencapsulated within the COM instance passed as the first argument,\nwith the second argument being a double float and the return\nvalue being an integer.\n\n" "\nUse __collect_safe to declare that garbage collection is\nallowed concurrent to the foreign procedure. The\n__collect_safe declaration allows concurrent collection by\ndeactivating the current thread (see fork-thread) when the\nforeign procedure is called, and the thread is activated again when\nthe foreign procedure returns. The __collect_safe declaration\nis useful, for example, when calling a blocking I/O call to allow\nother Scheme threads to run normally. Refrain from passing collectable memory to a\n__collect_safe foreign procedure, or use lock-object\nto lock the memory in place; see also Sdeactivate_thread. The\n__collect_safe declaration has no effect on a non-threaded\nversion of the system.\n\n" "\nFor example, calling the C sleep function with the default\nconvention will block other Scheme threads from performing a garbage\ncollection, but adding the __collect_safe declaration avoids that\nproblem:\n\n" "\n\n" "(define c-sleep\n\n  (foreign-procedure __collect_safe \"sleep\" (unsigned) unsigned))\n\n(c-sleep 10) ; sleeps for 10 seconds without blocking other threads\n" "If a foreign procedure that is called with __collect_safe can\ninvoke callables, then each callable should also be declared with\n__collect_safe so that the callable reactivates the thread.\n\n\n" "\nComplete type checking and conversion is performed on the parameters\nto a foreign procedure.\nThe types\nscheme-object,\nstring,\nwstring,\nu8*,\nu16*,\nu32*,\nutf-8,\nutf-16le,\nutf-16be,\nutf-32le,\nand\nutf-32be,\nmust be used with caution, however, since they allow allocated\nScheme objects to be used in places the Scheme memory management system\ncannot control. No problems will arise as long as such objects are not\nretained in foreign variables or data structures while Scheme code is running,\nand as long as they are not passed as arguments to a __collect_safe procedure,\nsince garbage collection can occur only while Scheme code is running\nor when concurrent garbage collection is enabled.\nOther parameter types are converted to equivalent foreign\nrepresentations and consequently they can be retained indefinitely in\nforeign variables and data structures.\n\n" "\nFor argument types string, wstring,\nutf-8,\nutf-16le,\nutf-16be,\nutf-32le, and\nutf-32be, an argument is converted\nto a fresh object that is passed to the foreign procedure. Since the\nfresh object is not accessible for locking before the call, it can\nnever be treated correctly for a __collect_safe foreign\nprocedure, so those types are disallowed as argument types for\na __collect_safe foreign procedure. For analogous reasons,\nthose types are disallowed as the result of a __collect_safe\nforeign callable.\n\n" "\nFollowing are the valid parameter types:\n\n" "\n" "integer-8: Exact integers from -27 through\n28 - 1 are valid.\nIntegers in the range 27 through 28 - 1 are treated as\ntwo's complement representations of negative numbers, e.g.,\n#xff is treated as -1.\nThe argument is passed to C as an integer of the appropriate size\n(usually signed char).\n\n" "\n" "unsigned-8: Exact integers from -27 to\n28 - 1 are valid.\nIntegers in the range -27 through -1 are treated as the\npositive equivalents of their two's complement representation,\ne.g., -1 is treated as #xff.\nThe argument is passed to C as an unsigned integer of the\nappropriate size (usually unsigned char).\n\n" "\n" "integer-16: Exact integers from -215 through\n216 - 1 are valid.\nIntegers in the range 215 through 216 - 1 are treated as\ntwo's complement representations of negative numbers, e.g.,\n#xffff is treated as -1.\nThe argument is passed to C as an integer of the appropriate size\n(usually short).\n\n" "\n" "unsigned-16: Exact integers from -215 to\n216 - 1 are valid.\nIntegers in the range -215 through -1 are treated as the\npositive equivalents of their two's complement representation,\ne.g., -1 is treated as #xffff.\nThe argument is passed to C as an unsigned integer of the\nappropriate size (usually unsigned short).\n\n" "\n" "integer-32: Exact integers from -231 through\n232 - 1 are valid.\nIntegers in the range 231 through 232 - 1 are treated as\ntwo's complement representations of negative numbers, e.g.,\n#xffffffff is treated as -1.\nThe argument is passed to C as an integer of the appropriate size\n(usually int).\n\n" "\n" "unsigned-32: Exact integers from -231 to\n232 - 1 are valid.\nIntegers in the range -231 through -1 are treated as the\npositive equivalents of their two's complement representation,\ne.g., -1 is treated as #xffffffff.\nThe argument is passed to C as an unsigned integer of the\nappropriate size (usually unsigned int).\n\n" "\n" "integer-64: Exact integers from -263 through\n264 - 1 are valid.\nIntegers in the range 263 through 264 - 1 are treated as\ntwo's complement representations of negative numbers.\nThe argument is passed to C as an integer of the appropriate\nsize (usually long long or, on many 64-bit platforms,\nlong).\n\n" "\n" "unsigned-64: Exact integers from -263 through\n264 - 1 are valid.\nIntegers in the range -263 through -1 are treated as the\npositive equivalents of their two's complement representation,\nThe argument is passed to C as an integer of the appropriate\nsize (usually unsigned long long or, on many 64-bit\nplatforms, long).\n\n" "\n" "double-float: Only Scheme flonums are valid---other\nScheme numeric types are not automatically converted.\nThe argument is passed to C as a double float.\n\n" "\n" "single-float: Only Scheme flonums are valid---other\nScheme numeric types are not automatically converted.\nThe argument is passed to C as a single float.\nSince Chez Scheme represents flonums in double-float format, the\nparameter is first converted into single-float format.\n\n" "\n" "short: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C short.\n\n" "\n" "unsigned-short: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C unsigned short.\n\n" "\n" "int: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C int.\n\n" "\n" "unsigned: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C unsigned.\n\n" "\n" "unsigned-int: This type is an alias unsigned.\nfixed-size type above, depending on the size of a C unsigned.\n\n" "\n" "long: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C long.\n\n" "\n" "unsigned-long: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C unsigned long.\n\n" "\n" "long-long: This type is an alias for the appropriate\nfixed-size type above, depending on the size of the nonstandard C type\nlong long.\n\n" "\n" "unsigned-long-long: This type is an alias for the appropriate\nfixed-size type above, depending on the size of the nonstandard C type\nunsigned long long.\n\n" "\n" "ptrdiff_t: This type is an alias for the appropriate\nfixed-size type above, depending on its definition in the host machine's\nstddef.h include file.\n\n" "\n" "size_t: This type is an alias for the appropriate unsigned\nfixed-size type above, depending on its definition in the host machine's\nstddef.h include file.\n\n" "\n" "ssize_t: This type is an alias for the appropriate signed\nfixed-size type above, depending on its definition in the host machine's\nstddef.h include file.\n\n" "\n" "iptr: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C pointer.\n\n" "\n" "uptr: This type is an alias for the appropriate\n(unsigned) fixed-size type above, depending on the size of a C pointer.\n\n" "\n" "void*: This type is an alias for uptr.\n\n" "\n" "fixnum: This type is equivalent to iptr,\nexcept only values in the fixnum range are valid.\nTransmission of fixnums is slightly faster than transmission of\niptr values, but the fixnum range is smaller, so some\niptr values do not have a fixnum representation.\n\n" "\n" "boolean: Any Scheme object may be passed as a boolean.\n#f is converted to 0; all other objects are converted to 1.\nThe argument is passed to C as an int.\n\n" "\n" "char: Only Scheme characters with Unicode scalar values\nin the range 0 through 255 are valid char parameters.\nThe character is converted to its Unicode scalar value, as with\nchar->integer, and passed to C as an unsigned char.\n\n" "\n" "wchar_t: Only Scheme characters are valid wchar_t parameters.\nUnder Windows and any other system where wchar_t holds only\n16-bit values rather than full Unicode scalar values, only characters with\n16-bit Unicode scalar values are valid.\nOn systems where wchar_t is a full 32-bit value, any Scheme\ncharacter is valid.\nThe character is converted to its Unicode scalar value, as with\nchar->integer, and passed to C as a wchar_t.\n\n" "\n" "wchar: This type is an alias for wchar_t.\n\n" "\n" "double: This type is an alias for double-float.\n\n" "\n" "float: This type is an alias for single-float.\n\n" "\n" "scheme-object: The argument is passed directly to the\nforeign procedure; no conversion or type checking is performed.\nThis form of parameter passing should be used with discretion.\nScheme objects should not be preserved in foreign variables or data structures\nsince the memory management system may relocate them between foreign procedure\ncalls.\n\n" "\n" "ptr: This type is an alias for scheme-object.\n\n" "\n" "u8*: The argument must be a Scheme bytevector or\n#f.\nFor #f, the null pointer (0) is passed to the foreign procedure.\nFor a bytevector, a pointer to the first byte of the bytevector's data\nis passed.\nIf the C routine to which the data is passed requires the input to be\nnull-terminated, a null (0) byte must be included explicitly in the\nbytevector.\nThe bytevector should not be retained in foreign variables or data\nstructures, since the memory management system may relocate or discard\nthem between foreign procedure calls, and use their storage for some\nother purpose.\n\n" "\n" "u16*: Arguments of this type are treated just like\narguments of type u8*.\nIf the C routine to which the data is passed requires the input to be\nnull-terminated, two null (0) bytes must be included explicitly in the\nbytevector, aligned on a 16-bit boundary.\n\n" "\n" "u32*: Arguments of this type are treated just like\narguments of type u8*.\nIf the C routine to which the data is passed requires the input to be\nnull-terminated, four null (0) bytes must be included explicitly in the\nbytevector, aligned on a 32-bit boundary.\n\n" "\n" "utf-8: The argument must be a Scheme string or\n#f.\nFor #f, the null pointer (0) is passed to the foreign procedure.\nA string is converted into a bytevector, as if via string->utf8,\nwith an added null byte, and the address of the first byte of the\nbytevector is passed to C.\nThe bytevector should not be retained in foreign variables or data\nstructures, since the memory management system may relocate or discard\nthem between foreign procedure calls and use their storage for some\nother purpose. The utf-8 argument type is not allowed for a\n__collect_safe foreign procedure.\n\n" "\n" "utf-16le: Arguments of this type are treated like arguments\nof type utf-8, except they are converted as if via\nstring->utf16 with endianness little, and they are\nextended by two null bytes rather than one.\n\n" "\n" "utf-16be: Arguments of this type are treated like arguments\nof type utf-8, except they are converted as if via\nstring->utf16 with endianness big, and they are\nextended by two null bytes rather than one.\n\n" "\n" "utf-32le: Arguments of this type are treated like arguments\nof type utf-8, except they are converted as if via\nstring->utf32 with endianness little, and they are\nextended by four null bytes rather than one.\n\n" "\n" "utf-32be: Arguments of this type are treated like arguments\nof type utf-8, except they are converted as if via\nstring->utf32 with endianness big, and they are\nextended by four null bytes rather than one.\n\n" "\n" "string: This type is an alias for utf-8.\n\n" "\n" "wstring: This type is an alias for utf-16le,\nutf-16be, utf-32le, or utf-32be as\nappropriate depending on the size of a C wchar_t and\nthe endianness of the target machine.\nFor example, wstring is equivalent to utf-16le\nunder Windows running on Intel hardware.\n\n" "\n" "(* ftype-name): This type allows a pointer to a foreign\ntype (ftype) to be passed.\nThe argument must be an ftype pointer of the type identified by\nftype-name,\nand the actual argument is the address encapsulated in the\nftype pointer.\nSee Section 4.5 for a description of\nforeign types.\n\n" "\n" "(& ftype-name): This type allows a foreign\ntype (ftype) to be passed as a value, but represented\non the Scheme side as a pointer to the foreign-type data.\nThat is, a (& ftype-name) argument is represented on\nthe Scheme side the same as a (* ftype-name) argument,\nbut a (& ftype-name) argument is passed to the foreign procedure as the\ncontent at the foreign pointer's address instead of as the\naddress. For example, if ftype-name identifies a struct type,\nthen (& ftype-name) passes a struct argument instead of\na struct-pointer argument. The ftype-name cannot refer to an array type.\n\n" "\n" "The result types are similar to the parameter types with the addition of a\nvoid type.\nIn general, the type conversions are the inverse of the parameter type\nconversions.\nNo error checking is performed on return, since the system cannot determine\nwhether a foreign result is actually of the indicated type.\nParticular caution should be exercised with the result types\nscheme-object,\ndouble-float,\ndouble,\nsingle-float,\nfloat,\nand the types that result in the construction of bytevectors or strings,\nsince invalid\nreturn values may lead to invalid memory references as well as incorrect\ncomputations.\nFollowing are the valid result types:\n\n" "\n" "void: The result of the foreign procedure call is\nignored and an unspecified Scheme object is returned.\nvoid should be used when foreign procedures are called for effect only.\n\n" "\n" "integer-8: The result is interpreted as a signed\n8-bit integer and is converted to a Scheme exact integer.\n\n" "\n" "unsigned-8: The result is interpreted as an unsigned\n8-bit integer and is converted to a Scheme nonnegative exact integer.\n\n" "\n" "integer-16: The result is interpreted as a signed\n16-bit integer and is converted to a Scheme exact integer.\n\n" "\n" "unsigned-16: The result is interpreted as an unsigned\n16-bit integer and is converted to a Scheme nonnegative exact integer.\n\n" "\n" "integer-32: The result is interpreted as a signed\n32-bit integer and is converted to a Scheme exact integer.\n\n" "\n" "unsigned-32: The result is interpreted as an unsigned\n32-bit integer and is converted to a Scheme nonnegative exact integer.\n\n" "\n" "integer-64: The result is interpreted as a signed\n64-bit integer and is converted to a Scheme exact integer.\n\n" "\n" "unsigned-64: The result is interpreted as an unsigned\n64-bit integer and is converted to a Scheme nonnegative exact integer.\n\n" "\n" "double-float: The result is interpreted as a double float\nand is translated into a Chez Scheme flonum.\n\n" "\n" "single-float: The result is interpreted as a single float\nand is translated into a Chez Scheme flonum.\nSince Chez Scheme represents flonums in double-float format, the\nresult is first converted into double-float format.\n\n" "\n" "short: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C short.\n\n" "\n" "unsigned-short: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C unsigned short.\n\n" "\n" "int: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C int.\n\n" "\n" "unsigned: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C unsigned.\n\n" "\n" "unsigned-int: This type is an alias unsigned.\nfixed-size type above, depending on the size of a C unsigned.\n\n" "\n" "long: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C long.\n\n" "\n" "unsigned-long: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C unsigned long.\n\n" "\n" "long-long: This type is an alias for the appropriate\nfixed-size type above, depending on the size of the nonstandard C type\nlong long.\n\n" "\n" "unsigned-long-long: This type is an alias for the appropriate\nfixed-size type above, depending on the size of the nonstandard C type\nunsigned long long.\n\n" "\n" "ptrdiff_t: This type is an alias for the appropriate\nfixed-size type above, depending on its definition in the host machine's\nstddef.h include file.\n\n" "\n" "size_t: This type is an alias for the appropriate unsigned\nfixed-size type above, depending on its definition in the host machine's\nstddef.h include file.\n\n" "\n" "ssize_t: This type is an alias for the appropriate signed\nfixed-size type above, depending on its definition in the host machine's\nstddef.h include file.\n\n" "\n" "iptr: This type is an alias for the appropriate\nfixed-size type above, depending on the size of a C pointer.\n\n" "\n" "uptr: This type is an alias for the appropriate\n(unsigned) fixed-size type above, depending on the size of a C pointer.\n\n" "\n" "void*: This type is an alias for uptr.\n\n" "\n" "boolean: This type converts a C int return value\ninto a Scheme boolean.\n0 is converted to #f; all other values are converted to #t.\n\n" "\n" "char: This type converts a C unsigned char return value\ninto a Scheme character, as if via integer->char.\n\n" "\n" "wchar_t: This type converts a C wchar_t return value\ninto a Scheme character, as if via integer->char.\nThe wchar_t value must be a valid Unicode scalar value.\n\n" "\n" "wchar: This type is an alias for wchar_t.\n\n" "\n" "double: This type is an alias for double-float.\n\n" "\n" "float: This type is an alias for single-float.\n\n" "\n" "scheme-object: The result is assumed to be a valid Scheme\nobject, and no conversion is performed.\nThis type is inherently dangerous, since an invalid Scheme object can corrupt\nthe memory management system with unpredictable (but always unpleasant) results.\nSince Scheme objects are actually typed pointers, even integers cannot\nsafely be returned as type scheme-object unless they were created by\nthe Scheme system.\n\n" "\n" "ptr: This type is an alias for scheme-object.\n\n" "\n" "u8*: The result is interpreted as a pointer to a\nnull-terminated sequence of 8-bit unsigned integers (bytes).\nIf the result is a null pointer, #f is returned.\nOtherwise, the sequence of bytes is stored in a freshly allocated\nbytevector of the appropriate length, and the bytevector is returned to\nScheme.\n\n" "\n" "u16*: The result is interpreted as a pointer to a\nnull-terminated sequence of 16-bit unsigned integers.\nIf the result is a null pointer, #f is returned.\nOtherwise, the sequence of 16-bit integers is stored in a freshly allocated\nbytevector of the appropriate length, and the bytevector is returned to\nScheme.\nThe null terminator must be a properly aligned 16-bit word,\ni.e., two bytes of zero aligned on a 16-bit boundary.\n\n" "\n" "u32*: The result is interpreted as a pointer to a\nnull-terminated sequence of 32-bit unsigned integers.\nIf the result is a null pointer, #f is returned.\nOtherwise, the sequence of 16-bit integers is stored in a freshly allocated\nbytevector of the appropriate length, and the bytevector is returned to\nScheme.\nThe null terminator must be a properly aligned 32-bit word,\ni.e., four bytes of zero aligned on a 32-bit boundary.\n\n" "\n" "utf-8: The result is interpreted as a pointer to a\nnull-terminated sequence of 8-bit unsigned character values.\nIf the result is a null pointer, #f is returned.\nOtherwise, the sequence of bytes is converted into a Scheme string, as if\nvia utf8->string, and the string is returned to Scheme.\n\n" "\n" "utf-16le: The result is interpreted as a pointer to a\nnull-terminated sequence of 16-bit unsigned integers.\nIf the result is a null pointer, #f is returned.\nOtherwise, the sequence of integers is converted into a Scheme string, as if\nvia utf16->string with endianness little,\nand the string is returned to Scheme.\nA byte-order mark in the sequence of integers as treated as an ordinary\ncharacter value and does not affect the byte ordering.\n\n" "\n" "utf-16be: The result is interpreted as a pointer to a\nnull-terminated sequence of 16-bit unsigned integers.\nIf the result is a null pointer, #f is returned.\nOtherwise, the sequence of integers is converted into a Scheme string, as if\nvia utf16->string with endianness big,\nand the string is returned to Scheme.\nA byte-order mark in the sequence of integers as treated as an ordinary\ncharacter value and does not affect the byte ordering.\n\n" "\n" "utf-32le: The result is interpreted as a pointer to a\nnull-terminated sequence of 32-bit unsigned integers.\nIf the result is a null pointer, #f is returned.\nOtherwise, the sequence of integers is converted into a Scheme string, as if\nvia utf32->string with endianness little,\nand the string is returned to Scheme.\nA byte-order mark in the sequence of integers as treated as an ordinary\ncharacter value and does not affect the byte ordering.\n\n" "\n" "utf-32be: The result is interpreted as a pointer to a\nnull-terminated sequence of 32-bit unsigned integers.\nIf the result is a null pointer, #f is returned.\nOtherwise, the sequence of integers is converted into a Scheme string, as if\nvia utf32->string with endianness big,\nand the string is returned to Scheme.\nA byte-order mark in the sequence of integers as treated as an ordinary\ncharacter value and does not affect the byte ordering.\n\n" "\n" "string: This type is an alias for utf-8.\n\n" "\n" "wstring: This type is an alias for utf-16le,\nutf-16be, utf-32le, or utf-32be as\nappropriate depending on the size of a C wchar_t and\nthe endianness of the target machine.\nFor example, wstring is equivalent to utf-16le\nunder Windows running on Intel hardware.\n\n" "\n" "(* ftype-name): The result is interpreted as the address of a foreign object\nwhose structure is described by the ftype identified by ftype-name, and a freshly allocated\nftype pointer encapsulating the address is returned.\nSee Section 4.5 for a description of\nforeign types.\n\n" "\n" "(& ftype-name): The result is interpreted as a foreign object\nwhose structure is described by the ftype identified by ftype-name, where the foreign\nprocedure returns a ftype-name result, but the caller\nmust provide an extra (* ftype-name) argument before\nall other arguments to receive the result. An unspecified Scheme object\nis returned when the foreign procedure is called, since the result\nis instead written into storage referenced by the extra argument.\n The ftype-name cannot refer to an array type.\n\n" "\n" "Consider a C identity procedure:\n\n" "int id(x) int x; { return x; }\n" "After a file containing this procedure has been compiled and loaded\n(see Section 4.6) it can be accessed as follows:\n\n" "\n\n" "(foreign-procedure \"id\"\n\n  (int) int) --> #<procedure>\n\n((foreign-procedure \"id\"\n\n   (int) int)\n\n 1) --> 1\n\n(define int-id\n\n  (foreign-procedure \"id\"\n\n    (int) int))\n\n(int-id 1) --> 1\n" "The \"id\" entry can also be interpreted as accepting and returning\na boolean:\n\n" "\n\n" "(define bool-id\n\n  (foreign-procedure \"id\"\n\n    (boolean) boolean))\n\n(bool-id #f) --> #f\n\n(bool-id #t) --> #t\n\n(bool-id 1) --> #t\n" "As the last example reveals, bool-id is actually a conversion procedure.\nWhen a Scheme object is passed as type boolean it is converted to\n0 or 1, and when it is returned it is converted to #f or #t.\nAs a result objects are converted to normalized boolean values.\nThe \"id\" entry can be used to create other conversion procedures by\nvarying the type specifications:\n\n" "\n\n" "(define int->bool\n\n  (foreign-procedure \"id\"\n\n    (int) boolean))\n\n(int->bool 0) --> #f\n\n(int->bool 5) --> #t\n\n(map (foreign-procedure \"id\"\n\n       (boolean) int)\n\n     '(#t #f)) --> (1 0)\n\n(define void\n\n  (foreign-procedure \"id\"\n\n    (int) void))\n\n(void 10) --> unspecified\n" "There are, of course, simpler and more efficient ways of accomplishing\nthese conversions directly in Scheme.\n\n" "\nA foreign entry is resolved when a\nforeign-procedure expression\nis evaluated, rather than either when the code is loaded or each time\nthe procedure is invoked.\nThus, the following definition is always valid since the\nforeign-procedure expression is not immediately evaluated:\n\n" "\n\n" "(define doit\n\n  (lambda ()\n\n    ((foreign-procedure \"doit\" () void))))\n" "doit should not be invoked, however, before an entry for\n\"doit\" has been provided.\nSimilarly, an entry for \"doit\" must exist before the following code\nis evaluated:\n\n" "\n\n" "(define doit\n\n  (foreign-procedure \"doit\" () void))\n" "Although the second definition is more constraining on the load order\nof foreign files, it is more efficient since the entry resolution need\nbe done only once.\n\n" "\nIt is often useful to define a template to be used\nin the creation of several foreign procedures with similar argument\ntypes and return values.\nFor example, the following code creates two foreign procedures from\na single foreign procedure expression, by abstracting out the foreign\nprocedure name:\n\n" "\n\n" "(define double->double\n\n  (lambda (proc-name)\n\n    (foreign-procedure proc-name\n\n      (double)\n\n      double)))\n\n\n(define log10 (double->double \"log10\"))\n\n(define gamma (double->double \"gamma\"))\n" "Both \"log10\" and \"gamma\" must be available as foreign\nentries (see Section 4.6)\nbefore the corresponding definitions.\nThe use of foreign procedure templates can simplify the coding process\nand reduce the amount of code generated when a large number of\nforeign procedures are involved, e.g., when an entire library of\nforeign procedures is imported into Scheme.\n\n\n") ("foreign:s127" "\n\n\nsyntax: (foreign-callable conv ... proc-exp (param-type ...) res-type)\n\nreturns: a code object\n\nlibraries: (chezscheme)\n\n" "proc-exp must evaluate to a procedure, the Scheme procedure that\nis to be invoked by foreign code.\nThe parameter and result types are as described for\nforeign-procedure in Section 4.2,\nexcept that the requirements and conversions are effectively reversed,\ne.g., the conversions described for foreign-procedure\narguments are performed for foreign-callable return\nvalues.\nA (& ftype) argument to the callable refers to an address\nthat is valid only during the dynamic extent of the callback invocation.\nA (& ftype) result type for a callable causes the Scheme\nprocedure to receive an extra (& ftype) argument before\nall others; the Scheme procedure should write a result into the extra\nargument, and the direct result of the Scheme procedure is ignored.\nType checking is performed for result values but not argument values,\nsince the parameter\nvalues are provided by the foreign code and must be assumed to be\ncorrect.\n\n" "\nEach conv adjusts the calling convention to be used.\nforeign-callable supports the same conventions as\nforeign-procedure with the exception of __com.\nThe __collect_safe convention for a callable activates a\ncalling thread if the thread is not already activated, and\nthe thread's activation state is reverted when the callable\nreturns. If a calling thread is not currently registered with\nthe Scheme system, then reverting the thread's activation state implies\ndestroying the thread's registration (see Sdestroy_thread).\n\n\n" "\nThe value produced by foreign-callable is a Scheme code object,\nwhich contains some header information as well as code that performs\nthe call to the encapsulated Scheme procedure.\nThe code object may be converted into a foreign-callable address via\nforeign-callable-entry-point, which returns an integer representing\nthe address of the entry point within the code object.\n(The C-callable library function Sforeign_callable_entry_point, described in\nSection 4.8, may be used to obtain the entry point\nas well.)  \nThis is an implicit pointer into a Scheme object, and\nin many cases, it is necessary to lock the code object\n(using lock-object)\nbefore converting it into an entry point\nto prevent Scheme's storage management system from\nrelocating or destroying the code object, e.g., when the entry point is\nregistered as a callback and retained in the \"C\" side indefinitely.\n\n" "\nThe following code creates a foreign-callable code object, locks\nthe code object, and returns the entry point.\n\n" "\n\n" "(let ([x (foreign-callable\n\n           (lambda (x y) (pretty-print (cons x (* y 2))))\n\n           (string integer-32)\n\n           void)])\n\n  (lock-object x)\n\n  (foreign-callable-entry-point x))\n" "Unless the entry point is intended to be permanent, a pointer to the\ncode object returned by foreign-callable should be retained\nso that it can be unlocked when no longer needed.\n\n" "\nMixed use of foreign-callable and foreign-procedure\nmay result in nesting of foreign and Scheme calls, and this\nresults in some interesting considerations when continuations are\ninvolved, directly or indirectly (as via the default exception handler).\nSee Section 4.4 for a discussion of the\ninteraction between foreign calls and continuations.\n\n" "\nThe following example demonstrates how the \"callback\" functions\nrequired by many windowing systems might be defined in Scheme with the\nuse of foreign-callable.\nAssume that the following C code has been compiled and loaded\n(see Section 4.6).\n\n" "\n\n" "#include <stdio.h>\n\n\ntypedef void (*CB)(char);\n\n\nCB callbacks[256];\n\n\nvoid cb_init(void) {\n\n   int i;\n\n\n   for (i = 0; i < 256; i += 1)\n\n       callbacks[i] = (CB)0;\n\n}\n\n\nvoid register_callback(char c, CB cb) {\n\n    callbacks[c] = cb;\n\n}\n\n\nvoid event_loop(void) {\n\n    CB f; char c;\n\n\n    for (;;) {\n\n        c = getchar();\n\n        if (c == EOF) break;\n\n        f = callbacks[c];\n\n        if (f != (CB)0) f(c);\n\n    }\n\n}\n" "Interfaces to these functions may be defined in Scheme as follows.\n\n" "\n\n" "(define cb-init\n\n  (foreign-procedure \"cb_init\" () void))\n\n(define register-callback\n\n  (foreign-procedure \"register_callback\" (char void*) void))\n\n(define event-loop\n\n  (foreign-procedure __collect_safe \"event_loop\" () void))\n" "A callback for selected characters can then be defined.\n\n" "\n\n" "(define callback\n\n  (lambda (p)\n\n    (let ([code (foreign-callable __collect_safe p (char) void)])\n\n      (lock-object code)\n\n      (foreign-callable-entry-point code))))\n\n(define ouch\n\n  (callback\n\n    (lambda (c)\n\n      (printf \"Ouch! Hit by '~c'~%\" c))))\n\n(define rats\n\n  (callback\n\n    (lambda (c)\n\n      (printf \"Rats! Received '~c'~%\" c))))\n\n\n(cb-init)\n\n(register-callback #\\a ouch)\n\n(register-callback #\\c rats)\n\n(register-callback #\\e ouch)\n" "This sets up the following interaction.\n\n" "\n\n" "> (event-loop)\n\na\n\nOuch! Hit by 'a'\n\nb\n\nc\n\nRats! Received 'c'\n\nd\n\ne\n\nOuch! Hit by 'e'\n" "The __collect_safe declarations in this example ensure that\nother threads can continue working while event-loop\nblocks waiting for input.\nA more well-behaved version of the example would save each code object\nreturned by foreign-callable and unlock it when it is no longer\nregistered as a callback.\n\n\n") ("foreign:s130" "\n\n\nprocedure: (foreign-callable-entry-point code)\n\nreturns: the address of the foreign-callable entry point in code\n\nlibraries: (chezscheme)\n\n" "code should be a code object produced by foreign-callable.\n\n\n") ("foreign:s131" "\n\n\nprocedure: (foreign-callable-code-object address)\n\nreturns: the code object corresponding to the foreign-callable entry point address\n\nlibraries: (chezscheme)\n\n" "address must be an exact integer and should be the address of the\nentry point of a code object produced by foreign-callable.\n\n\n") ("foreign:s132" "\n\n\nprocedure: (foreign-alloc n)\n\nreturns: the address of a freshly allocated block of foreign data n bytes long\n\nlibraries: (chezscheme)\n\n" "n must be a positive fixnum.\nThe returned value is an exact integer and is guaranteed to be properly\naligned for any type of value according to the requirements of the\nunderlying hardware.\nAn exception is raised with condition type &assertion\nif the block of foreign data cannot be allocated.\n\n\n") ("foreign:s133" "\n\n\nprocedure: (foreign-free address)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure frees the block of storage to which address points.\naddress must be an exact integer in the range -2w-1 through\n2w - 1, where w is the width in bits of a pointer, e.g., 64 for a\n64-bit machine.\nIt should be an address returned by an earlier call to\nforeign-alloc and not subsequently passed to\nforeign-free.\n\n") ("foreign:s134" "\n\n\nprocedure: (foreign-ref type address offset)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "foreign-ref extracts the value of type type\nfrom the memory location at offset bytes offset from\naddress.\n\n" "\ntype must be a symbol identifying the type of value\nto be extracted.\nThe following types have machine-dependent sizes and correspond to the\nlike-named C types:\n\n" "\n\nshort,\nunsigned-short,\nint,\nunsigned,\nunsigned-int,\nlong,\nunsigned-long,\nlong-long,\nunsigned-long-long,\nptrdiff_t,\nsize_t,\nssize_t,\nchar,\nwchar_t,\nfloat,\ndouble, and\nvoid*.\n\n" "\n\n" "\nThe types long-long and unsigned-long-long\ncorrespond to the C types long long \nand unsigned long long.\nA value of type char is referenced as a single\nbyte and converted (as if via integer->char)\ninto a Scheme character.\nA value of type wchar_t is converted (as if via\ninteger->char) into a Scheme character.\nThe value must be a valid Unicode scalar value.\n\n" "\nwchar is an alias for wchar_t.\n\n" "\nSeveral additional machine-dependent types are recognized:\n\n" "\n\niptr,\nuptr,\nfixnum, and\nboolean.\n\n" "\n\n" "\nuptr is equivalent to void*; both are treated as\nunsigned integers the size of a pointer.\niptr is treated as a signed integer the size of a pointer.\nfixnum is treated as an iptr, but with a range limited\nto the fixnum range.\nboolean is treated as an int, with zero\nconverted to the Scheme value #f and all\nother values converted to #t.\n\n" "\nFinally, several fixed-sized types are also supported:\n\n" "\n\ninteger-8,\nunsigned-8,\ninteger-16,\nunsigned-16,\ninteger-32,\nunsigned-32,\ninteger-64,\nunsigned-64,\nsingle-float, and\ndouble-float.\n\n" "\n\n" "\naddress must be an exact integer in the range -2w-1 through\n2w - 1, where w is the width in bits of a pointer, e.g., 64 for a\n64-bit machine.\noffset must be an exact fixnum.\nThe sum of address and offset should address a readable block\nof memory large enough to hold a value of type type, within a block\nof storage previously returned by foreign-alloc and not\nsubsequently freed by foreign-free or within a block of storage\nobtained via some other mechanism, e.g., a foreign call.\nFor multiple-byte values, the native endianness of the machine is assumed.\n\n") ("foreign:s135" "\n\n\nprocedure: (foreign-set! type address offset value)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "foreign-set! stores a representation of value as type\ntype offset bytes into the block of foreign data addressed by\naddress.\n\n" "\ntype must be a symbol identifying the type of value\nto be stored, one of those listed in the description of\nforeign-ref above.\nScheme characters are converted to type char or wchar_t\nas if via char->integer.\nFor type boolean, Scheme #f is converted to the\nint 0, and any other Scheme object is converted to 1.\n\n" "\naddress must be an exact integer in the range -2w-1 through\n2w - 1, where w is the width in bits of a pointer, e.g., 64 for a\n64-bit machine.\noffset must be an exact fixnum.\nThe sum of address and offset should address a writable block\nof memory large enough to hold a value of type type, within a block\nof storage previously returned by foreign-alloc and not\nsubsequently freed by foreign-free or within a block of storage\nobtained via some other mechanism, e.g., a foreign call.\nvalue must be an appropriate value for type, e.g.,\na floating-point number for the float types or an exact integer within\nthe appropriate range for the integer types.\nFor multiple-byte values, the native endianness of the machine is assumed.\n\n") ("foreign:s136" "\n\n\nprocedure: (foreign-sizeof type)\n\nreturns: the size in bytes of type\n\nlibraries: (chezscheme)\n\n" "type must be one of the symbols listed in the description\nof foreign-ref above.\n\n\n") ("foreign:s137" "\ndefn:define-ftype\n\n\nsyntax: (define-ftype ftype-name ftype)\n\n\nsyntax: (define-ftype (ftype-name ftype) ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "A define-ftype form is a definition and can appear anywhere\nother definitions can appear.\nIt establishes one or more foreign-type (ftype) bindings for the identifier\nftype-name or identifiers ftype-name ...\nto the foreign type represented ftype or the foreign types\nrepresented by ftype ....\nEach ftype-name can be used to access foreign objects with the\ndeclared shape, and each can be used in the formation of other ftypes.\n\n" "\nAn ftype must take one of the following forms:\n\n" "\n\n" "ftype-name\n\n(struct (field-name ftype) ...)\n\n(union (field-name ftype) ...)\n\n(array length ftype)\n\n(* ftype)\n\n(bits (field-name signedness bits) ...)\n\n(function conv ... (ftype ...) ftype)\n\n(packed ftype)\n\n(unpacked ftype)\n\n(endian endianness ftype)\n" "where length is an exact nonnegative integer,\nbits is an exact positive integer,\nfield-name is an identifier,\nconv is #f or a string naming a valid convention\nas described on page 4.2,\nsignedness is either signed or unsigned, and\nendianness is one of native, big, or little.\n\n" "\nA restriction not reflected above is that \nfunction ftypes cannot be used as the types of\nfield names or array elements.\nThat is, function ftypes are valid only at the\ntop level of an ftype, e.g,:\n\n" "\n\n" "(define-ftype bvcopy_t (function (u8* u8* size_t) void))\n" "or as the immediate sub-type of a pointer (*) ftype, as in the\nfollowing definitions, which are equivalent assuming the definition of\nbvcopy_t above.\n\n" "\n\n" "(define-ftype A\n\n  (struct\n\n    [x int]\n\n    [f (* (function (u8* u8* size_t) void))]))\n\n\n(define-ftype A\n\n  (struct\n\n    [x int]\n\n    [f (* bvcopy_t)]))\n" "That is, a function cannot be embedded within a struct, union,\nor array, but a pointer to a function can be so embedded.\n\n" "\nThe following definitions establish ftype bindings for F,\nA, and E.\n\n" "\n\n" "(define-ftype F (function (wchar_t int) int))\n\n\n(define-ftype A (array 10 wchar_t))\n\n\n(define-ftype E\n\n  (struct\n\n    [a int]\n\n    [b double]\n\n    [c (array 25\n\n         (struct\n\n           [a short]\n\n           [_ long]\n\n           [b A]))]\n\n    [d (endian big\n\n         (union\n\n           [v1 unsigned-32]\n\n           [v2 (bits\n\n                 [hi unsigned 12]\n\n                 [lo unsigned 20])]))]\n\n    [e (* A)]\n\n    [f (* F)]))\n" "The ftype F describes the type of a foreign function that\ntakes two arguments, a wide character and an integer, and returns an\ninteger.\nThe ftype A is simply an array of 10 wchar_t values,\nand its size will be 10 times the size of a single wchar_t.\nThe ftype E is a structure with six fields: an integer\na, a double-float b, an array c, a\nunion d, a pointer e, and a pointer f.\nThe array c is an array of 25 structs, each of which\ncontains a short integer, a long integer, and a A array.\nThe size of the c array will be 25 times the size of a\nsingle A array, plus 25 times the space needed to store\neach of the short and long integers.\nThe union d is either a 32-bit unsigned integer or\na 32-bit unsigned integer split into high (12 bits) and low (20 bits)\ncomponents.\nThe fields of a union overlap so that writing to one effectively\noverlaps the other.\nThus, one can use the d union type to split apart an\nunsigned integer by writing the integer into v1 and reading\nthe pieces from hi and lo.\nThe pointer e points to an A array; it is not\nitself an array, and its size is just the size of a single pointer.\nSimilarly, f points to a function, and its size is also\nthat of a single pointer.\n\n" "\nAn underscore ( _ ) can be used as the field name for one or\nmore fields of a struct, union, or bits ftype.\nSuch fields are included in the layout but are considered unnamed and\ncannot be accessed via the ftype operators described below.\nThus, in the example above, the long field within the\nc array is inaccessible.\n\n" "\nNon-underscore field names are handled symbolically, i.e.,\nthey are treated as symbols rather than identifiers.\nEach symbol must be unique (as a symbol) with respect to the other\nfield names within a single struct, union,\nor bits ftype but need not be\nunique with respect to field names in other struct,\nunion, or bits ftypes within the same\nftype.\n\n" "\nEach ftype-name in an ftype must either\n(a) have been defined previously by define-ftype,\n(b) be defined by the current define-ftype,\nor\n(c) be a base-type name, i.e., one of the type names supported by\nforeign-ref and foreign-set!.\nIn case (b), any reference within one ftype to the\nftype-name of one of the earlier bindings is permissible,\nbut a reference to the ftype-name of the current or a\nsubsequent binding can appear only within a pointer field.\n\n" "\nFor example, in:\n\n" "\n\n" "(define-ftype\n\n  [Qlist (struct\n\n           [head int]\n\n           [tail (* Qlist)])])\n" "the reference to Qlist is permissible since it appears\nwithin a pointer field.\nSimilarly, in:\n\n" "\n\n" "(define-ftype\n\n  [Qfrob (struct\n\n           [head int]\n\n           [tail (* Qsnark)])]\n\n  [Qsnark (struct\n\n            [head int]\n\n            [xtra Qfrob]\n\n            [tail (* Qfrob)])])\n" "the mutually recursive references to Qsnark and Qfrob\nare permissible.\nIn the following, however:\n\n" "\n\n" "(define-ftype\n\n  [Qfrob (struct\n\n           [head int]\n\n           [xtra Qfrob]\n\n           [tail (* Qsnark)])]\n\n  [Qsnark (struct\n\n            [head int]\n\n            [tail (* Qfrob)])])\n" "the reference to Qfrob within the ftype for Qfrob\nis invalid, and in:\n\n" "\n\n" "(define-ftype\n\n  [Qfrob (struct\n\n           [head int]\n\n           [xtra Qsnark]\n\n           [tail (* Qsnark)])]\n\n  [Qsnark (struct\n\n            [head int]\n\n            [tail (* Qfrob)])])\n" "the reference to Qsnark is similarly invalid.\n\n" "\nBy default, padding is inserted where appropriate to maintain\nproper alignment of multiple-byte scalar values in an attempt to\nmirror the target machine's C struct layout conventions, where\nsuch layouts are adequately documented.\nFor packed ftypes (ftypes wrapped in a packed form with\nno closer enclosing unpacked form), this padding is not\ninserted.\n\n" "\nMultiple-byte scalar values are stored in memory using the\ntarget machine's native \"endianness,\" e.g., little\non X86 and X86_64-based platforms and big on\nSparc-based platforms.\nBig-endian or little-endian representation can be forced via\nthe endian ftype with a big or little\nendianness specifier.\nThe native specifier can be used to force a return\nback to native representation.\nEach endian form affects only ftypes nested syntactically\nwithin it and not nested within a closer endian form.\nThe endianness of an ftype is fixed once it is defined.\n\n" "\nThe total size n of the fields within an ftype bits form must\nbe 8, 16, 24, 32, 40, 48, 56, or 64.  padding must be added manually if needed.\nIn little-endian representation, the first field occupies\nthe low-order bits of the containing 8, 16, 24, 32, 40, 48, 56, or 64-bit word,\nwith each subsequent field just above the preceding field.\nIn big-endian representation, the first field occupies the\nhigh-order bits, with each subsequent field just below the\npreceding field.\n\n" "\nTwo ftypes are considered equivalent only if defined by the\nsame ftype binding.\nIf two ftype definitions look identical but appear in two\nparts of the same program, the ftypes are not identical,\nand attempts to access one using the name of the other via\nthe operators described below will fail with a run-time\nexception.\n\n" "\nArray bounds must always be constant.\nIf an array's length cannot be known until run time, the array\ncan be placed at the end of the ftype (and any containing ftype)\nand declared to have size zero, as illustrated by the example below.\n\n" "\n\n" "(define-ftype Vec\n\n  (struct\n\n    [len int]\n\n    [data (array 0 double)]))\n\n(define make-Vec\n\n  (lambda (n)\n\n    (let ([fptr (make-ftype-pointer Vec\n\n                  (foreign-alloc\n\n                    (+ (ftype-sizeof Vec)\n\n                       (* (ftype-sizeof double) n))))])\n\n      (ftype-set! Vec (len) fptr n)\n\n      fptr)))\n\n(define x (make-Vec 100))\n\n(/ (- (ftype-pointer-address (ftype-&ref Vec (data 10) x))\n\n      (ftype-pointer-address x)                            --> 10\n\n      (ftype-sizeof int))\n\n   (ftype-sizeof double))\n\n(foreign-free (ftype-pointer-address x))\n" "No array bounds checks are performed for zero-length arrays.\nOnly one variable-sized array can appear\nin a single foreign object, but one can work around this by\ntreating the object as multiple individual objects.\n\n" "\nTo avoid specifying the constant length of an array in more than\none place, a macro that binds both a variable to the size as\nwell as an ftype name to the ftype can be used.\nFor example,\n\n" "\n\n" "(define-syntax define-array\n\n  (syntax-rules ()\n\n    [(_ array-name type size-name size)\n\n     (begin\n\n       (define size-name size)\n\n       (define-ftype array-name\n\n         (array size type)))]))\n\n(define-array A int A-size 100)\n\nA-size --> 100\n\n(ftype-pointer-ftype\n\n  (make-ftype-pointer A\n\n    (foreign-alloc (ftype-sizeof A)))) --> (array 100 int)\n" "This technique can be used to define arbitrary ftypes with\narbitrary numbers of array fields.\n\n" "\npage:ftype-subtypingA struct ftype is an implicit subtype of the type of the first field\nof the struct.\nSimilarly, an array ftype is an implicit subtype of the type of its\nelements.\nThus, the struct or array extends the type of first field or element\nwith additional fields or elements.\nThis allows an instance of the struct or array to be treated as an instance\nof the type of its first field or element, without the need to use\nftype-&ref to allocate a new pointer to the field or element.\n\n\n") ("foreign:s142" "\n\n\nsyntax: (ftype-sizeof ftype-name)\n\nreturns: the size in bytes of the ftype identified by ftype-name\n\nlibraries: (chezscheme)\n\n" "The size includes the sizes of any ftypes directly embedded within the\nidentified ftype but excludes those indirectly embedded via a pointer\nftype.\nIn the latter case, the size of the pointer is included.\n\n" "\nftype-name must not be defined as a function ftype, since the size\nof a function cannot generally be determined.\n\n" "\n\n" "(define-ftype B\n\n  (struct\n\n    [b1 integer-32]\n\n    [b2 (array 10 integer-32)]))\n\n(ftype-sizeof B) --> 44\n\n\n(define-ftype C (* B))\n\n(ftype-sizeof C) --> 4  ; on 32-bit machines\n\n(ftype-sizeof C) --> 8  ; on 64-bit machines\n\n\n(define-ftype BB\n\n  (struct\n\n    [bb1 B]\n\n    [bb2 (* B)]))\n\n(- (ftype-sizeof BB) (ftype-sizeof void*)) --> 44\n") ("foreign:s143" "desc:make-ftype-pointer\n\n\nsyntax: (make-ftype-pointer ftype-name expr)\n\nreturns: an ftype-pointer object\n\nlibraries: (chezscheme)\n\n" "If ftype-name does not describe a function ftype, expr\nmust evaluate to an address represented as an exact integer in\nthe appropriate range for the target machine.\n\n" "\nThe ftype-pointer object returned by this procedure encapsulates the\naddress and is tagged with a representation of the type identified by\nftype-name to enable various forms of checking to be done by the\naccess routines described below.\n\n" "\n\n" "(make-ftype-pointer E #x80000000) --> #<ftype-pointer #x80000000>\n" "The address will not typically be a constant, as shown.\nInstead, it might instead come from a call to foreign-alloc, e.g.:\n\n" "\n\n" "(make-ftype-pointer E (foreign-alloc (ftype-sizeof E)))\n" "It might also come from source outside of Scheme such as from a C\nroutine called from Scheme via the foreign-procedure interface.\n\n" "\nIf ftype-name describes a function ftype,\nexpr must evaluate to an address, procedure, or string.\nIf it evaluates to address, the call behaves like any other call to\nmake-ftype-pointer with an address argument.\n\n" "\nIf it evaluates to a procedure, a foreign-callable code object is\ncreated for the procedure, as if via\nforeign-callable\n(Section 4.3).\nThe address encapsulated in the resulting ftype-pointer object is the\naddress of the procedure's entry point.\n\n" "\n\n" "(define fact\n\n  (lambda (n)\n\n    (if (= n 0) 1 (fact (- n 1)))))\n\n(define-ftype fact_t (function (int) int))\n\n(define fact-fptr (make-ftype-pointer fact_t fact))\n" "The resulting ftype pointer can be passed to a C routine,\nif the argument is declared to be a pointer to the same ftype, and\nthe C routine can invoke the function pointer it receives as it\nwould any other function pointer.\nThus, make-ftype-pointer with a function ftype is an alternative\nto foreign-callable for creating C-callable wrappers for Scheme\nprocedures.\n\n" "\nSince all Scheme objects, including code objects, can be relocated or\neven reclaimed by the garbage collector the foreign-callable code object\nis automatically locked, as if via lock-object, before it is\nembedded in the ftype pointer.\nThe code object should be unlocked after its last use from C,\nsince locked objects take up space, cause fragmentation, and\nincrease the cost of collection.\nSince the system cannot determine automatically when the last use\nfrom C occurs, the program must explicitly unlock the code object,\nwhich it can do by extracting the address from the ftype-pointer\nconverting the address (back) into a code object, and passing it\nto unlock-object:\n\n" "\n\n" "(unlock-object\n\n  (foreign-callable-code-object\n\n    (ftype-pointer-address fact-fptr)))\n" "Once unlocked, the ftype pointer should not be used again, unless\nit is relocked, e.g., via:\n\n" "\n\n" "(lock-object\n\n  (foreign-callable-code-object\n\n    (ftype-pointer-address fact-fptr)))\n" "A program can determine whether an object is already locked via\nthe locked-object? predicate.\n\n" "\nA function ftype can be also used with\nmake-ftype-pointer to create an ftype-pointer to a C function,\neither by providing the address of the C function or its name, represented\nas a string.\nFor example, with the following definition of bvcopy_t,\n\n" "\n\n" "(define-ftype bvcopy_t (function (u8* u8* size_t) void))\n" "the two definitions of bvcopy-ftpr below are equivalent.\n\n" "\n\n" "(define bvcopy-fptr (make-ftype-pointer bvcopy_t \"memcpy\"))\n\n(define bvcopy-fptr (make-ftype-pointer bvcopy_t (foreign-entry \"memcpy\")))\n" "A library that defines memcpy must be loaded first via\nload-shared-object, or memcpy must be registered\nvia one of the methods described in Section  4.6.\n\n") ("foreign:s147" "\n\n\nsyntax: (ftype-pointer? obj)\n\nreturns: #t if obj is an ftype pointer, otherwise #f\n\n\nsyntax: (ftype-pointer? ftype-name obj)\n\nreturns: #t if obj is an ftype-name, otherwise #f\n\nlibraries: (chezscheme)\n\n" "\n" "(define-ftype Widget1 (struct [x int] [y int]))\n\n(define-ftype Widget2 (struct [w Widget1] [b boolean]))\n\n\n(define x1 (make-ftype-pointer Widget1 #x80000000))\n\n(define x2 (make-ftype-pointer Widget2 #x80000000))\n\n\n(ftype-pointer? x1) --> #t\n\n(ftype-pointer? x2) --> #t\n\n\n(ftype-pointer? Widget1 x1) --> #t\n\n(ftype-pointer? Widget1 x2) --> #t\n\n\n(ftype-pointer? Widget2 x1) --> #f\n\n(ftype-pointer? Widget2 x2) --> #t\n\n\n(ftype-pointer? #x80000000) --> #f\n\n(ftype-pointer? Widget1 #x80000000) --> #f\n") ("foreign:s148" "\n\nprocedure: (ftype-pointer-address fptr)\n\nreturns: the address encapsulated within fptr\n\nlibraries: (chezscheme)\n\n" "fptr must be an ftype-pointer object.\n\n" "\n\n" "(define x (make-ftype-pointer E #x80000000))\n\n(ftype-pointer-address x) --> #x80000000\n") ("foreign:s149" "\n\nsyntax: (ftype-pointer=? fptr1 fptr2)\n\nreturns: #t if fptr1 and fptr2 have the same address, otherwise #f\n\nlibraries: (chezscheme)\n\n" "fptr1 and fptr2 must be ftype-pointer objects.\n\n" "\nftype-pointer=? might be defined as follows:\n\n" "\n\n" "(define ftype-pointer=?\n\n  (lambda (fptr1 fptr2)\n\n    (= (ftype-pointer-address fptr1) (ftype-pointer-address fptr2))))\n" "It is, however, guaranteed not to allocate bignums for the addresses\neven if the addresses do not fit in fixnum range.\n\n") ("foreign:s150" "\n\n\nsyntax: (ftype-pointer-null? fptr)\n\nreturns: #t if the address of fptr is 0, otherwise #f\n\nlibraries: (chezscheme)\n\n" "fptr must be an ftype-pointer object.\n\n" "\nftype-pointer-null? might be defined as follows:\n\n" "\n\n" "(define ftype-pointer-null?\n\n  (lambda (fptr)\n\n    (= (ftype-pointer-address fptr) 0)))\n" "It is, however, guaranteed not to allocate a bignum for the address\neven if the address does not fit in fixnum range.\n\n") ("foreign:s151" "\n\n\nsyntax: (ftype-&ref ftype-name (a ...) fptr-expr)\n\n\nsyntax: (ftype-&ref ftype-name (a ...) fptr-expr index)\n\nreturns: an ftype-pointer object\n\nlibraries: (chezscheme)\n\n" "The ftype-pointer object returned by ftype-&ref\nencapsulates the address of some object embedded directly or\nindirectly within the foreign object pointed to by the value\nof fptr-expr, offset by index, if present.\nThe value of fptr-expr must be\nan ftype pointer (fptr) of the ftype identified by ftype-name,\nand index must either be the identifier * or evaluate\nto a fixnum, possibly negative.\nThe index is automatically scaled by the size of the ftype identified\nby ftype-name, which allows the fptr to be treated as an array\nof ftype-name objects and index as an index into that array.\nAn index of * or 0 is the same as no index.\n\n" "\nThe sequence of accessors a ... must specify a\nvalid path through the identified ftype.\nFor struct, union, and bits ftypes,\nan accessor must be a valid field name for the ftype, while for\npointer and array ftypes, an accessor must be the identifier\n* or evaluate to a fixnum index.\nFor array ftypes, an index must be nonnegative, and for array ftypes\nwith nonzero length, an index must also be less than the length.\n\n" "\nThe examples below assume the definitions of B and BB\nshown above in the description of ftype-sizeof.\nFixed addresses are shown for illustrative purposes and are assumed\nto be valid, although addresses are generally determined\nat run time via foreign-alloc or some other mechanism.\n\n" "\n\n" "(define x (make-ftype-pointer B #x80000000))\n\n(ftype-&ref B () x) --> #<ftype-pointer #x80000000>\n\n(let ([idx 1])             --> #<ftype-pointer #x8000002C>\n\n  (ftype-&ref B () x idx))\n\n(let ([idx -1])            --> #<ftype-pointer #x7FFFFFD4>\n\n  (ftype-&ref B () x idx))\n\n(ftype-&ref B (b1) x) --> #<ftype-pointer #x80000000>\n\n(ftype-&ref B (b2) x) --> #<ftype-pointer #x80000004>\n\n(ftype-&ref B (b2 5) x) --> #<ftype-pointer #x80000018>\n\n(let ([n 5]) (ftype-&ref B (b2 n) x)) --> #<ftype-pointer #x80000018>\n\n\n(ftype-&ref B (b1 b2) x) --> syntax error\n\n(ftype-&ref B (b2 15) x) --> run-time exception\n\n\n(define y (make-ftype-pointer BB #x90000000))\n\n(ftype-set! BB (bb2) y x)\n\n(ftype-&ref BB (bb1 b2) y) --> #<ftype-pointer #x90000004>\n\n(ftype-&ref BB (bb2 * b2) y) --> #<ftype-pointer #x80000004>\n\n(let ([idx 1])                    --> #<ftype-pointer #x80000030>\n\n  (ftype-&ref BB (bb2 idx b2) y))\n" "With no accessors and no index, as in the first use of ftype-&ref\nabove, the returned ftype-pointer might be eq? to\nthe input.\nOtherwise, the ftype-pointer is freshly allocated.\n\n") ("foreign:s152" "\ndefn:ftype-set!\n\n\nsyntax: (ftype-set! ftype-name (a ...) fptr-expr val-expr)\n\n\nsyntax: (ftype-set! ftype-name (a ...) fptr-expr index val-expr)\n\nreturns: unspecified\n\n\nsyntax: (ftype-ref ftype-name (a ...) fptr-expr)\n\n\nsyntax: (ftype-ref ftype-name (a ...) fptr-expr index)\n\nreturns: an ftype-pointer object\n\nlibraries: (chezscheme)\n\n" "These forms are used to store values into or retrieve values from the\nobject pointed to by the value of fptr-expr, offset by\nindex, if present.\nThe value of fptr-expr must be\nan ftype pointer (fptr) of the ftype identified by ftype-name,\nand index must either be the identifier * or evaluate\nto a fixnum, possibly negative.\nThe index is automatically scaled by the size of the ftype identified\nby ftype-name, which allows the fptr to be treated as an array\nof ftype-name objects and index as an index into that array.\nAn index of * or 0 is the same as no index.\n\n" "\nThe sequence of accessors a ... must specify a\nvalid path through the identified ftype.\nFor struct, union, and bits ftypes,\nan accessor must be a valid field name for the ftype, while for\npointer and array ftypes, an accessor must be the identifier\n* or evaluate to a fixnum index.\nFor array ftypes, an index must be nonnegative, and for array ftypes\nwith nonzero length, an index must also be less than the length.\nThe field or element specified by the sequence of accessors must be a scalar\nfield, e.g., a pointer field or a field containing a base type\nsuch as an int, char, or double.\n\n" "\nFor ftype-set!, val-expr must evaluate to a value\nof the appropriate type for the specified field, e.g., an ftype\npointer of the appropriate type or an appropriate base-type value.\n\n" "\nFor both signed and unsigned integer fields, values in the range\n-2w-1 through 2w - 1 are accepted, where w is the width in\nbits of the integer field.\nFor signed integer fields, values in the range 2w-1 through 2w - 1\nare treated as two's complement representations of the corresponding\nnegative numbers.\nFor unsigned integer fields, values in the range -2w-1 through\n-1 are similarly treated as two's complement representations of the\ncorresponding positive numbers.\n\n" "\nchar and wchar_t (wchar) field values\nare converted from (ftype-set!) or to (ftype-ref)\nScheme characters, as if with char->integer and\ninteger->char.\nCharacters stored by ftype-set! into a char\nfield must have Unicode scalar values in the range 0 through 255.\nUnder Windows and any other system where wchar_t\n(wchar) is a 16-bit value, characters stored by\nftype-set! into a whar_t (wchar)\nfield must have Unicode scalar values in the range 0 through 216 - 1.\nOn systems where wchar_t is a 32-bit value, any\ncharacter can be stored in a wchar_t (wchar)\nfield.\n\n" "\nThe examples below assume that B and C have been\ndefined as shown in the description of ftype-sizeof above.\n\n" "\n\n" "(define b\n\n  (make-ftype-pointer B\n\n    (foreign-alloc\n\n      (* (ftype-sizeof B) 3))))\n\n(define c\n\n  (make-ftype-pointer C\n\n    (foreign-alloc (ftype-sizeof C))))\n\n\n(ftype-set! B (b1) b 5)\n\n(ftype-set! B (b1) b 1 6)\n\n(ftype-set! B (b1) c 5) --> exception: ftype mismatch\n\n(ftype-set! B (b2) b 0) --> exception: not a scalar\n\n(ftype-set! B (b2 -1) b 0) --> exception: invalid index\n\n(ftype-set! B (b2 0) b 50)\n\n(ftype-set! B (b2 4) b 55)\n\n(ftype-set! B (b2 10) b 55) --> exception: invalid index\n\n\n(ftype-set! C () c (ftype-&ref B () b 1))\n\n\n(= (ftype-pointer-address (ftype-ref C () c))      --> #t\n\n   (+ (ftype-pointer-address b) (ftype-sizeof B)))\n\n(= (ftype-pointer-address (ftype-&ref C (*) c)) --> #t\n\n   (+ (ftype-pointer-address b) (ftype-sizeof B)))\n\n(= (ftype-pointer-address (ftype-&ref C (-1) c)) --> #t\n\n   (ftype-pointer-address b))\n\n\n(ftype-ref C (-1 b1) c) --> 5\n\n(ftype-ref C (* b1) c) --> 6\n\n(ftype-ref C (-1 b2 0) c) --> 50\n\n(let ([i 4]) (ftype-ref C (-1 b2 i) c)) --> 55\n\n\n(ftype-set! C (-1 b2 0) c 75)\n\n(ftype-ref B (b2 0) b) --> 75\n\n(foreign-free (ftype-pointer-address c))\n\n(foreign-free (ftype-pointer-address b))\n" "A function ftype pointer can be converted into\na Scheme-callable procedure via ftype-ref.\nAssuming that a library defining memcpy has been loaded via\nload-shared-object or memcpy has been registered\nvia one of the methods described in Section  4.6,\nA Scheme-callable memcpy can be defined as follows.\n\n" "\n\n" "(define-ftype bvcopy_t (function (u8* u8* size_t) void))\n\n(define bvcopy-fptr (make-ftype-pointer bvcopy_t \"memcpy\"))\n\n(define bvcopy (ftype-ref bvcopy_t () bvcopy-fptr))\n\n\n(define bv1 (make-bytevector 8 0))\n\n(define bv2 (make-bytevector 8 57))\n\nbv1 --> #vu8(0 0 0 0 0 0 0 0)\n\nbv2 --> #vu8(57 57 57 57 57 57 57 57)\n\n(bvcopy bv1 bv2 5)\n\nbv1 --> #vu8(57 57 57 57 57 0 0 0)\n" "An ftype pointer can also be obtained as a return value from a\nC function declared to return a pointer to a function ftype.\n\n" "\nThus, ftype-ref with a function ftype is an alternative to\nforeign-procedure\n(Section 4.2)\nfor creating Scheme-callable wrappers for\nC functions.\n\n") ("foreign:s155" "\n\n\nprocedure: (ftype-pointer-ftype fptr)\n\nreturns: fptr's ftype, represented as an s-expression\n\nlibraries: (chezscheme)\n\n" "fptr must be an ftype-pointer object.\n\n" "\n\n" "(define-ftype Q0\n\n  (struct\n\n    [x int]\n\n    [y int]))\n\n(define-ftype Q1\n\n  (struct\n\n    [x double]\n\n    [y char]\n\n    [z (endian big\n\n         (bits\n\n           [_ unsigned 3]\n\n           [a unsigned 9]\n\n           [b unsigned 4]))]\n\n    [w (* Q0)]))\n\n(define q1 (make-ftype-pointer Q1 0))\n\n(ftype-pointer-ftype q1) --> (struct \n\n                         gifs/ghostRightarrow.gif   [x double]\n\n                         gifs/ghostRightarrow.gif   [y char]\n\n                         gifs/ghostRightarrow.gif   [z (endian big\n\n                         gifs/ghostRightarrow.gif        (bits\n\n                         gifs/ghostRightarrow.gif          [_ unsigned 3]\n\n                         gifs/ghostRightarrow.gif          [a unsigned 9]\n\n                         gifs/ghostRightarrow.gif          [b unsigned 4]))]\n\n                         gifs/ghostRightarrow.gif   [w (* Q0)])\n") ("foreign:s156" "\n\nprocedure: (ftype-pointer->sexpr fptr)\n\nreturns: an s-expression representation of the object to which fptr points\n\nlibraries: (chezscheme)\n\n" "fptr must be an ftype-pointer object.\n\n" "\nFor each unnamed field, i.e., each whose field name is an underscore, the\ncorresponding field value in the resulting s-expression is also an underscore.\nSimilarly, if a field is inaccessible, i.e., if its address is invalid, the\nvalue is the symbol invalid.\n\n" "\n\n" "(define-ftype Frob\n\n  (struct\n\n    [p boolean]\n\n    [q char]))\n\n(define-ftype Snurk\n\n  (struct\n\n    [a Frob]\n\n    [b (* Frob)]\n\n    [c (* Frob)]\n\n    [d (bits\n\n         [_ unsigned 15]\n\n         [dx signed 17])]\n\n    [e (array 5 double)]))\n\n(define x\n\n  (make-ftype-pointer Snurk\n\n    (foreign-alloc (ftype-sizeof Snurk))))\n\n(ftype-set! Snurk (b) x\n\n  (make-ftype-pointer Frob\n\n    (foreign-alloc (ftype-sizeof Frob))))\n\n(ftype-set! Snurk (c) x\n\n  (make-ftype-pointer Frob 0))\n\n(ftype-set! Snurk (a p) x #t)\n\n(ftype-set! Snurk (a q) x #\\A)\n\n(ftype-set! Snurk (b * p) x #f)\n\n(ftype-set! Snurk (b * q) x #\\B)\n\n(ftype-set! Snurk (d dx) x -2500)\n\n(do ([i 0 (fx+ i 1)])\n\n    ((fx= i 5))\n\n  (ftype-set! Snurk (e i) x (+ (* i 5.0) 3.0)))\n\n(ftype-pointer->sexpr x) --> (struct\n\n                         gifs/ghostRightarrow.gif   [a (struct [p #t] [q #\\A])]\n\n                         gifs/ghostRightarrow.gif   [b (* (struct [p #f] [q #\\B]))]\n\n                         gifs/ghostRightarrow.gif   [c (* (struct [p invalid] [q invalid]))]\n\n                         gifs/ghostRightarrow.gif   [d (bits [_ _] [dx -2500])]\n\n                         gifs/ghostRightarrow.gif   [e (array 5 3.0 8.0 13.0 18.0 23.0)])\n") ("foreign:s157" "\n\n\nprocedure: (foreign-entry? entry-name)\n\nreturns: #t if entry-name is an existing foreign procedure entry\npoint, #f otherwise\n\nlibraries: (chezscheme)\n\n" "entry-name must be a string.\nforeign-entry? may be used to determine if an entry exists for a foreign\nprocedure.\n\n" "\nThe following examples assume that \na library that defines strlen has been loaded via\nload-shared-object or that strlen has been registered\nvia one of the other methods described in this section.\n\n" "\n\n" "(foreign-entry? \"strlen\") --> #t\n\n((foreign-procedure \"strlen\"\n\n    (string) size_t)\n\n \"hey!\") --> 4\n") ("foreign:s158" "\n\nprocedure: (foreign-entry entry-name)\n\nreturns: the address of entry-name as an exact integer\n\nlibraries: (chezscheme)\n\n" "entry-name must be a string naming an existing foreign entry point.\n\n" "\nThe following examples assume that \na library that defines strlen has been loaded via\nload-shared-object or that strlen has been registered\nvia one of the other methods described in this section.\n\n" "\n\n" "(let ([addr (foreign-entry \"strlen\")])\n\n  (and (integer? addr) (exact? addr))) --> #t\n\n\n(define-ftype strlen-type (function (string) size_t))\n\n(define strlen\n\n  (ftype-ref strlen-type ()\n\n    (make-ftype-pointer strlen-type \"strlen\")))\n\n(strlen \"hey!\") --> 4\n") ("foreign:s159" "\n\nprocedure: (foreign-address-name address)\n\nreturns: the entry name corresponding to address, if known, otherwise #f\n\nlibraries: (chezscheme)\n\n" "The following examples assume that \na library that defines strlen has been loaded via\nload-shared-object or that strlen has been registered\nvia one of the other methods described in this section.\n\n" "\n\n" "(foreign-address-name (foreign-entry \"strlen\")) --> \"strlen\"\n") ("foreign:s160" "\n\nprocedure: (load-shared-object path)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nload-shared-object loads the shared object named by path.\nShared objects may be system libraries or files created from ordinary\nC programs.\nAll external symbols in the shared object, along with external symbols\navailable in other shared objects linked with the shared object,\nare made available as foreign entries. \n\n" "\nThis procedure is supported for most platforms upon which Chez Scheme\nruns.\n\n" "\nIf path does not begin with a \".\" or \"/\", the shared\nobject is searched for in a default set of directories determined\nby the system.\n\n" "\nOn most Unix systems, load-shared-object is based on the\nsystem routine dlopen.\nUnder Windows, load-shared-object is based on LoadLibrary.\nRefer to the documentation for these routines and for the C compiler\nand loader for precise rules for locating and building shared objects.\n\n" "\nload-shared-object can be used to access built-in C library\nfunctions, such as getenv.\nThe name of the shared object varies from one system to another.\nOn Linux systems:\n\n" "\n\n" "(load-shared-object \"libc.so.6\")\n" "On Solaris, OpenSolaris, FreeBSD, NetBSD, and OpenBSD systems:\n\n" "\n\n" "(load-shared-object \"libc.so\")\n" "On MacOS X systems:\n\n" "\n\n" "(load-shared-object \"libc.dylib\")\n" "On Windows:\n\n" "\n\n" "(load-shared-object \"msvcrt.dll\")\n" "Once the C library has been loaded, getenv should be available\nas a foreign entry.\n\n" "\n\n" "(foreign-entry? \"getenv\") --> #t\n" "An equivalent Scheme procedure may be defined and\ninvoked as follows.\n\n" "\n\n" "(define getenv\n\n  (foreign-procedure \"getenv\"\n\n    (string)\n\n    string))\n\n(getenv \"HOME\") --> \"/home/elmer/fudd\"\n\n(getenv \"home\") --> #f\n" "load-shared-object can be used to access user-created\nlibraries as well.\nSuppose the C file \"even.c\"\ncontains\n\n" "\n\n" "int even(n) int n; { return n == 0 || odd(n - 1); }\n" "and the C file \"odd.c\" contains\n\n" "\n\n" "int odd(n) int n; { return n != 0 && even(n - 1); }\n" "The files must be compiled and linked into a shared object before\nthey can be loaded.\nHow this is done depends upon the host system.\nOn Linux, FreeBSD, OpenBSD, and OpenSolaris systems:\n\n" "\n\n" "(system \"cc -fPIC -shared -o evenodd.so even.c odd.c\")\n" "Depending on the host configuration, the -m32 or\n-m64 option might be needed to specify 32-bit\nor 64-bit compilation as appropriate.\n\n" "\nOn MacOS X (Intel or PowerPC) systems:\n\n" "\n\n" "(system \"cc -dynamiclib -o evenodd.so even.c odd.c\")\n" "Depending on the host configuration, the -m32 or\n-m64 option might be needed to specify 32-bit\nor 64-bit compilation as appropriate.\n\n" "\nOn 32-bit Sparc Solaris:\n\n" "\n\n" "(system \"cc -KPIC -G -o evenodd.so even.c odd.c\")\n" "On 64-bit Sparc Solaris:\n\n" "\n\n" "(system \"cc -xarch=v9 -KPIC -G -o evenodd.so even.c odd.c\")\n" "On Windows, we build a DLL (dynamic link library) file.\nIn order to make the compiler generate the appropriate entry\npoints, we alter even.c to read\n\n" "\n\n" "#ifdef WIN32\n\n#define EXPORT extern __declspec (dllexport)\n\n#else\n\n#define EXPORT extern\n\n#endif\n\n\nEXPORT int even(n) int n; { return n == 0 || odd(n - 1); }\n" "and odd.c to read\n\n" "\n\n" "#ifdef WIN32\n\n#define EXPORT extern __declspec (dllexport)\n\n#else\n\n#define EXPORT extern\n\n#endif\n\n\nEXPORT int odd(n) int n; { return n != 0 && even(n - 1); }\n" "We can then build the DLL as follows, giving\nit the extension \".so\" rather than \".dll\"\nfor consistency with the other systems.\n\n" "\n\n" "(system \"cl -c -DWIN32 even.c\")\n\n(system \"cl -c -DWIN32 odd.c\")\n\n(system \"link -dll -out:evenodd.so even.obj odd.obj\")\n" "" "The resulting \".so\" file can be loaded into Scheme and even and\nodd made available as foreign procedures:\n\n" "\n\n" "(load-shared-object \"./evenodd.so\")\n\n(let ([odd (foreign-procedure \"odd\"\n\n             (integer-32) boolean)]\n\n      [even (foreign-procedure \"even\"\n\n              (integer-32) boolean)])\n\n  (list (even 100) (odd 100))) --> (#t #f)\n" "The filename is given as \"./evenodd.so\" rather than simply\n\"evenodd.so\", because some systems look for shared libraries\nin a standard set of system directories that does not include the\ncurrent directory.\n\n\n") ("foreign:s162" "\n\n\nprocedure: (remove-foreign-entry entry-name)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "remove-foreign-entry blocks further access to the entry\nspecified by the string entry-name.\nAn exception is raised with condition type &assertion\nif the entry does not exist.\nSince access previously established by foreign-procedure is not affected,\nremove-foreign-entry may be used to clean up after the desired interface\nto a group of foreign procedures has been established.\n\n" "\nremove-foreign-entry can be used to remove entries registered using\nSforeign_symbol and Sregister_symbol but not\nentries created as\na result of a call to load-shared-object.\n\n\n") ("objects:s0" "\n\n\nprocedure: (enum-set? obj)\n\nreturns: #t if obj is an enum set, #f otherwise\n\nlibraries: (chezscheme)\n\n" "This predicate is not defined by the Revised6 Report, but should be.\n\n") ("objects:s1" "\n\n\nprocedure: (record-constructor-descriptor? obj)\n\nreturns: #t if obj is a record constructor descriptor, #f otherwise\n\nlibraries: (chezscheme)\n\n" "This predicate is not defined by the Revised6 Report, but should be.\n\n\n") ("objects:s2" "\n\n\nprocedure: (atom? obj)\n\nreturns: #t if obj is not a pair, #f otherwise\n\nlibraries: (chezscheme)\n\n" "atom? is equivalent to (lambda (x) (not (pair? x))).\n\n" "\n\n" "(atom? '(a b c)) --> #f\n\n(atom? '(3 . 4)) --> #f\n\n(atom? '()) --> #t\n\n(atom? 3) --> #t\n") ("objects:s3" "\n\nprocedure: (list-head list n)\n\nreturns: a list of the first n elements of list\n\nlibraries: (chezscheme)\n\n" "n must be an exact nonnegative integer less than or equal to\nthe length of list.\n\n" "\nlist-head and the standard Scheme procedure list-tail \nmay be used together to split a list into two separate lists.\nWhile list-tail performs no allocation but instead returns a\nsublist of the original list, list-head always returns a copy\nof the first portion of the list.\n\n" "\nlist-head may be defined as follows.\n\n" "\n\n" "(define list-head\n\n  (lambda (ls n)\n\n    (if (= n 0)\n\n        '()\n\n        (cons (car ls) (list-head (cdr ls) (- n 1))))))\n\n\n(list-head '(a b c) 0) --> ()\n\n(list-head '(a b c) 2) --> (a b)\n\n(list-head '(a b c) 3) --> (a b c)\n\n(list-head '(a b c . d) 2) --> (a b)\n\n(list-head '(a b c . d) 3) --> (a b c)\n\n(list-head '#1=(a . #1#) 5) --> (a a a a a)\n") ("objects:s4" "\n\nprocedure: (last-pair list)\n\nreturns: the last pair of a list\n\nlibraries: (chezscheme)\n\n" "list must not be empty.\nlast-pair returns the last pair (not the last element) of list.\nlist may be an improper list, in which case the last pair is the\npair containing the last element and the terminating object.\n\n" "\n\n" "(last-pair '(a b c d)) --> (d)\n\n(last-pair '(a b c . d)) --> (c . d)\n") ("objects:s5" "\n\nprocedure: (list-copy list)\n\nreturns: a copy of list\n\nlibraries: (chezscheme)\n\n" "list-copy returns a list equal? to list, using new pairs\nto reform the top-level list structure.\n\n" "\n\n" "(list-copy '(a b c)) --> (a b c)\n\n\n(let ([ls '(a b c)])\n\n  (equal? ls (list-copy ls))) --> #t\n\n\n(let ([ls '(a b c)])\n\n  (let ([ls-copy (list-copy ls)])\n\n    (or (eq? ls-copy ls)\n\n        (eq? (cdr ls-copy) (cdr ls))\n\n        (eq? (cddr ls-copy) (cddr ls))))) --> #f\n") ("objects:s6" "\n\nprocedure: (list* obj ... final-obj)\n\nreturns: a list of obj ... terminated by final-obj\n\nlibraries: (chezscheme)\n\n" "list* is identical to the Revised6 Report cons*.\n\n\n") ("objects:s7" "\n\n\nprocedure: (make-list n)\n\n\nprocedure: (make-list n obj)\n\nreturns: a list of n objs\n\nlibraries: (chezscheme)\n\n" "n must be a nonnegative integer.\nIf obj is omitted, the elements of the list are unspecified.\n\n" "\n\n" "(make-list 0 '()) --> ()\n\n(make-list 3 0) --> (0 0 0)\n\n(make-list 2 \"hi\") --> (\"hi\" \"hi\")\n") ("objects:s8" "\n\nprocedure: (iota n)\n\nreturns: a list of integers from 0 (inclusive) to n (exclusive)\n\nlibraries: (chezscheme)\n\n" "n must be an exact nonnegative integer.\n\n" "\n\n" "(iota 0) --> ()\n\n(iota 5) --> (0 1 2 3 4)\n") ("objects:s9" "\n\nprocedure: (enumerate ls)\n\nreturns: a list of integers from 0 (inclusive) to the length of ls (exclusive)\n\nlibraries: (chezscheme)\n\n" "\n" "(enumerate '()) --> ()\n\n(enumerate '(a b c)) --> (0 1 2)\n\n(let ([ls '(a b c)])\n\n  (map cons ls (enumerate ls))) --> ((a . 0) (b . 1) (c . 2))\n") ("objects:s10" "\n\nprocedure: (remq! obj list)\n\n\nprocedure: (remv! obj list)\n\n\nprocedure: (remove! obj list)\n\nreturns: a list containing the elements of list with all occurrences of obj removed\n\nlibraries: (chezscheme)\n\n" "These procedures are similar to the Revised6 Report\nremq, remv, and remove procedures, except\nremq!, remv! and remove! use pairs from the\ninput list to build the output list.\nThey perform less allocation but are not\nnecessarily faster than their nondestructive counterparts.\nTheir use can easily lead to confusing or incorrect results if used\nindiscriminately.\n\n" "\n\n" "(remq! 'a '(a b a c a d)) --> (b c d)\n\n\n(remv! #\\a '(#\\a #\\b #\\c)) --> (#\\b #\\c)\n\n\n(remove! '(c) '((a) (b) (c))) --> ((a) (b))\n") ("objects:s11" "\n\nprocedure: (substq new old tree)\n\n\nprocedure: (substv new old tree)\n\n\nprocedure: (subst new old tree)\n\n\nprocedure: (substq! new old tree)\n\n\nprocedure: (substv! new old tree)\n\n\nprocedure: (subst! new old tree)\n\nreturns: a tree with new substituted for occurrences of old in tree\n\nlibraries: (chezscheme)\n\n" "These procedures traverse tree, replacing all objects equivalent to\nthe object old with the object new.\n\n" "\nThe equivalence test for substq and substq! is eq?,\nfor substv and substv! is eqv?,\nand for subst and subst! is equal?.\n\n" "\nsubstq!, substv!, and subst! perform the\nsubstitutions destructively.\nThey perform less allocation but are not\nnecessarily faster than their nondestructive counterparts.\nTheir use can easily lead to confusing or incorrect results if used\nindiscriminately.\n\n\n" "\n\n" "(substq 'a 'b '((b c) b a)) --> ((a c) a a)\n\n\n(substv 2 1 '((1 . 2) (1 . 4) . 1)) --> ((2 . 2) (2 . 4) . 2)\n\n\n(subst 'a\n\n       '(a . b)\n\n       '((a . b) (c a . b) . c)) --> (a (c . a) . c)\n\n\n(let ([tr '((b c) b a)])\n\n  (substq! 'a 'b tr)\n\n  tr) --> ((a c) a a)\n") ("objects:s12" "\n\nprocedure: (reverse! list)\n\nreturns: a list containing the elements of list in reverse order\n\nlibraries: (chezscheme)\n\n" "reverse! destructively reverses list\nby reversing its links.\nUsing reverse! in place of reverse reduces allocation but is not\nnecessarily faster than reverse.\nIts use can easily lead to confusing or incorrect results if used\nindiscriminately.\n\n" "\n\n" "(reverse! '()) --> ()\n\n(reverse! '(a b c)) --> (c b a)\n\n\n(let ([x '(a b c)])\n\n    (reverse! x)\n\n    x) --> (a)\n\n\n(let ([x '(a b c)])\n\n    (set! x (reverse! x))\n\n    x) --> (c b a)\n") ("objects:s13" "\n\nprocedure: (append! list ...)\n\nreturns: the concatenation of the input lists\n\nlibraries: (chezscheme)\n\n" "Like append,\nappend! returns a new list consisting of the elements of the first\nlist followed by the elements of the second list, the elements of the\nthird list, and so on.\nUnlike append,\nappend! reuses the pairs in all of the\narguments in forming the new list.\nThat is, the last cdr of each list argument but the last is changed to\npoint to the next list argument.\nIf any argument but the last is the empty list, it is essentially ignored.\nThe final argument (which need not be a list) is not altered.\n\n" "\nappend! performs less allocation than append but is not\nnecessarily faster.\nIts use can easily lead to confusing or incorrect results if used\nindiscriminately.\n\n" "\n\n" "(append! '(a b) '(c d)) --> (a b c d)\n\n\n(let ([x '(a b)])\n\n    (append! x '(c d))\n\n    x) --> (a b c d)\n") ("objects:s15" "\n\n\nprocedure: (char=? char1 char2 ...)\n\n\nprocedure: (char<? char1 char2 ...)\n\n\nprocedure: (char>? char1 char2 ...)\n\n\nprocedure: (char<=? char1 char2 ...)\n\n\nprocedure: (char>=? char1 char2 ...)\n\n\nprocedure: (char-ci=? char1 char2 ...)\n\n\nprocedure: (char-ci<? char1 char2 ...)\n\n\nprocedure: (char-ci>? char1 char2 ...)\n\n\nprocedure: (char-ci<=? char1 char2 ...)\n\n\nprocedure: (char-ci>=? char1 char2 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (chezscheme)\n\n" "These predicates are identical to the Revised6 Report counterparts,\nexcept they are extended to accept one or more rather than two or more\narguments.\nWhen passed one argument, each of these predicates returns #t.\n\n" "\n\n" "(char>? #\\a) --> #t\n\n(char<? #\\a) --> #t\n\n(char-ci=? #\\a) --> #t\n") ("objects:s16" "\n\nprocedure: (char- char1 char2)\n\nreturns: the integer difference between char1 and char2\n\nlibraries: (chezscheme)\n\n" "char- subtracts the integer value of char2 from the\ninteger value of char1 and returns the difference.\nThe following examples assume that the integer representation is the\nASCII code for the character.\n\n" "\n\n" "(char- #\\f #\\e) --> 1\n\n\n(define digit-value\n\n ; returns the digit value of the base-r digit c, or #f if c\n\n ; is not a valid digit\n\n  (lambda (c r)\n\n    (let ([v (cond\n\n               [(char<=? #\\0 c #\\9) (char- c #\\0)]\n\n               [(char<=? #\\A c #\\Z) (char- c #\\7)]\n\n               [(char<=? #\\a c #\\z) (char- c #\\W)]\n\n               [else 36])])\n\n      (and (fx< v r) v))))\n\n(digit-value #\\8 10) --> 8\n\n(digit-value #\\z 10) --> #f\n\n(digit-value #\\z 36) --> 35\n" "char- might be defined as follows.\n\n" "\n\n" "(define char-\n\n  (lambda (c1 c2)\n\n    (- (char->integer c1) (char->integer c2))))\n") ("objects:s20" "\n\n\nprocedure: (string=? string1 string2 string3 ...)\n\n\nprocedure: (string<? string1 string2 string3 ...)\n\n\nprocedure: (string>? string1 string2 string3 ...)\n\n\nprocedure: (string<=? string1 string2 string3 ...)\n\n\nprocedure: (string>=? string1 string2 string3 ...)\n\n\nprocedure: (string-ci=? string1 string2 string3 ...)\n\n\nprocedure: (string-ci<? string1 string2 string3 ...)\n\n\nprocedure: (string-ci>? string1 string2 string3 ...)\n\n\nprocedure: (string-ci<=? string1 string2 string3 ...)\n\n\nprocedure: (string-ci>=? string1 string2 string3 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (chezscheme)\n\n" "These predicates are identical to the Revised6 Report counterparts,\nexcept they are extended to accept one or more rather than two or more\narguments.\nWhen passed one argument, each of these predicates returns #t.\n\n" "\n\n" "(string>? \"a\") --> #t\n\n(string<? \"a\") --> #t\n\n(string-ci=? \"a\") --> #t\n") ("objects:s21" "\n\nprocedure: (string-copy! src src-start dst dst-start n)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "src and dst must be strings, and dst must be mutable.\nsrc-start, dst-start, and n must be exact nonnegative\nintegers.\nThe sum of src-start and n must not exceed the length of src,\nand the sum of dst-start and n must not exceed the length of dst.\n\n" "\nstring-copy! overwrites the n bytes of dst\nstarting at dst-start with the n bytes of dst\nstarting at src-start.\nThis works even if dst is the same string as src and the\nsource and destination locations overlap.\nThat is, the destination is filled with the characters that appeared at the\nsource before the operation began.\n\n" "\n\n" "(define s1 \"to boldly go\")\n\n(define s2 (make-string 10 #\\-))\n\n\n(string-copy! s1 3 s2 1 3)\n\ns2 --> \"-bol------\"\n\n \n\n(string-copy! s1 7 s2 4 2)\n\ns2 --> \"-bolly----\"\n\n \n\n(string-copy! s2 2 s2 5 4)\n\ns2 --> \"-bollolly-\"\n") ("objects:s22" "\n\nprocedure: (substring-fill! string start end char)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "string must be mutable.\nThe characters of string from start (inclusive) to end\n(exclusive) are set to char.\nstart and end must be nonnegative integers; start\nmust be strictly less than the length of string, while end may\nbe less than or equal to the length of string.\nIf end  start, the string is left unchanged.\n\n" "\n\n" "(let ([str (string-copy \"a tpyo typo\")])\n\n  (substring-fill! str 2 6 #\\X)\n\n  str) --> \"a XXXX typo\"\n") ("objects:s23" "\n\nprocedure: (string-truncate! string n)\n\nreturns: string or the empty string\n\nlibraries: (chezscheme)\n\n" "string must be mutable.\nn must be an exact nonnegative fixnum not greater than the length of\nstring.\nIf n is zero, string-truncate! returns the empty string.\nOtherwise, string-truncate! destructively truncates string to\nits first n characters and returns string.\n\n" "\n\n" "(define s (make-string 7 #\\$))\n\n(string-truncate! s 0) --> \"\"\n\ns --> \"$$$$$$$\"\n\n(string-truncate! s 3) --> \"$$$\"\n\ns --> \"$$$\"\n") ("objects:s24" "\n\nprocedure: (mutable-string? obj)\n\nreturns: #t if obj is a mutable string, #f otherwise\n\n\nprocedure: (immutable-string? obj)\n\nreturns: #t if obj is an immutable string, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(mutable-string? (string #\\a #\\b #\\c)) --> #t\n\n(mutable-string? (string->immutable-string \"abc\")) --> #f\n\n(immutable-string? (string #\\a #\\b #\\c)) --> #f\n\n(immutable-string? (string->immutable-string \"abc\")) --> #t\n\n(immutable-string? (cons 3 4)) --> #f\n") ("objects:s25" "\n\nprocedure: (string->immutable-string string)\n\nreturns: an immutable string equal to string\n\nlibraries: (chezscheme)\n\n" "The result is string itself if string\nis immutable; otherwise, the result is an immutable string with the same content as string.\n\n" "\n\n" "(define s (string->immutable-string (string #\\x #\\y #\\z)))\n\n(string-set! s 0 #\\a) --> exception: not mutable\n") ("objects:s31" "\n\n\nprocedure: (vector-copy vector)\n\nreturns: a copy of vector\n\nlibraries: (chezscheme)\n\n" "vector-copy creates a new vector of the same length and contents\nas vector.\nThe elements themselves are not copied.\n\n" "\n\n" "(vector-copy '#(a b c)) --> #(a b c)\n\n\n(let ([v '#(a b c)])\n\n  (eq? v (vector-copy v))) --> #f\n") ("objects:s32" "\n\nprocedure: (vector-set-fixnum! vector n fixnum)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "vector must be mutable.\nvector-set-fixnum! changes the nth element of vector to fixnum.\nn must be an exact nonnegative integer strictly less than\nthe length of vector.\n\n" "\nIt is faster to store a fixnum than an arbitrary value,\nsince for arbitrary values, the system has to record potential assignments from older to\nyounger objects to support generational garbage collection.\nCare must be taken to ensure that the argument is indeed a fixnum, however;\notherwise, the collector may not properly track the assignment.\nThe primitive performs a fixnum check on the argument except at\noptimization level 3.\n\n" "\nSee also the description of fixnum-only vectors (fxvectors) below.\n\n" "\n\n" "(let ([v (vector 1 2 3 4 5)])\n\n  (vector-set-fixnum! v 2 73)\n\n  v) --> #(1 2 73 4 5)\n") ("objects:s33" "\n\nprocedure: (vector-cas! vector n old-obj new-obj)\n\nreturns: #t if vector is changed, #f otherwise\n\nlibraries: (chezscheme)\n\n" "vector must be mutable.\nvector-cas! atomically changes the nth element of vector to new-obj\nif the replaced nth element is eq? to old-obj.\nIf the nth element of vector that would be replaced\nis not eq? to old-obj, then\nvector is unchanged.\n\n" "\n\n" "(define v (vector 'old0 'old1 'old2))\n\n(vector-cas! v 1 'old1 'new1) --> #t\n\n(vector-ref v 1) --> 'new1\n\n(vector-cas! v 2 'old1 'new2) --> #f\n\n(vector-ref v 2) --> 'old2\n") ("objects:s34" "\n\nprocedure: (mutable-vector? obj)\n\nreturns: #t if obj is a mutable vector, #f otherwise\n\n\nprocedure: (immutable-vector? obj)\n\nreturns: #t if obj is an immutable vector, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(mutable-vector? (vector 1 2 3)) --> #t\n\n(mutable-vector? (vector->immutable-vector (vector 1 2 3))) --> #f\n\n(immutable-vector? (vector 1 2 3)) --> #f\n\n(immutable-vector? (vector->immutable-vector (vector 1 2 3))) --> #t\n\n(immutable-vector? (cons 3 4)) --> #f\n") ("objects:s35" "\n\nprocedure: (vector->immutable-vector vector)\n\nreturns: an immutable vector equal to vector\n\nlibraries: (chezscheme)\n\n" "The result is vector itself if vector\nis immutable; otherwise, the result is an immutable vector with the same content as vector.\n\n" "\n\n" "(define v (vector->immutable-vector (vector 1 2 3)))\n\n(vector-set! v 0 0) --> exception: not mutable\n") ("objects:s38" "\n\nthread parameter: self-evaluating-vectors\n\nlibraries: (chezscheme)\n\n" "The default value of this parameter is #f, meaning that vector literals must be quoted, as\nrequired by the Revised6 Report.\nSetting self-evaluating-vectors to a true value may be useful to provide compatibility with\nR7RS, as the latter states that vectors are self-evaluating.\n\n" "\n\n" "#(a b c) --> exception: invalid syntax\n\n\n(self-evaluating-vectors #t)\n\n#(a b c) --> #(a b c)\n") ("objects:s43" "\n\n\nprocedure: (fxvector? obj)\n\nreturns: #t if obj is an fxvector, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(fxvector? #vfx()) --> #t\n\n(fxvector? #vfx(1 2 3)) --> #t\n\n(fxvector? (fxvector 1 2 3)) --> #t\n\n(fxvector? '#(a b c)) --> #f\n\n(fxvector? '(a b c)) --> #f\n\n(fxvector? \"abc\") --> #f\n") ("objects:s44" "\n\nprocedure: (fxvector fixnum ...)\n\nreturns: an fxvector of the fixnums fixnum ...\n\nlibraries: (chezscheme)\n\n" "\n" "\n(fxvector) --> #vfx()\n\n(fxvector 1 3 5) --> #vfx(1 3 5)\n") ("objects:s45" "\n\nprocedure: (make-fxvector n)\n\n\nprocedure: (make-fxvector n fixnum)\n\nreturns: an fxvector of length n\n\nlibraries: (chezscheme)\n\n" "n must be a fixnum.\nIf fixnum is supplied, each element of the fxvector is initialized\nto fixnum; otherwise, the elements are unspecified.\n\n" "\n\n" "(make-fxvector 0) --> #vfx()\n\n(make-fxvector 0 7) --> #vfx()\n\n(make-fxvector 5 7) --> #vfx(7 7 7 7 7)\n") ("objects:s46" "\n\nprocedure: (fxvector-length fxvector)\n\nreturns: the number of elements in fxvector\n\nlibraries: (chezscheme)\n\n" "\n" "(fxvector-length #vfx()) --> 0\n\n(fxvector-length #vfx(1 2 3)) --> 3\n\n(fxvector-length #10vfx(1 2 3)) --> 10\n\n(fxvector-length (fxvector 1 2 3 4)) --> 4\n\n(fxvector-length (make-fxvector 300)) --> 300\n") ("objects:s47" "\n\nprocedure: (fxvector-ref fxvector n)\n\nreturns: the nth element (zero-based) of fxvector\n\nlibraries: (chezscheme)\n\n" "n must be a nonnegative fixnum strictly less than\nthe length of fxvector.\n\n" "\n\n" "(fxvector-ref #vfx(-1 2 4 7) 0) --> -1\n\n(fxvector-ref #vfx(-1 2 4 7) 1) --> 2\n\n(fxvector-ref #vfx(-1 2 4 7) 3) --> 7\n") ("objects:s48" "\n\nprocedure: (fxvector-set! fxvector n fixnum)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "fxvector must be mutable.\nn must be a nonnegative fixnum strictly less than\nthe length of fxvector.\nfxvector-set! changes the nth element of fxvector to fixnum.\n\n" "\n\n" "(let ([v (fxvector 1 2 3 4 5)])\n\n  (fxvector-set! v 2 (fx- (fxvector-ref v 2)))\n\n  v) --> #vfx(1 2 -3 4 5)\n") ("objects:s49" "\n\nprocedure: (fxvector-fill! fxvector fixnum)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "fxvector must be mutable.\nfxvector-fill! replaces each element of fxvector with fixnum.\n\n" "\n\n" "(let ([v (fxvector 1 2 3)])\n\n  (fxvector-fill! v 0)\n\n  v) --> #vfx(0 0 0)\n") ("objects:s50" "\n\nprocedure: (fxvector->list fxvector)\n\nreturns: a list of the elements of fxvector\n\nlibraries: (chezscheme)\n\n" "\n" "(fxvector->list (fxvector)) --> ()\n\n(fxvector->list #vfx(7 5 2)) --> (7 5 2)\n\n\n(let ([v #vfx(1 2 3 4 5)])\n\n  (apply fx* (fxvector->list v))) --> 120\n") ("objects:s51" "\n\nprocedure: (list->fxvector list)\n\nreturns: an fxvector of the elements of list\n\nlibraries: (chezscheme)\n\n" "list must consist entirely of fixnums.\n\n" "\n\n" "(list->fxvector '()) --> #vfx()\n\n(list->fxvector '(3 5 7)) --> #vfx(3 5 7)\n\n\n(let ([v #vfx(1 2 3 4 5)])\n\n  (let ([ls (fxvector->list v)])\n\n    (list->fxvector (map fx* ls ls)))) --> #vfx(1 4 9 16 25)\n") ("objects:s52" "\n\nprocedure: (fxvector-copy fxvector)\n\nreturns: a copy of fxvector\n\nlibraries: (chezscheme)\n\n" "fxvector-copy creates a new fxvector with the same length and contents\nas fxvector.\n\n" "\n\n" "(fxvector-copy #vfx(3 4 5)) --> #vfx(3 4 5)\n\n\n(let ([v #vfx(3 4 5)])\n\n  (eq? v (fxvector-copy v))) --> #f\n") ("objects:s53" "\n\nprocedure: (mutable-fxvector? obj)\n\nreturns: #t if obj is a mutable fxvector, #f otherwise\n\n\nprocedure: (immutable-fxvector? obj)\n\nreturns: #t if obj is an immutable fxvector, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(mutable-fxvector? (fxvector 1 2 3)) --> #t\n\n(mutable-fxvector? (fxvector->immutable-fxvector (fxvector 1 2 3))) --> #f\n\n(immutable-fxvector? (fxvector 1 2 3)) --> #f\n\n(immutable-fxvector? (fxvector->immutable-fxvector (fxvector 1 2 3))) --> #t\n\n(immutable-fxvector? (cons 3 4)) --> #f\n") ("objects:s54" "\n\nprocedure: (fxvector->immutable-fxvector fxvector)\n\nreturns: either an immutable copy of fxvector or fxvector itself\n\nlibraries: (chezscheme)\n\n" "The result is fxvector itself if fxvector\nis immutable; otherwise, the result is an immutable fxvector with the same content as fxvector.\n\n" "\n\n" "(define v (fxvector->immutable-fxvector (fxvector 1 2 3)))\n\n(fxvector-set! v 0 0) --> exception: not mutable\n") ("objects:s60" "\n\n\nprocedure: (bytevector fill ...)\n\nreturns: a new bytevector containing fill ...\n\nlibraries: (chezscheme)\n\n" "Each fill value must be an exact integer representing a signed or\nunsigned 8-bit value, i.e.,\na value in the range -128 to 255 inclusive.\nA negative fill value is treated as its two's complement equivalent.\n\n" "\n\n" "(bytevector) --> #vu8()\n\n(bytevector 1 3 5) --> #vu8(1 3 5)\n\n(bytevector -1 -3 -5) --> #vu8(255 253 251)\n") ("objects:s61" "\n\nprocedure: (bytevector->s8-list bytevector)\n\nreturns: a new list of the 8-bit signed elements of bytevector\n\nlibraries: (chezscheme)\n\n" "The values in the returned list are exact eight-bit signed integers,\ni.e., values in the range -128 to 127 inclusive.\nbytevector->s8-list is similar to the Revised6 Report \nbytevector->u8-list except the values in the returned list\nare signed rather than unsigned.\n\n" "\n\n" "(bytevector->s8-list (make-bytevector 0)) --> ()\n\n(bytevector->s8-list #vu8(1 127 128 255)) --> (1 127 -128 -1)\n\n\n(let ([v #vu8(1 2 3 255)])\n\n  (apply * (bytevector->s8-list v))) --> -6\n") ("objects:s62" "\n\nprocedure: (s8-list->bytevector list)\n\nreturns: a new bytevector of the elements of list\n\nlibraries: (chezscheme)\n\n" "list must consist entirely of exact eight-bit signed integers, i.e.,\nvalues in the range -128 to 127 inclusive.\ns8-list->bytevector is similar to the Revised6 Report \nprocedure\nu8-list->bytevector, except the elements of the input list\nare signed rather than unsigned.\n\n" "\n\n" "(s8-list->bytevector '()) --> #vu8()\n\n(s8-list->bytevector '(1 127 -128 -1)) --> #vu8(1 127 128 255)\n\n\n(let ([v #vu8(1 2 3 4 5)])\n\n  (let ([ls (bytevector->s8-list v)])\n\n    (s8-list->bytevector (map - ls)))) --> #vu8(255 254 253 252 251)\n") ("objects:s63" "\n\nprocedure: (bytevector-truncate! bytevector n)\n\nreturns: bytevector or the empty bytevector\n\nlibraries: (chezscheme)\n\n" "bytevector must be mutable.\nn must be an exact nonnegative fixnum not greater than the length of\nbytevector.\nIf n is zero, bytevector-truncate! returns the empty bytevector.\nOtherwise, bytevector-truncate! destructively truncates bytevector to\nits first n bytes and returns bytevector.\n\n" "\n\n" "(define bv (make-bytevector 7 19))\n\n(bytevector-truncate! bv 0) --> #vu8()\n\nbv --> #vu8(19 19 19 19 19 19 19)\n\n(bytevector-truncate! bv 3) --> #vu8(19 19 19)\n\nbv --> #vu8(19 19 19)\n") ("objects:s64" "\n\nprocedure: (bytevector-u24-ref bytevector n eness)\n\nreturns: the 24-bit unsigned integer at index n (zero-based) of bytevector \n\n\nprocedure: (bytevector-s24-ref bytevector n eness)\n\nreturns: the 24-bit signed integer at index n (zero-based) of bytevector \n\n\nprocedure: (bytevector-u40-ref bytevector n eness)\n\nreturns: the 40-bit unsigned integer at index n (zero-based) of bytevector \n\n\nprocedure: (bytevector-s40-ref bytevector n eness)\n\nreturns: the 40-bit signed integer at index n (zero-based) of bytevector \n\n\nprocedure: (bytevector-u48-ref bytevector n eness)\n\nreturns: the 48-bit unsigned integer at index n (zero-based) of bytevector \n\n\nprocedure: (bytevector-s48-ref bytevector n eness)\n\nreturns: the 48-bit signed integer at index n (zero-based) of bytevector \n\n\nprocedure: (bytevector-u56-ref bytevector n eness)\n\nreturns: the 56-bit unsigned integer at index n (zero-based) of bytevector \n\n\nprocedure: (bytevector-s56-ref bytevector n eness)\n\nreturns: the 56-bit signed integer at index n (zero-based) of bytevector \n\nlibraries: (chezscheme)\n\n" "n must be an exact nonnegative integer and\nindexes the starting byte of the value.\nThe sum of n and the number of bytes occupied by the value\n(3 for 24-bit values, 5 for 40-bit values, 6 for 48-bit values,\nand 7 for 56-bit values) must not exceed the length of bytevector.\neness must be a valid endianness symbol naming the endianness.\n\n" "\nThe return value is an exact integer in the appropriate range for\nthe number of bytes occupied by the value.\nSigned values are the equivalent of the stored value treated as a two's\ncomplement value.\n\n") ("objects:s65" "\n\n\nprocedure: (bytevector-u24-set! bytevector n u24 eness)\n\n\nprocedure: (bytevector-s24-set! bytevector n s24 eness)\n\n\nprocedure: (bytevector-u40-set! bytevector n u40 eness)\n\n\nprocedure: (bytevector-s40-set! bytevector n s40 eness)\n\n\nprocedure: (bytevector-u48-set! bytevector n u48 eness)\n\n\nprocedure: (bytevector-s48-set! bytevector n s48 eness)\n\n\nprocedure: (bytevector-u56-set! bytevector n u56 eness)\n\n\nprocedure: (bytevector-s56-set! bytevector n s56 eness)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "bytevector must be mutable.\nn must be an exact nonnegative integer and\nindexes the starting byte of the value.\nThe sum of n and the number of bytes occupied by the value must\nnot exceed the length of bytevector.\nu24 must be a 24-bit unsigned value, i.e., a value in the range\n0 to 224 - 1 inclusive;\ns24 must be a 24-bit signed value, i.e., a value in the range\n-223 to 223 - 1 inclusive;\nu40 must be a 40-bit unsigned value, i.e., a value in the range\n0 to 240 - 1 inclusive;\ns40 must be a 40-bit signed value, i.e., a value in the range\n-239 to 239 - 1 inclusive;\nu48 must be a 48-bit unsigned value, i.e., a value in the range\n0 to 248 - 1 inclusive;\ns48 must be a 48-bit signed value, i.e., a value in the range\n-247 to 247 - 1 inclusive;\nu56 must be a 56-bit unsigned value, i.e., a value in the range\n0 to 256 - 1 inclusive; and\ns56 must be a 56-bit signed value, i.e., a value in the range\n-255 to 255 - 1 inclusive.\neness must be a valid endianness symbol naming the endianness.\n\n" "\nThese procedures store the given value in the 3, 5, 6, or 7 bytes starting\nat index n (zero-based) of bytevector.\nNegative values are stored as their two's complement equivalent.\n\n") ("objects:s66" "\n\n\nprocedure: (mutable-bytevector? obj)\n\nreturns: #t if obj is a mutable bytevector, #f otherwise\n\n\nprocedure: (immutable-bytevector? obj)\n\nreturns: #t if obj is an immutable bytevector, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(mutable-bytevector? (bytevector 1 2 3)) --> #t\n\n(mutable-bytevector?\n\n  (bytevector->immutable-bytevector (bytevector 1 2 3))) --> #f\n\n(immutable-bytevector? (bytevector 1 2 3)) --> #f\n\n(immutable-bytevector?\n\n  (bytevector->immutable-bytevector (bytevector 1 2 3))) --> #t\n\n(immutable-bytevector? (cons 3 4)) --> #f\n") ("objects:s67" "\n\nprocedure: (bytevector->immutable-bytevector bytevector)\n\nreturns: an immutable bytevector equal to bytevector\n\nlibraries: (chezscheme)\n\n" "The result is bytevector itself if bytevector\nis immutable; otherwise, the result is an immutable bytevector with the same content as bytevector.\n\n" "\n\n" "(define bv (bytevector->immutable-bytevector (bytevector 1 2 3)))\n\n(bytevector-u8-set! bv 0 0) --> exception: not mutable\n") ("objects:s70" "\n\nprocedure: (bytevector-compress bytevector)\n\nreturns: a new bytevector containing compressed content of bytevector\n\nlibraries: (chezscheme)\n\n" "The result is the raw compressed data with a minimal header to record\nthe uncompressed size and the compression mode. The result does not include\nthe header that is written by port-based compression using the\ncompressed option. The compression format is determined by the\ncompress-format\nparameter, and the compression level is determined by the\ncompress-level\nparameter.\n\n\n") ("objects:s73" "\n\n\nprocedure: (bytevector-uncompress bytevector)\n\nreturns: a bytevector containing uncompressed content of bytevector\n\nlibraries: (chezscheme)\n\n" "Uncompresses a bytevector produced by\nbytevector-compress to a new bytevector with the same content\nas the original given to bytevector-compress.\n\n\n") ("objects:s82" "\n\n\nprocedure: (box? obj)\n\nreturns: #t if obj is a box, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(box? '#&a) --> #t\n\n(box? 'a) --> #f\n\n(box? (box 3)) --> #t\n") ("objects:s83" "\n\nprocedure: (box obj)\n\nreturns: a new box containing obj\n\nlibraries: (chezscheme)\n\n" "\n" "\n(box 'a) --> #&a\n\n(box (box '(a b c))) --> #&#&(a b c)\n") ("objects:s84" "\n\nprocedure: (unbox box)\n\nreturns: contents of box\n\nlibraries: (chezscheme)\n\n" "\n" "\n(unbox #&a) --> a\n\n(unbox #&#&(a b c)) --> #&(a b c)\n\n\n(let ([b (box \"hi\")])\n\n  (unbox b)) --> \"hi\"\n") ("objects:s85" "\n\nprocedure: (set-box! box obj)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "box must be mutable.\nset-box! sets the contents of box to obj.\n\n" "\n\n" "(let ([b (box 'x)])\n\n  (set-box! b 'y)\n\n  b) --> #&y\n\n\n(let ([incr!\n\n       (lambda (x)\n\n         (set-box! x (+ (unbox x) 1)))])\n\n  (let ([b (box 3)])\n\n    (incr! b)\n\n    (unbox b))) --> 4\n") ("objects:s86" "\n\nprocedure: (box-cas! box old-obj new-obj)\n\nreturns: #t if box is changed, #f otherwise\n\nlibraries: (chezscheme)\n\n" "box must be mutable.\nbox-cas! atomically changes the content of box to new-obj\nif the replaced content is eq? to old-obj.\nIf the content of box that would be replaced is not eq? to old-obj, then\nbox is unchanged.\n\n" "\n\n" "(define b (box 'old))\n\n(box-cas! b 'old 'new) --> #t\n\n(unbox b) --> 'new\n\n(box-cas! b 'other 'wrong) --> #f\n\n(unbox b) --> 'new\n") ("objects:s87" "\n\nprocedure: (mutable-box? obj)\n\nreturns: #t if obj is a mutable box, #f otherwise\n\n\nprocedure: (immutable-box? obj)\n\nreturns: #t if obj is an immutable box, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(mutable-box? (box 1)) --> #t\n\n(mutable-box? (box-immutable 1)) --> #f\n\n(immutable-box? (box 1)) --> #f\n\n(immutable-box? (box-immutable 1)) --> #t\n\n(mutable-box? (cons 3 4)) --> #f\n") ("objects:s88" "\n\nprocedure: (box-immutable obj)\n\nreturns: a new immutable box containing obj\n\nlibraries: (chezscheme)\n\n" "Boxes are typically intended to support shared, mutable structure, so immutable boxes\nare not often useful.\n\n" "\n\n" "(define b (box-immutable 1))\n\n(set-box! b 0) --> exception: not mutable\n") ("objects:s93" "\ndesc:gensym\n\n\nprocedure: (gensym)\n\n\nprocedure: (gensym pretty-name)\n\n\nprocedure: (gensym pretty-name unique-name)\n\nreturns: a unique generated symbol\n\nlibraries: (chezscheme)\n\n" "Each\ncall to gensym returns a unique generated symbol, or gensym.\nEach generated symbol has two names: a \"pretty\" name and a\n\"unique\" name.\n\n" "\nIn the first form above, the pretty name is formed (lazily---see\nbelow) by combining an\ninternal prefix with the value of an internal counter.\nAfter each name is formed, the internal counter is incremented.\nThe parameters gensym-prefix and\ngensym-count, described below, may be used to access and set\nthe internal prefix and counter.\nBy default, the prefix is the single-character string \"g\".\nIn the second and third forms, the pretty name of the new gensym\nis pretty-name, which must be a string.\nThe pretty name of a gensym is returned by the procedure\nsymbol->string.\n\n" "\nIn both the first and second forms, the unique name is an\nautomatically generated globally unique name.\nGlobally unique names are constructed (lazily---see below) from the\ncombination of a universally unique identifier and an internal\ncounter.\nIn the third form of gensym, the unique name of the new gensym is\nunique-name, which must be a string.\nThe unique name of a gensym may be obtained via the procedure\ngensym->unique-string.\n\n" "\nThe unique name allows gensyms to be written in such a way that they\ncan be read back and reliably commonized on input.\nThe syntax for gensyms\nincludes both the pretty name and the unique name, as shown in the\nexample below:\n\n" "\n\n" "(gensym) --> #{g0 bcsfg5eq4e9b3h9o-a}\n" "When the parameter print-gensym is set to pretty,\nthe printer prints the pretty name only, with a\n#: syntax, so\n\n" "\n\n" "(parameterize ([print-gensym 'pretty])\n\n  (write (gensym)))\n" "prints #:g0.\n\n" "\nWhen the reader sees the #: syntax, it produces a gensym with\nthe given pretty name, but the original unique name is lost.\n\n" "\nWhen the parameter is set to #f, the printer prints just the\npretty name, so\n\n" "\n\n" "(parameterize ([print-gensym #f])\n\n  (write (gensym)))\n" "prints g0.\nThis is useful only when gensyms do not need to be read back in\nas gensyms.\n\n" "\nIn order to reduce construction and (when threaded) synchronization\noverhead when gensyms are frequently created but rarely printed or\nstored in an object file, generated pretty and unique names are created\nlazily, i.e., not until first requested, either by the printer, fasl\nwriter, or explicitly by one of the procedures symbol->string\nor gensym->unique-string.\nIn addition, a gensym is not placed into the system's internal symbol\ntable (the oblist; see page 156) until the unique name\nis requested.\nThis allows a gensym to be reclaimed by the storage manager\nif no references to the gensym exist and no unique name exists by which to\naccess it, even if it has a top-level binding or a nonempty property\nlist.\n\n" "\n\n" "(define x (gensym))\n\nx                         --> #{g2 bcsfg5eq4e9b3h9o-c}\n\n(symbol->string x)        --> \"g2\"\n\n(gensym->unique-string x) --> \"bcsfg5eq4e9b3h9o-c\"\n" "Gensyms subsume the notion of uninterned\nsymbols supported by earlier versions of Chez Scheme.\nSimilarly, the predicate\nuninterned-symbol? has been replaced\nby gensym?.\n\n") ("objects:s101" "\n\n\nthread parameter: gensym-prefix\n\n\nthread parameter: gensym-count\n\nlibraries: (chezscheme)\n\n" "The parameters gensym-prefix and\ngensym-count are used to access and set the internal prefix\nand counter from which the pretty name of a gensym\nis generated when gensym is not given an explicit string\nargument.\ngensym-prefix defaults to the string \"g\" and may be\nset to any object.\ngensym-count starts at 0 and may be set to any nonnegative\ninteger.\n\n" "\nAs described above, Chez Scheme delays the creation\nof the pretty name until the name is first requested by the printer or by\nan explicit call to symbol->string.\nThese parameters are not consulted until that time; setting them when\ngensym is called thus has no effect on the generated name.\n\n" "\n\n" "(let ([x (parameterize ([gensym-prefix \"genny\"]\n\n                        [gensym-count 17]\n\n                        [print-gensym 'pretty])\n\n           (gensym))])\n\n  (format \"~s\" x))                       --> \"#{g4 bcsfg5eq4e9b3h9o-e}\"\n\n(let ([x (gensym)])\n\n  (parameterize ([gensym-prefix \"genny\"]\n\n                 [gensym-count 17]\n\n                 [print-gensym #f])\n\n    (format \"~s\" (gensym))))             --> \"genny17\"\n") ("objects:s103" "\n\nprocedure: (gensym->unique-string gensym)\n\nreturns: the unique name of gensym\n\nlibraries: (chezscheme)\n\n" "\n" "\n(gensym->unique-string (gensym)) --> \"bd3kufa7ypjcuvut-g\"\n") ("objects:s104" "\n\nprocedure: (gensym? obj)\n\nreturns: #t if obj is gensym, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(gensym? (string->symbol \"z\")) --> #f\n\n(gensym? (gensym \"z\")) --> #t\n\n(gensym? 'a) --> #f\n\n(gensym? 3) --> #f\n\n(gensym? (gensym)) --> #t\n\n(gensym? '#{g2 bcsfg5eq4e9b3h9o-c}) --> #t\n") ("objects:s105" "property-lists\n\n\nprocedure: (putprop symbol key value)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "Chez Scheme associates a property list with\neach symbol, allowing multiple key-value pairs to be stored\ndirectly with the symbol.\nNew key-value pairs may be placed in the property list or retrieved in\na manner analogous to the use of association lists, using the procedures\nputprop and getprop.\nProperty lists are often used to store information related to the symbol\nitself.\nFor example, a natural language program might use symbols to represent\nwords, using their property lists to store information about use and\nmeaning.\n\n" "\nputprop associates value with key on the\nproperty list of symbol.\nkey and value may be any types of object, although key is\ntypically a symbol.\n\n" "\nputprop may be used to establish a new property or to change\nan existing property.\n\n" "\nSee the examples under getprop below.\n\n\n") ("objects:s107" "\n\n\nprocedure: (getprop symbol key)\n\n\nprocedure: (getprop symbol key default)\n\nreturns: the value associated with key on the property list of symbol\n\nlibraries: (chezscheme)\n\n" "getprop searches the property list of\nsymbol for a key identical to key (in the sense of\neq?), and returns the value associated with this key, if any.\nIf no value is associated with key on the property list of\nsymbol, getprop returns default, or #f if\nthe default argument is not supplied.\n\n\n" "\n\n" "(putprop 'fred 'species 'snurd)\n\n(putprop 'fred 'age 4)  \n\n(putprop 'fred 'colors '(black white))\n\n\n(getprop 'fred 'species) --> snurd\n\n(getprop 'fred 'colors) --> (black white)\n\n(getprop 'fred 'nonkey) --> #f\n\n(getprop 'fred 'nonkey 'unknown) --> unknown\n\n \n\n(putprop 'fred 'species #f)\n\n(getprop 'fred 'species 'unknown) --> #f\n") ("objects:s109" "\n\nprocedure: (remprop symbol key)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "remprop removes the property with key key from the property\nlist of symbol, if such a property exists.\n\n" "\n\n" "(putprop 'fred 'species 'snurd)\n\n(getprop 'fred 'species) --> snurd\n\n\n(remprop 'fred 'species)\n\n(getprop 'fred 'species 'unknown) --> unknown\n") ("objects:s111" "\n\nprocedure: (property-list symbol)\n\nreturns: a copy of the internal property list for symbol\n\nlibraries: (chezscheme)\n\n" "A property list is a list of alternating keys and values,\ni.e., (key value ...).\n\n" "\n\n" "(putprop 'fred 'species 'snurd)\n\n(putprop 'fred 'colors '(black white))\n\n(property-list 'fred) --> (colors (black white) species snurd)\n") ("objects:s112" "desc:oblist\n\n\nprocedure: (oblist)\n\nreturns: a list of interned symbols\n\nlibraries: (chezscheme)\n\n" "The system maintains an internal symbol table used\nto insure that any two occurrences of the same\nsymbol name resolve to the same symbol object.\nThe oblist procedure returns a list of the symbols currently in\nthis symbol table.\n\n" "\nThe list of interned symbols grows when a new symbol\nis introduced into the system or when the unique name of a\ngensym (see page 153) is requested.\nIt shrinks when the garbage collector determines that it is\nsafe to discard a symbol.\nIt is safe to discard a symbol only if the symbol is not accessible except\nthrough the oblist,\nhas no top-level binding, and has no properties on its property\nlist.\n\n" "\n\n" "(if (memq 'tiger (oblist)) 'yes 'no) --> yes\n\n(equal? (oblist) (oblist)) --> #t\n\n(= (length (oblist)) (length (oblist))) --> #t or #f\n" "The first example above follows from the property that all interned\nsymbols are in the oblist from the time they are read, which happens\nprior to evaluation.\nThe second example follows from the fact that no symbols can be\nremoved from the oblist while references to those symbols exist, in\nthis case, within the list returned by the first call to\noblist (whichever call is performed first).\nThe expression in the third example can return #f only if a garbage\ncollection occurs sometime between the two calls to oblist, and only\nif one or more symbols are removed from the oblist by that collection.\n\n") ("objects:s113" "\n\n\nprocedure: (void)\n\nreturns: the void object\n\nlibraries: (chezscheme)\n\n" "void is a procedure of no arguments that returns the void object.\nIt can be used to force expressions that are used for effect or whose\nvalues are otherwise unspecified to evaluate to a consistent, trivial\nvalue.\nSince most Chez Scheme operations that are used for effect\nreturn the void object, however, it is rarely necessary to explicitly\ninvoke the void procedure.\n\n" "\nSince the void object is used explicitly as an \"unspecified\" value,\nit is a bad idea to use it for any other purpose or to count on any\ngiven expression evaluating to the void object.\n\n" "\nThe default waiter printer suppresses the void object; that is, nothing\nis printed for expressions that evaluate to the void object.\n\n" "\n\n" "(eq? (void) #f) --> #f\n\n(eq? (void) #t) --> #f\n\n(eq? (void) '()) --> #f\n") ("objects:s114" "\n\n\nprocedure: (sort predicate list)\n\n\nprocedure: (sort! predicate list)\n\nreturns: a list containing the elements of list sorted according to predicate\n\nlibraries: (chezscheme)\n\n" "sort is identical to the Revised6 Report list-sort,\nand sort! is a destructive version of sort, i.e., it\nreuses pairs from the input list to form the output list.\n\n" "\n\n" "(sort < '(3 4 2 1 2 5)) --> (1 2 2 3 4 5)\n\n(sort! < '(3 4 2 1 2 5)) --> (1 2 2 3 4 5)\n") ("objects:s115" "\n\nprocedure: (merge predicate list1 list2)\n\n\nprocedure: (merge! predicate list1 list2)\n\nreturns: list1 merged with list2 in the order specified by predicate\n\nlibraries: (chezscheme)\n\n" "predicate should be a procedure that expects two arguments and\nreturns #t if its first argument must precede its second in\nthe merged list.\nIt should not have any side effects.\nThat is, if predicate is applied to two objects x and\ny, where x is taken from the second list and y\nis taken from the first list,\nit should return true only if x should appear before y\nin the output list.\nIf this constraint is met,\nmerge and merge! are stable, in that items from list1 are\nplaced in front of equivalent items from list2 in the output list.\nDuplicate elements are included in the merged list.\n\n" "\nmerge! combines the lists destructively, using pairs from the input\nlists to form the output list.\n\n" "\n\n" "(merge char<?\n\n       '(#\\a #\\c)\n\n       '(#\\b #\\c #\\d)) --> (#\\a #\\b #\\c #\\c #\\d)\n\n(merge <\n\n       '(1/2 2/3 3/4)\n\n       '(0.5 0.6 0.7)) --> (1/2 0.5 0.6 2/3 0.7 3/4)\n") ("objects:s116" "\n\n\nprocedure: (hashtable-cell hashtable key default)\n\nreturns: a pair (see below)\n\nlibraries: (chezscheme)\n\n" "hashtable must be a hashtable.\nkey and default may be any Scheme values.\n\n" "\nIf no value is associated with key in hashtable,\nhashtable-cell modifies hashtable to associate key with\ndefault.\nIt returns a pair whose car is key and whose cdr is\nthe associated value.\nChanging the cdr of this pair effectively updates the table to\nassociate key with a new value.\nThe key in the car field should not be changed.\nThe advantage of this procedure over the Revised6 Report procedures\nfor manipulating hashtable entries is that the value associated with\na key may be read or written many times with only a single hashtable\nlookup.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define v (vector 'a 'b 'c))\n\n(define cell (hashtable-cell ht v 3))\n\ncell --> (#(a b c) . 3)\n\n(hashtable-ref ht v 0) --> 3\n\n(set-cdr! cell 4)\n\n(hashtable-ref ht v 0) --> 4\n") ("objects:s117" "\n\nprocedure: (hashtable-keys hashtable)\n\n\nprocedure: (hashtable-keys hashtable size)\n\nreturns: a vector containing the keys in hashtable\n\nlibraries: (chezscheme)\n\n" "Identical to the Revised6 Report counterpart, but allowing an optional\nsize argument.\nIf size is specified, then it must be an exact, nonnegative integer, and the\nresult vector contains no more than size elements.\nDifferent calls to hashtable-keys\nwith a size less than (hashtable-size hashtable)\nmay return different subsets of hashtable's keys.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(hashtable-set! ht 'a \"one\")\n\n(hashtable-set! ht 'b \"two\")\n\n(hashtable-set! ht 'c \"three\")\n\n(hashtable-keys ht) --> #(a b c) or any permutation\n\n(hashtable-keys ht 1) --> #(a) or #(b) or #(c)\n") ("objects:s118" "\n\nprocedure: (hashtable-values hashtable)\n\n\nprocedure: (hashtable-values hashtable size)\n\nreturns: a vector containing the values in hashtable\n\nlibraries: (chezscheme)\n\n" "Each value is the value of one of the keys in hashtable.\nDuplicate values are not removed.\nThe values may appear in any order in the returned vector.\nIf size is specified, then it must be an exact, nonnegative integer, and the\nresult vector contains no more than size elements.\nDifferent calls to hashtable-values\nwith a size less than (hashtable-size hashtable)\nmay return different subsets of hashtable's values.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(hashtable-set! ht p1 \"one\")\n\n(hashtable-set! ht p2 \"two\")\n\n(hashtable-set! ht 'q \"two\")\n\n(hashtable-values ht) --> #(\"one\" \"two\" \"two\") or any permutation\n\n(hashtable-values ht 1) --> #(\"one\") or #(\"two\")\n" "This procedure is equivalent to calling hashtable-entries and returning only\nthe second result, but it is more efficient since the separate vector of keys need\nnot be created.\n\n") ("objects:s119" "\n\n\nprocedure: (hashtable-entries hashtable)\n\n\nprocedure: (hashtable-entries hashtable size)\n\nreturns: two vectors containing the keys and values in hashtable\n\nlibraries: (chezscheme)\n\n" "Identical to the Revised6 Report counterpart, but allowing an optional\nsize argument.\nIf size is specified, then it must be an exact, nonnegative integer, and the\nresult vectors contain no more than size elements.\nDifferent calls to hashtable-entries\nwith a size less than (hashtable-size hashtable)\nmay return different subsets of hashtable's entries.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(hashtable-set! ht 'a \"one\")\n\n(hashtable-set! ht 'b \"two\")\n\n(hashtable-entries ht) --> #(a b) #(\"one\" \"two\") or the other permutation\n\n(hashtable-entries ht 1) --> #(a) #(\"one\") or #(b) #(\"two\") \n") ("objects:s120" "\n\nprocedure: (hashtable-cells hashtable)\n\n\nprocedure: (hashtable-cells hashtable size)\n\nreturns: a vector of up to size elements containing the cells of hashtable\n\nlibraries: (chezscheme)\n\n" "Each element of the result vector is the value of one of the cells in hashtable.\nThe cells may appear in any order in the returned vector.\nIf size is specified, then it must be an exact, nonnegative integer, and the\nresult vector contains no more than size cells.\nIf size is not specified, then the result vector has (hashtable-size hashtable) elements.\nDifferent calls to hashtable-cells\nwith a size less than (hashtable-size hashtable)\nmay return different subsets of hashtable's cells.\n\n" "\n\n" "(define ht (make-eqv-hashtable))\n\n(hashtable-set! ht 1 'one)\n\n(hashtable-set! ht 2 'two)\n\n(hashtable-cells ht) --> #((1 . one) (2 . two)) or #((2 . two) (1 . one))\n\n(hashtable-cells ht 1) --> #((1 . one)) or #((2 . two))\n\n(hashtable-cells ht 0) --> #()\n") ("objects:s121" "\n\nprocedure: (make-weak-eq-hashtable)\n\n\nprocedure: (make-weak-eq-hashtable size)\n\n\nprocedure: (make-weak-eqv-hashtable)\n\n\nprocedure: (make-weak-eqv-hashtable size)\n\nreturns: a new weak eq hashtable\n\nlibraries: (chezscheme)\n\n" "These procedures are like the Revised6 Report procedures make-eq-hashtable\nand make-eqv-hashtable\nexcept the keys of the hashtable are held weakly, i.e., they are not\nprotected from the garbage collector.\nKeys reclaimed by the garbage collector are removed from the table,\nand their associated values are dropped the next time the table\nis modified, if not sooner.\n\n" "\nValues in the hashtable are referenced normally as long as the key is\nnot reclaimed, since keys are paired values using weak pairs. Consequently,\nif a value in the hashtable refers to its own key, then\ngarbage collection is prevented from reclaiming the key. See\nmake-ephemeron-eq-hashtable and make-ephemeron-eqv-hashtable.\n\n" "\nA copy of a weak eq or eqv hashtable created by hashtable-copy is\nalso weak.\nIf the copy is immutable, inaccessible keys may still be dropped from the\nhashtable, even though the contents of the table is otherwise unchanging.\nThe effect of this can be observed via hashtable-keys and\nhashtable-entries.\n\n" "\n\n" "(define ht1 (make-weak-eq-hashtable))\n\n(define ht2 (make-weak-eq-hashtable 32))\n") ("objects:s122" "\n\nprocedure: (make-ephemeron-eq-hashtable)\n\n\nprocedure: (make-ephemeron-eq-hashtable size)\n\n\nprocedure: (make-ephemeron-eqv-hashtable)\n\n\nprocedure: (make-ephemeron-eqv-hashtable size)\n\nreturns: a new ephemeron eq hashtable\n\nlibraries: (chezscheme)\n\n" "These procedures are like make-weak-eq-hashtable and\nmake-weak-eqv-hashtable, but a value in the hashtable can refer to a\nkey in the hashtable (directly or indirectly) without preventing garbage collection from\nreclaiming the key, because keys are paired with values using ephemeron pairs.\n\n" "\nA copy of an ephemeron eq or eqv hashtable created by\nhashtable-copy is also an ephemeron table, and an inaccessible\nkey can be dropped from an immutable ephemeron hashtable in the same\nway as for an immutable weak hashtable.\n\n" "\n\n" "(define ht1 (make-ephemeron-eq-hashtable))\n\n(define ht2 (make-ephemeron-eq-hashtable 32))\n") ("objects:s123" "\n\nprocedure: (hashtable-weak? obj)\n\nreturns: #t if obj is a weak eq or eqv hashtable, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "(define ht1 (make-weak-eq-hashtable))\n\n(define ht2 (hashtable-copy ht1))\n\n(hashtable-weak? ht2) --> #t\n") ("objects:s124" "\n\nprocedure: (hashtable-ephemeron? obj)\n\nreturns: #t if obj is an ephemeron eq or eqv hashtable, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "(define ht1 (make-ephemeron-eq-hashtable))\n\n(define ht2 (hashtable-copy ht1))\n\n(hashtable-ephemeron? ht2) --> #t\n") ("objects:s125" "\n\nprocedure: (eq-hashtable? obj)\n\nreturns: #t if obj is an eq hashtable, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(eq-hashtable? (make-eq-hashtable)) --> #t\n\n(eq-hashtable? '(not a hash table)) --> #f\n") ("objects:s126" "\n\nprocedure: (eq-hashtable-weak? hashtable)\n\nreturns: #t if hashtable is weak, #f otherwise\n\nlibraries: (chezscheme)\n\n" "hashtable must be an eq hashtable.\n\n" "\n\n" "(eq-hashtable-weak? (make-eq-hashtable)) --> #f\n\n(eq-hashtable-weak? (make-weak-eq-hashtable)) --> #t\n") ("objects:s127" "\n\nprocedure: (eq-hashtable-ephemeron? hashtable)\n\nreturns: #t if hashtable uses ephemeron pairs, #f otherwise\n\nlibraries: (chezscheme)\n\n" "hashtable must be an eq hashtable.\n\n" "\n\n" "(eq-hashtable-ephemeron? (make-eq-hashtable)) --> #f\n\n(eq-hashtable-ephemeron? (make-ephemeron-eq-hashtable)) --> #t\n") ("objects:s128" "\n\nprocedure: (eq-hashtable-set! hashtable key value)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "hashtable must be a mutable eq hashtable.\nkey and value may be any Scheme values.\n\n" "\neq-hashtable-set! associates the value\nvalue with the key key in hashtable.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(eq-hashtable-set! ht 'a 73)\n") ("objects:s129" "\n\nprocedure: (eq-hashtable-ref hashtable key default)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "hashtable must be an eq hashtable.\nkey and default may be any Scheme values.\n\n" "\neq-hashtable-ref returns the value\nassociated with key in hashtable.\nIf no value is associated with key in hashtable,\neq-hashtable-ref returns default.\n\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(eq-hashtable-set! ht p1 73)\n\n(eq-hashtable-ref ht p1 55) --> 73\n\n(eq-hashtable-ref ht p2 55) --> 55\n") ("objects:s130" "\n\nprocedure: (eq-hashtable-contains? hashtable key)\n\nreturns: #t if an association for key exists in hashtable, #f otherwise\n\nlibraries: (chezscheme)\n\n" "hashtable must be an eq hashtable.\nkey may be any Scheme value.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(eq-hashtable-set! ht p1 73)\n\n(eq-hashtable-contains? ht p1) --> #t\n\n(eq-hashtable-contains? ht p2) --> #f\n") ("objects:s131" "\n\nprocedure: (eq-hashtable-update! hashtable key procedure default)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "hashtable must be a mutable eq hashtable.\nkey and default may be any Scheme values.\nprocedure should accept one argument, should return one value, and\nshould not modify hashtable.\n\n" "\neq-hashtable-update! applies procedure to the value associated with\nkey in hashtable, or to default if no value is associated with\nkey in hashtable.\nIf procedure returns, eq-hashtable-update! associates key\nwith the value returned by procedure, replacing the old association,\nif any.\n\n" "\nA version of eq-hashtable-update! that does not verify that it receives\narguments of the proper type might be defined as follows.\n\n" "\n\n" "(define eq-hashtable-update!\n\n  (lambda (ht key proc value)\n\n    (eq-hashtable-set! ht key\n\n      (proc (eq-hashtable-ref ht key value)))))\n" "An implementation may, however, be able to implement\neq-hashtable-update! more efficiently by avoiding multiple\nhash computations and hashtable lookups.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(eq-hashtable-update! ht 'a\n\n  (lambda (x) (* x 2))\n\n  55)\n\n(eq-hashtable-ref ht 'a 0) --> 110\n\n(eq-hashtable-update! ht 'a\n\n  (lambda (x) (* x 2))\n\n  0)\n\n(eq-hashtable-ref ht 'a 0) --> 220\n") ("objects:s132" "\n\nprocedure: (eq-hashtable-cell hashtable key default)\n\nreturns: a pair (see below)\n\nlibraries: (chezscheme)\n\n" "hashtable must be an eq hashtable.\nkey and default may be any Scheme values.\n\n" "\nIf no value is associated with key in hashtable,\neq-hashtable-cell modifies hashtable to associate key with\ndefault.\nIt returns a pair whose car is key and whose cdr is\nthe associated value.\nChanging the cdr of this pair effectively updates the table to\nassociate key with a new value.\nThe key should not be changed.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define v (vector 'a 'b 'c))\n\n(define cell (eq-hashtable-cell ht v 3))\n\ncell --> (#(a b c) . 3)\n\n(eq-hashtable-ref ht v 0) --> 3\n\n(set-cdr! cell 4)\n\n(eq-hashtable-ref ht v 0) --> 4\n") ("objects:s133" "\n\nprocedure: (eq-hashtable-delete! hashtable key)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "hashtable must be a mutable eq hashtable.\nkey may be any Scheme value.\n\n" "\neq-hashtable-delete! drops any association\nfor key from hashtable.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(eq-hashtable-set! ht p1 73)\n\n(eq-hashtable-contains? ht p1) --> #t\n\n(eq-hashtable-delete! ht p1)\n\n(eq-hashtable-contains? ht p1) --> #f\n\n(eq-hashtable-contains? ht p2) --> #f\n\n(eq-hashtable-delete! ht p2)\n") ("objects:s134" "\n\nprocedure: (symbol-hashtable? obj)\n\nreturns: #t if obj is an eq hashtable, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "\n(symbol-hashtable? (make-hashtable symbol-hash eq?)) --> #t\n\n(symbol-hashtable? (make-eq-hashtable)) --> #f\n") ("objects:s135" "\n\nprocedure: (symbol-hashtable-set! hashtable key value)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "hashtable must be a mutable symbol hashtable.\n(A symbol hashtable is a hashtable created with hash function symbol-hash\nand equivalence function eq?, eqv?, equal?, or symbol=?.)\nkey must be a symbol, and value may be any Scheme value.\n\n" "\nsymbol-hashtable-set! associates the value\nvalue with the key key in hashtable.\n\n" "\n\n" "(define ht (make-hashtable symbol-hash eq?))\n\n(symbol-hashtable-ref ht 'a #f) --> #f\n\n(symbol-hashtable-set! ht 'a 73)\n\n(symbol-hashtable-ref ht 'a #f) --> 73\n") ("objects:s136" "\n\nprocedure: (symbol-hashtable-ref hashtable key default)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "hashtable must be a symbol hashtable.\n(A symbol hashtable is a hashtable created with hash function symbol-hash\nand equivalence function eq?, eqv?, equal?, or symbol=?.)\nkey must be a symbol, and default may be any Scheme value.\n\n" "\nsymbol-hashtable-ref returns the value\nassociated with key in hashtable.\nIf no value is associated with key in hashtable,\nsymbol-hashtable-ref returns default.\n\n\n" "\n\n" "(define ht (make-hashtable symbol-hash eq?))\n\n(define k1 'abcd)\n\n(define k2 'not-abcd)\n\n(symbol-hashtable-set! ht k1 \"hi\")\n\n(symbol-hashtable-ref ht k1 \"bye\") --> \"hi\"\n\n(symbol-hashtable-ref ht k2 \"bye\") --> \"bye\"\n") ("objects:s137" "\n\nprocedure: (symbol-hashtable-contains? hashtable key)\n\nreturns: #t if an association for key exists in hashtable, #f otherwise\n\nlibraries: (chezscheme)\n\n" "hashtable must be a symbol hashtable.\n(A symbol hashtable is a hashtable created with hash function symbol-hash\nand equivalence function eq?, eqv?, equal?, or symbol=?.)\nkey must be a symbol.\n\n" "\n\n" "(define ht (make-hashtable symbol-hash eq?))\n\n(define k1 'abcd)\n\n(define k2 'not-abcd)\n\n(symbol-hashtable-set! ht k1 \"hi\")\n\n(symbol-hashtable-contains? ht k1) --> #t\n\n(symbol-hashtable-contains? ht k2 ) --> #f\n") ("objects:s138" "\n\nprocedure: (symbol-hashtable-update! hashtable key procedure default)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "hashtable must be a mutable symbol hashtable.\n(A symbol hashtable is a hashtable created with hash function symbol-hash\nand equivalence function eq?, eqv?, equal?, or symbol=?.)\nkey must be a symbol, and default may be any Scheme value.\nprocedure should accept one argument, should return one value, and\nshould not modify hashtable.\n\n" "\nsymbol-hashtable-update! applies procedure to the value associated with\nkey in hashtable, or to default if no value is associated with\nkey in hashtable.\nIf procedure returns, symbol-hashtable-update! associates key\nwith the value returned by procedure, replacing the old association,\nif any.\n\n" "\nA version of symbol-hashtable-update! that does not verify that it receives\narguments of the proper type might be defined as follows.\n\n" "\n\n" "(define symbol-hashtable-update!\n\n  (lambda (ht key proc value)\n\n    (symbol-hashtable-set! ht key\n\n      (proc (symbol-hashtable-ref ht key value)))))\n" "An implementation may, however, be able to implement\nsymbol-hashtable-update! more efficiently by avoiding multiple\nhash computations and hashtable lookups.\n\n" "\n\n" "(define ht (make-hashtable symbol-hash eq?))\n\n(symbol-hashtable-update! ht 'a\n\n  (lambda (x) (* x 2))\n\n  55)\n\n(symbol-hashtable-ref ht 'a 0) --> 110\n\n(symbol-hashtable-update! ht 'a\n\n  (lambda (x) (* x 2))\n\n  0)\n\n(symbol-hashtable-ref ht 'a 0) --> 220\n") ("objects:s139" "\n\nprocedure: (symbol-hashtable-cell hashtable key default)\n\nreturns: a pair (see below)\n\nlibraries: (chezscheme)\n\n" "hashtable must be a mutable symbol hashtable.\n(A symbol hashtable is a hashtable created with hash function symbol-hash\nand equivalence function eq?, eqv?, equal?, or symbol=?.)\nkey must be a symbol, and default may be any Scheme value.\n\n" "\nIf no value is associated with key in hashtable,\nsymbol-hashtable-cell modifies hashtable to associate key with\ndefault.\nIt returns a pair whose car is key and whose cdr is\nthe associated value.\nChanging the cdr of this pair effectively updates the table to\nassociate key with a new value.\nThe key should not be changed.\n\n" "\n\n" "(define ht (make-hashtable symbol-hash eq?))\n\n(define k 'a-key)\n\n(define cell (symbol-hashtable-cell ht k 3))\n\ncell --> (a-key . 3)\n\n(symbol-hashtable-ref ht k 0) --> 3\n\n(set-cdr! cell 4)\n\n(symbol-hashtable-ref ht k 0) --> 4\n") ("objects:s140" "\n\nprocedure: (symbol-hashtable-delete! hashtable key)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "hashtable must be a mutable symbol hashtable.\n(A symbol hashtable is a hashtable created with hash function symbol-hash\nand equivalence function eq?, eqv?, equal?, or symbol=?.)\nkey must be a symbol.\n\n" "\nsymbol-hashtable-delete! drops any association\nfor key from hashtable.\n\n" "\n\n" "(define ht (make-hashtable symbol-hash eq?))\n\n(define k1 (gensym))\n\n(define k2 (gensym))\n\n(symbol-hashtable-set! ht k1 73)\n\n(symbol-hashtable-contains? ht k1) --> #t\n\n(symbol-hashtable-delete! ht k1)\n\n(symbol-hashtable-contains? ht k1) --> #f\n\n(symbol-hashtable-contains? ht k2) --> #f\n\n(symbol-hashtable-delete! ht k2)\n") ("objects:s143" "\n\n\nthread parameter: require-nongenerative-clause\n\nlibraries: (chezscheme)\n\n" "This parameter holds a boolean value that determines whether\ndefine-record-type\nrequires a nongenerative clause.\nThe default value is #f.\nThe lead-in above describes why one might want to set this to #t.\n\n") ("objects:s157" "\n\nprocedure: (record-type-equal-procedure rtd equal-proc)\n\nreturns: unspecified\n\n\nprocedure: (record-type-equal-procedure rtd)\n\nreturns: equality procedure associated with rtd, if any, otherwise #f\n\nlibraries: (chezscheme)\n\n" "In the first form, equal-proc must be a procedure or #f.\nIf equal-proc is a procedure, a new association between\nrtd and equal-proc is established, replacing any existing\nsuch association.\nIf equal-proc is #f, any existing association between\nrtd and an equality procedure is dropped.\n\n" "\nIn the second form, record-type-equal-procedure returns\nthe equality procedure associated with rtd, if any, otherwise #f.\n\n" "\nWhen changing a record type's equality procedure, the record type's\nhash procedure, if any, should be updated if necessary to maintain\nthe property that it produces the same hash value for any two\ninstances the equality procedure considers equal.\n\n") ("objects:s158" "\n\n\nprocedure: (record-equal-procedure record1 record2)\n\nreturns: the shared equality procedure for record1 and record2, if there is one, otherwise #f\n\nlibraries: (chezscheme)\n\n" "record-equal-procedure traverses the inheritance chains\nfor both record instances in an attempt to find the most specific\ntype for each that is associated with an equality procedure, if any.\nIf such type is found and is the same for both instances, the\nequality procedure associated with the type is returned.\nOtherwise, #f is returned.\n\n") ("objects:s159" "\n\n\nprocedure: (record-type-hash-procedure rtd hash-proc)\n\nreturns: unspecified\n\n\nprocedure: (record-type-hash-procedure rtd)\n\nreturns: hash procedure associated with rtd, if any, otherwise #f\n\nlibraries: (chezscheme)\n\n" "In the first form, hash-proc must be a procedure or #f.\nIf hash-proc is a procedure, a new association between\nrtd and hash-proc is established, replacing any existing\nsuch association.\nIf hash-proc is #f, any existing association between\nrtd and a hash procedure is dropped.\n\n" "\nIn the second form, record-type-hash-procedure returns\nthe hash procedure associated with rtd, if any, otherwise #f.\n\n" "\nThe procedure hash-proc should accept two arguments, the\ninstance for which it should compute a hash value and a hash procedure\nto use to compute hash values for arbitrary fields of the instance,\nand it returns a nonnegative exact integer.\nA record type's hash procedure should produce the same hash value\nfor any two instances the record type's equality procedure considers\nequal.\n\n") ("objects:s160" "\n\n\nprocedure: (record-hash-procedure record)\n\nreturns: the hash procedure for record, if there is one, otherwise #f\n\nlibraries: (chezscheme)\n\n" "record-hash-procedure traverses the inheritance chain\nfor the record instance in an attempt to find the most specific\ntype that is associated with a hash procedure, if any.\nIf such type is found, the hash procedure associated with the type\nis returned.\nOtherwise, #f is returned.\n\n") ("objects:s161" "\n\n\nthread parameter: default-record-equal-procedure\n\nlibraries: (chezscheme)\n\n" "This parameter determines how two record instances are compared by\nequal? if neither has a type-specific equality procedure.\nWhen the parameter has the value #f (the default), equal?\ncompares the instances with eq?, i.e., there is no attempt at\ndetermining structural equivalence.\nOtherwise, the parameter's value must be a procedure, and equal?\ninvokes that procedure to compare the instances, passing it three arguments:\nthe two instances and a procedure that should be used to recursively\ncompare arbitrary values within the instances.\n\n") ("objects:s162" "\n\n\nthread parameter: default-record-hash-procedure\n\nlibraries: (chezscheme)\n\n" "This parameter determines the hash procedure used when equal-hash\nis called on a record instance and the instance does not have a type-specific\nhash procedure.\nWhen the parameter has the value #f (the default), equal-hash\nreturns a value that is independent of the record type and contents\nof the instance.\nOtherwise, the parameter's value must be a procedure, and equal-hash\ninvokes the procedure to compute the instance's hash value, passing it\nthe record instance and a procedure to invoke to recursively compute\nhash values for arbitrary values contained within the record.\nThe procedure should return a nonnegative exact integer, and the\nreturn value should be the same for any two instances the default\nequal procedure considers equivalent.\n\n") ("objects:s173" "\n\n\nsyntax: (define-record name (fld1 ...) ((fld2 init) ...) (opt ...))\n\n\nsyntax: (define-record name parent (fld1 ...) ((fld2 init) ...) (opt ...))\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "A define-record form is a definition and may appear anywhere\nand only where other definitions may appear.\n\n" "\ndefine-record creates a new record type containing a specified\nset of named fields and defines a set of procedures for creating and\nmanipulating instances of the record type.\n\n" "\nname must be an identifier.\nIf name is a generated symbol (gensym), the record definition is\nnongenerative, otherwise it is expand-time generative.\n(See the discussion of generativity earlier in this section.)\n\n" "\nEach fld must be an identifier field-name, or it must take\nthe form\n\n" "\n\n" "(class type field-name)\n" "where class and type are optional and\nfield-name is an identifier.\nclass, if present, must be the keyword immutable\nor the keyword mutable.\nIf the immutable class specifier is present, the field is\nimmutable; otherwise, the field is mutable.\ntype, if present, specifies how the field is represented,\nas described below.\n \n" "\nleftrecord-field-types\nptr left            any Scheme objectleft\nscheme-object left  same as ptrleft\nint left            a C intleft\nunsigned left       a C unsigned intleft\nshort left          a C shortleft\nunsigned-short left a C unsigned shortleft\nlong left           a C longleft\nunsigned-long left  a C unsigned longleft\niptr left           a signed integer the size of a ptrleft\nuptr left           an unsigned integer the size of a ptrleft\nfloat left          a C floatleft\ndouble left         a C doubleleft\ninteger-8 left      an eight-bit signed integerleft\nunsigned-8 left     an eight-bit unsigned integerleft\ninteger-16 left     a 16-bit signed integerleft\nunsigned-16 left    a 16-bit unsigned integerleft\ninteger-32 left     a 32-bit signed integerleft\nunsigned-32 left    a 32-bit unsigned integerleft\ninteger-64 left     a 64-bit signed integerleft\nunsigned-64 left    a 64-bit unsigned integerleft\nsingle-float left   a 32-bit single floating point numberleft\ndouble-float left   a 64-bit double floating point number\n\n\n" "\nIf a type is specified, the field can contain objects only of the\nspecified type.\nIf no type is specified, the field is of type ptr,\nmeaning that it can contain any Scheme object.\n\n" "\nThe field identifiers name the fields of the record.\nThe values of the n fields described by fld1 ... are\nspecified by the n arguments to the generated constructor procedure.\nThe values of the remaining fields, fld2 ..., are\ngiven by the corresponding expressions, init ....\nEach init is evaluated within the scope of the set of field names\ngiven by fld1 ... and each field in\nfld2 ... that precedes it, as if within a\nlet* expression.\nEach of these field names is bound to the value of the corresponding field\nduring initialization.\n\n" "\nIf\nparent is present, the record type named by parent\nis the parent of the record.\nThe new record type inherits each of the parent record's fields,\nand records of the new type are considered records of the\nparent type.\nIf parent is not present, the parent record type is\na base record type with no fields.\n\n" "\nThe following procedures are defined by define-record:\n\n" "\n\na constructor procedure whose name is make-name,\n\n\na type predicate whose name is name?,\n\n\nan access procedure whose name is name-fieldname\nfor each noninherited field, and\n\n\nan assignment procedure whose name is\nset-name-fieldname!\nfor each noninherited mutable field.\n\n" "\n\n" "\nIf no parent record type is specified,\nthe constructor behaves as if defined as\n\n" "\n\n" "(define make-name\n\n  (lambda (id1 ...)\n\n    (let* ([id2 init] ...)\n\n      body)))\n" "where id1 ... are the names of the fields defined by\nfld1 ...,\nid2 ... are the names of the fields defined by\nfld2 ...,\nand body builds the record from the values of the identifiers\nid1 ... and id2 ....\n\n" "\nIf a parent record type is specified, the parent arguments appear first,\nand the parent fields are inserted into the record before the child\nfields.\n\n" "\nThe options opt ... control the selection of names\nof the generated constructor, predicate, accessors, and mutators.\n\n" "\n\n" "(constructor id)\n\n(predicate id)\n\n(prefix string)\n" "The option\n(constructor id) causes the generated constructor's name\nto be id rather than make-name.\nThe option (predicate id) likewise causes the generated\npredicate's name to be id rather than name?.\nThe option (prefix string) determines the prefix\nto be used in the generated accessor and mutator names in place of\nname-.\n\n" "\nIf no options are needed, the third subexpression,\n(opt ...), may be omitted.\nIf no options and no fields other than those initialized by the arguments\nto the\nconstructor procedure are needed, both the second and third subexpressions\nmay be omitted.\nIf options are specified, the second subexpression must be present,\neven if it contains no field specifiers.\n\n" "\nHere is a simple example with no inheritance and no options.\n\n" "\n\n" "(define-record marble (color quality))\n\n(define x (make-marble 'blue 'medium))\n\n(marble? x) --> #t\n\n(pair? x) --> #f\n\n(vector? x) --> #f\n\n(marble-color x) --> blue\n\n(marble-quality x) --> medium\n\n(set-marble-quality! x 'low)\n\n(marble-quality x) --> low\n\n\n(define-record marble ((immutable color) (mutable quality))\n\n  (((mutable shape) (if (eq? quality 'high) 'round 'unknown))))\n\n(marble-shape (make-marble 'blue 'high)) --> round\n\n(marble-shape (make-marble 'blue 'low)) --> unknown\n\n(define x (make-marble 'blue 'high))\n\n(set-marble-quality! x 'low)\n\n(marble-shape x) --> round\n\n(set-marble-shape! x 'half-round)\n\n(marble-shape x) --> half-round\n" "The following example illustrates inheritance.\n\n" "\n\n" "(define-record shape (x y))\n\n(define-record point shape ())\n\n(define-record circle shape (radius))\n\n\n(define a (make-point 7 -3))\n\n(shape? a) --> #t\n\n(point? a) --> #t\n\n(circle? a) --> #f\n\n\n(shape-x a) --> 7\n\n(set-shape-y! a (- (shape-y a) 1))\n\n(shape-y a) --> -4\n\n\n(define b (make-circle 7 -3 1))\n\n(shape? b) --> #t\n\n(point? b) --> #f\n\n(circle? b) --> #t\n\n\n(circle-radius b) --> 1\n\n(circle-radius a) --> exception: not of type circle\n\n\n(define c (make-shape 0 0))\n\n(shape? c) --> #t\n\n(point? c) --> #f\n\n(circle? c) --> #f\n" "This example demonstrates the use of options:\n\n" "\n\n" "(define-record pair (car cdr)\n\n  ()\n\n  ((constructor cons)\n\n   (prefix \"\")))\n\n\n(define x (cons 'a 'b))\n\n(car x) --> a\n\n(cdr x) --> b\n\n(pair? x) --> #t\n\n\n(pair? '(a b c)) --> #f\n\nx --> #[#{pair bdhavk1bwafxyss1-a} a b]\n" "This example illustrates the use a specified reader name, immutable\nfields, and the graph mark and reference syntax.\n\n" "\n\n" "(define-record triple ((immutable x1) (mutable x2) (immutable x3)))\n\n(record-reader 'triple (type-descriptor triple))\n\n\n(let ([t '#[triple #1=(1 2) (3 4) #1#]])\n\n  (eq? (triple-x1 t) (triple-x3 t))) --> #t\n\n(let ([x '(#1=(1 2) . #[triple #1# b c])])\n\n  (eq? (car x) (triple-x1 (cdr x)))) --> #t\n\n(let ([t #[triple #1# (3 4) #1=(1 2)]])\n\n  (eq? (triple-x1 t) (triple-x3 t))) --> #t\n\n(let ([t '#1=#[triple a #1# c]])\n\n  (eq? t (triple-x2 t))) --> #t\n\n(let ([t '#1=(#[triple #1# b #1#])])\n\n  (and (eq? t (triple-x1 (car t)))\n\n       (eq? t (triple-x1 (car t))))) --> #t\n" "Cycles established with the mark and reference syntax can be\nresolved only if a mutable record field or mutable location\nof some other object is involved the cycle, as in the last\ntwo examples above.\nAn exception is raised with condition type &lexical if only\nimmutable fields are involved.\n\n" "\n\n" "'#1=#[triple #1# (3 4) #1#] --> exception\n" "The following example demonstrates\nthe use of nongenerative record definitions.\n\n" "\n\n" "(module A (point-disp)\n\n  (define-record #{point bdhavk1bwafxyss1-b} (x y))\n\n  (define square (lambda (x) (* x x)))\n\n  (define point-disp\n\n    (lambda (p1 p2)\n\n      (sqrt (+ (square (- (point-x p1) (point-x p2)))\n\n               (square (- (point-y p1) (point-y p2))))))))\n\n\n(module B (base-disp)\n\n  (define-record #{point bdhavk1bwafxyss1-b} (x y))\n\n  (import A)\n\n  (define base-disp\n\n    (lambda (p)\n\n      (point-disp (make-point 0 0) p))))\n\n\n(let ()\n\n  (import B)\n\n  (define-record #{point bdhavk1bwafxyss1-b} (x y))\n\n  (base-disp (make-point 3 4))) --> 5\n" "This works even if the different program components are loaded from\ndifferent source files or are compiled separately and loaded from\ndifferent object files.\n\n") ("objects:s177" "\n\n\nsyntax: predicate\n\n\nsyntax: prefix\n\n\nsyntax: constructor\n\nlibraries: (chezscheme)\n\n" "These identifiers are auxiliary keywords for define-record.\nIt is a syntax violation to reference these identifiers except in\ncontexts where they are recognized as auxiliary keywords.\nmutable and immutable are also auxiliary keywords for\ndefine-record, shared with the Revised6 Report\ndefine-record-type.\n\n\n") ("objects:s180" "\n\n\nsyntax: (type-descriptor name)\n\nreturns: the record-type descriptor associated with name\n\nlibraries: (chezscheme)\n\n" "name must name a record type defined by define-record\nor define-record-type.\n\n" "\nThis form is equivalent to the Revised6 Report\nrecord-type-descriptor form.\n\n" "\nThe record-type descriptor is useful for overriding the default\nread and write syntax using record-reader and\nrecord-writer and may also be used with the procedural\ninterface routines described later in this section.\n\n" "\n\n" "(define-record frob ())\n\n(type-descriptor frob) --> #<record type frob>\n") ("objects:s181" "\n\nprocedure: (record-reader name)\n\nreturns: the record-type descriptor associated with name\n\n\nprocedure: (record-reader rtd)\n\nreturns: the first name associated with rtd\n\n\nprocedure: (record-reader name rtd)\n\nreturns: unspecified\n\n\nprocedure: (record-reader name #f)\n\nreturns: unspecified\n\n\nprocedure: (record-reader rtd #f)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "name must be a symbol, and rtd must be a\nrecord-type descriptor.\n\n" "\nWith one argument, record-reader is used to retrieve the record\ntype associated with a name or name associated with a record type.\nIf no association has been created, record-reader returns\n#f\n\n" "\nWith arguments name and rtd, record-reader registers\nrtd as the record-type descriptor to be used whenever the\nread procedure encounters a record named by name and\nprinted in the default record syntax.\n\n" "\nWith arguments name and #f, record-reader removes\nany association for name to a record-type descriptor.\nSimilarly, with arguments rtd and #f, record-reader\nremoves any association for rtd to a name.\n\n" "\n\n" "(define-record marble (color quality))\n\n(define m (make-marble 'blue 'perfect))\n\nm --> #[#{marble bdhavk1bwafxyss1-c} blue perfect]\n\n\n(record-reader (type-descriptor marble)) --> #f\n\n(record-reader 'marble) --> #f\n\n\n(record-reader 'marble (type-descriptor marble))\n\n(marble-color '#[marble red miserable]) --> red\n\n\n(record-reader (type-descriptor marble)) --> marble\n\n(record-reader 'marble) --> #<record type marble>\n\n\n(record-reader (type-descriptor marble) #f)\n\n(record-reader (type-descriptor marble)) --> #f\n\n(record-reader 'marble) --> #f\n\n\n(record-reader 'marble (type-descriptor marble))\n\n(record-reader 'marble #f)\n\n(record-reader (type-descriptor marble)) --> #f\n\n(record-reader 'marble) --> #f\n" "The introduction of a record reader also changes the default\nprinting of records.\nThe printer always chooses the reader name first assigned\nto the record, if any, in place of the unique record name, as this\ncontinuation of the example above demonstrates.\n\n" "\n\n" "(record-reader 'marble (type-descriptor marble))\n\n(make-marble 'pink 'splendid) --> #[marble pink splendid]\n") ("objects:s182" "\n\nprocedure: (record-writer rtd)\n\nreturns: the record writer associated with rtd\n\n\nprocedure: (record-writer rtd procedure)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "rtd must be a record-type descriptor, and procedure should\naccept three arguments, as described below.\n\n" "\nWhen passed only one argument, record-writer returns the\nrecord writer associated with rtd, which is initially the\ndefault record writer for all records.\nThe default print method prints all records in a uniform syntax that\nincludes the generated name for the record \nand the values of each of the fields, as described in the introduction\nto this section.\n\n" "\nWhen passed two arguments, record-writer establishes a\nnew association between rtd and procedure so that\nprocedure will be used by the printer in place of the default\nprinter for records of the given type.\nThe printer passes procedure three arguments:\nthe record r, a port p, and a procedure wr that\nshould be used to write out the values of arbitrary Scheme objects that\nthe print method chooses to include in the printed representation of the\nrecord, e.g., values of the record's fields.\n\n" "\n\n" "(define-record marble (color quality))\n\n(define m (make-marble 'blue 'medium))\n\n\nm --> #[#{marble bdhavk1bwafxyss1-d} blue medium]\n\n\n(record-writer (type-descriptor marble)\n\n  (lambda (r p wr)\n\n    (display \"#<\" p)\n\n    (wr (marble-quality r) p)\n\n    (display \" quality \" p)\n\n    (wr (marble-color r) p)\n\n    (display \" marble>\" p)))\n\n\nm --> #<medium quality blue marble>\n" "The record writer is used only when print-record is true\n(the default).\nWhen the parameter print-record is set to #f, records\nare printed using a compressed syntax that identifies only the type\nof record.\n\n" "\n\n" "(parameterize ([print-record #f])\n\n  (format \"~s\" m)) --> \"#<record of type marble>\"\n" "A print method may be called more than once during the printing of a\nsingle record to support cycle detection and graph printing\n(see print-graph),\nso print\nmethods that perform side effects other than printing to the given\nport are discouraged.\nWhenever a print method is called more than once during the printing\nof a single record, in all but one call, a generic \"bit sink\" port\nis used to suppress output automatically so that only one copy of\nthe object appears on the actual port.\nIn order to avoid confusing the cycle detection and graph printing\nalgorithms, a print method should always produce the same printed\nrepresentation for each object.\nFurthermore, a print method should normally use the supplied procedure\nwr to print subobjects, though atomic values, such as strings\nor numbers, may be printed by direct calls to display or\nwrite or by other means.\n\n" "\n\n" "(let ()\n\n  (define-record ref () ((contents 'nothing)))\n\n  (record-writer (type-descriptor ref)\n\n    (lambda (r p wr)\n\n      (display \"<\" p)\n\n      (wr (ref-contents r) p)\n\n      (display \">\" p)))\n\n  (let ([ref-lexive (make-ref)])\n\n    (set-ref-contents! ref-lexive ref-lexive)\n\n    ref-lexive)) --> #0=<#0#>\n" "Print methods need not be concerned with handling nonfalse values of\nthe parameters\nprint-level.\nThe printer handles print-level automatically even when\nuser-defined print procedures are used.\nSince records typically contain a small, fixed number of fields, it\nis usually possible to ignore nonfalse values of\nprint-length as well.\n\n" "\n\n" "(print-level 3)\n\n(let ()\n\n  (define-record ref () ((contents 'nothing)))\n\n  (record-writer (type-descriptor ref)\n\n    (lambda (r p wr)\n\n      (display \"<\" p)\n\n      (wr (ref-contents r) p)\n\n      (display \">\" p)))\n\n  (let ([ref-lexive (make-ref)])\n\n    (set-ref-contents! ref-lexive ref-lexive)\n\n    ref-lexive)) --> <<<<#[...]>>>>\n") ("objects:s186" "\n\nthread parameter: print-record\n\nlibraries: (chezscheme)\n\n" "This parameter controls the printing of records.\nIf set to true (the default) the record writer associated with a\nrecord type is used to print records of that type.\nIf set to false, all records are printed with the syntax\n#<record of type name>, where name is the\nname of the record type as returned by record-type-name.\n\n\n") ("objects:s187" "\n\n\nprocedure: (make-record-type type-name fields)\n\n\nprocedure: (make-record-type parent-rtd type-name fields)\n\nreturns: a record-type descriptor for a new record type\n\nlibraries: (chezscheme)\n\n" "make-record-type creates a new data type and returns a\nrecord-type descriptor, a value representing the new data type.\nThe new type is disjoint from all others.\n\n" "\nIf present, parent-rtd must be a record-type descriptor.\n\n" "\ntype-name must be a string or gensym.\nIf type-name is a string, a new record type is generated.\nIf type-name is a gensym, a new record type is generated only\nif one with the same gensym has not already been defined.\nIf one has already been defined, the parent and fields must be identical\nto those of the existing record type, and the\nexisting record type is used.\nIf the parent and fields are not identical, an exception is raised with\ncondition-type &assertion.\n\n" "\nfields must be a list of field descriptors, each of which\ndescribes one field of instances of the new record type.\nA field descriptor is either a symbol or a list in the following form:\n\n" "\n\n" "(class type field-name)\n" "where class and type are optional.\nfield-name must be a symbol.\nclass, if present, must be the symbol immutable or\nthe symbol mutable.\nIf the immutable class-specifier is present, the field is\nimmutable; otherwise, the field is mutable.\ntype, if present, specifies how the field is represented.\nThe types are the same as those given in the description\nof define-record on page 175.\n\n" "\nIf a type is specified, the field can contain objects only of the\nspecified type.\nIf no type is specified, the field is of type ptr,\nmeaning that it can contain any Scheme object.\n\n" "\nThe behavior of a program that modifies the string type-name\nor the list fields or any of its sublists is unspecified.\n\n" "\nThe record-type descriptor may be passed as an argument to any of the\nRevised6 Report procedures\n\n" "\n\nrecord-constructor,\nrecord-predicate,\nrecord-accessor, and\nrecord-mutator,\n\n" "\n\n" "\nor to the Chez Scheme variants\n\n" "\n\nrecord-constructor,\nrecord-field-accessor, and\nrecord-field-mutator\n\n" "\n\n" "\nto obtain procedures for creating and manipulating records of the\nnew type.\n\n" "\n\n" "(define marble\n\n  (make-record-type \"marble\"\n\n    '(color quality)\n\n    (lambda (r p wr)\n\n      (display \"#<\" p)\n\n      (wr (marble-quality r) p)\n\n      (display \" quality \" p)\n\n      (wr (marble-color r) p)\n\n      (display \" marble>\" p))))\n\n(define make-marble\n\n  (record-constructor marble))\n\n(define marble?\n\n  (record-predicate marble))\n\n(define marble-color\n\n  (record-field-accessor marble 'color))\n\n(define marble-quality\n\n  (record-field-accessor marble 'quality))\n\n(define set-marble-quality!\n\n  (record-field-mutator marble 'quality))\n\n(define x (make-marble 'blue 'high))\n\n(marble? x) --> #t\n\n(marble-quality x) --> high\n\n(set-marble-quality! x 'low)\n\n(marble-quality x) --> low\n\nx --> #<low quality blue marble>\n" "The order in which the fields appear in fields is important.\nWhile field names are generally distinct, it is permissible for one field\nname to be the same as another in the list of fields or the same as\nan inherited name.\nIn this case, field ordinals\nmust be used to select fields in calls to record-field-accessor\nand record-field-mutator.\nOrdinals range from zero through one less than the number of fields.\nParent fields come first, if any, followed by the fields in\nfields, in the order given.\n\n" "\n\n" "(define r1 (make-record-type \"r1\" '(t t)))\n\n(define r2 (make-record-type r1 \"r2\" '(t)))\n\n(define r3 (make-record-type r2 \"r3\" '(t t t)))\n\n\n(define x ((record-constructor r3) 'a 'b 'c 'd 'e 'f))\n\n((record-field-accessor r3 0) x) --> a\n\n((record-field-accessor r3 2) x) --> c\n\n((record-field-accessor r3 4) x) --> e\n\n((record-field-accessor r3 't) x) --> unspecified\n") ("objects:s190" "\n\nprocedure: (record-constructor rcd)\n\n\nprocedure: (record-constructor rtd)\n\nreturns: a constructor for records of the type represented by rtd\n\nlibraries: (chezscheme)\n\n" "Like the Revised6 Report version of this procedure, this procedure\nmay be passed a record-constructor descriptor, rcd, which determines\nthe behavior of the constructor.\nIt may also be passed a record-type descriptor, rtd, in which\ncase the constructor accepts as many arguments as there are fields in the\nrecord; these arguments are the initial values of the fields in the\norder given when the record-type descriptor was created.\n\n\n") ("objects:s191" "\n\n\nprocedure: (record-field-accessor rtd field-id)\n\nreturns: an accessor for the identified field\n\nlibraries: (chezscheme csv7)\n\n" "rtd must be a record-type descriptor, field-id must be\na symbol or field ordinal, i.e., a nonnegative exact integer less than\nthe number of fields of the given record type.\nThe specified field must be accessible.\n\n" "\nThe generated accessor expects one argument, which must be a record of\nthe type represented by rtd.\nIt returns the contents of the specified field of the record.\n\n\n") ("objects:s192" "\n\n\nprocedure: (record-field-accessible? rtd field-id)\n\nreturns: #t if the specified field is accessible, otherwise #f\n\nlibraries: (chezscheme csv7)\n\n" "rtd must be a record-type descriptor, field-id must be\na symbol or field ordinal, i.e., a nonnegative exact integer less than\nthe number of fields of the given record type.\n\n" "\nThe compiler is free to eliminate a record field if it can prove that\nthe field is not accessed.\nIn making this determination, the compiler is free to ignore the\npossibility that an accessor might be created from a record-type\ndescriptor obtained by calling record-type-descriptor on an\ninstance of the record type.\n\n\n") ("objects:s193" "\n\n\nprocedure: (record-field-mutator rtd field-id)\n\nreturns: a mutator for the identified field\n\nlibraries: (chezscheme csv7)\n\n" "rtd must be a record-type descriptor, field-id must be\na symbol or field ordinal, i.e., a nonnegative exact integer less than\nthe number of fields of the given record type.\nThe specified field must be mutable.\n\n" "\nThe mutator expects two arguments, r and obj.\nr must be a record of the type represented by rtd.\nobj must be a value that is compatible with the type declared for\nthe specified field when the record-type descriptor was created.\nobj is stored in the specified field of the record.\n\n\n") ("objects:s194" "\n\n\nprocedure: (record-field-mutable? rtd field-id)\n\nreturns: #t if the specified field is mutable, otherwise #f\n\nlibraries: (chezscheme csv7)\n\n" "rtd must be a record-type descriptor, field-id must be\na symbol or field ordinal, i.e., a nonnegative exact integer less than\nthe number of fields of the given record type.\n\n" "\nAny field declared immutable is immutable.\nIn addition,\nthe compiler is free to treat a field as immutable if it can prove that\nthe field is never assigned.\nIn making this determination, the compiler is free to ignore the\npossibility that a mutator might be created from a record-type\ndescriptor obtained by calling record-type-descriptor on an\ninstance of the record type.\n\n\n") ("objects:s195" "\n\n\nprocedure: (record-type-name rtd)\n\nreturns: the name of the record-type represented by rtd\n\nlibraries: (chezscheme csv7)\n\n" "rtd must be a record-type descriptor.\n\n" "\nThe name is a always a string.\nIf a gensym is provided as the record-type name in a\ndefine-record form or make-record-type call, the result\nis the \"pretty\" name of the gensym (see 7.9).\n\n" "\n\n" "(record-type-name (make-record-type \"empty\" '())) --> \"empty\"\n\n\n(define-record #{point bdhavk1bwafxyss1-b} (x y))\n\n(define p (type-descriptor #{point bdhavk1bwafxyss1-b}))\n\n(record-type-name p) --> \"point\"\n") ("objects:s196" "\n\nprocedure: (record-type-symbol rtd)\n\nreturns: the generated symbol associated with rtd\n\nlibraries: (chezscheme csv7)\n\n" "rtd must be a record-type descriptor.\n\n" "\n\n" "(define e (make-record-type \"empty\" '()))\n\n(record-type-symbol e) --> #{empty bdhavk1bwafxyss1-e}\n\n\n(define-record #{point bdhavk1bwafxyss1-b} (x y))\n\n(define p (type-descriptor #{point bdhavk1bwafxyss1-b}))\n\n(record-type-symbol p) --> #{point bdhavk1bwafxyss1-b}\n") ("objects:s197" "\n\nprocedure: (record-type-field-names rtd)\n\nreturns: a list of field names of the type represented by rtd\n\nlibraries: (chezscheme csv7)\n\n" "rtd must be a record-type descriptor.\nThe field names are symbols.\n\n" "\n\n" "(define-record triple ((immutable x1) (mutable x2) (immutable x3)))\n\n(record-type-field-names (type-descriptor triple)) --> (x1 x2 x3)\n") ("objects:s198" "\n\nprocedure: (record-type-field-decls rtd)\n\nreturns: a list of field declarations of the type represented by rtd\n\nlibraries: (chezscheme csv7)\n\n" "rtd must be a record-type descriptor.\nEach field declaration has the following form:\n\n" "\n\n" "(class type field-name)\n" "where class, type, and field-name are as described\nunder make-record-type.\n\n" "\n\n" "(define-record shape (x y))\n\n(define-record circle shape (radius))\n\n\n(record-type-field-decls\n\n  (type-descriptor circle)) --> ((mutable ptr x)\n\n                            gifs/ghostRightarrow.gif  (mutable ptr y)\n\n                            gifs/ghostRightarrow.gif  (mutable ptr radius))\n") ("objects:s199" "\n\nprocedure: (record? obj)\n\nreturns: #t if obj is a record, otherwise #f\n\n\nprocedure: (record? obj rtd)\n\nreturns: #t if obj is a record of the given type, otherwise #f\n\nlibraries: (chezscheme)\n\n" "If present, rtd must be a record-type descriptor.\n\n" "\nA record is \"of the given type\" if it is an instance of the record\ntype or one of its ancestors.\nThe predicate generated by record-predicate for a\nrecord-type descriptor rtd is equivalent to the following.\n\n" "\n\n" "(lambda (x) (record? x rtd))\n") ("objects:s200" "\n\nprocedure: (record-type-descriptor rec)\n\nreturns: the record-type descriptor of rec\n\nlibraries: (chezscheme csv7)\n\n" "rec must be a record.\nThis procedure is intended for use in the definition of portable printers\nand debuggers.\nFor records created with make-record-type,\nit may not be the same as the descriptor returned by\nmake-record-type.\nSee the comments about field accessibility and mutability under\nrecord-field-accessible? and\nrecord-field-mutable? above.\n\n" "\nThis procedure is equivalent to the Revised6 Report record-rtd\nprocedure.\n\n" "\n\n" "(define rtd (make-record-type \"frob\" '(blit blat)))\n\nrtd --> #<record type frob>\n\n(define x ((record-constructor rtd) 1 2))\n\n(record-type-descriptor x) --> #<record type frob>\n\n(eq? (record-type-descriptor x) rtd) --> unspecified\n") ("objects:s201" "\n\n\nprocedure: (procedure-arity-mask proc)\n\nreturns: an exact integer bitmask identifying the accepted argument counts of proc\n\nlibraries: (chezscheme)\n\n" "The bitmask is represented as two's complement number with the bit\nat each index n set if and only if proc accepts n\narguments.\n\n" "\nThe two's complement encoding implies that if proc accepts\nn or more arguments, the encoding is a negative number,\nsince all the bits from n and up are set. For example, if\nproc accepts any number of arguments, the two's complement\nencoding of all bits set is -1.\n\n" "\n\n" "(procedure-arity-mask (lambda () 'none)) --> 1\n\n(procedure-arity-mask car) --> 2\n\n(procedure-arity-mask (case-lambda [() 'none] [(x) x])) --> 3\n\n(procedure-arity-mask (lambda x x)) --> -1\n\n(procedure-arity-mask (case-lambda [() 'none] [(x y . z) x])) --> -3\n\n(procedure-arity-mask (case-lambda)) --> 0\n\n(logbit? 1 (procedure-arity-mask pair?)) --> #t\n\n(logbit? 2 (procedure-arity-mask pair?)) --> #f\n\n(logbit? 2 (procedure-arity-mask cons)) --> #t\n") ("io:s9" "\n\n\nprocedure: (utf-16-codec)\n\n\nprocedure: (utf-16-codec endianness)\n\n\nprocedure: (utf-16le-codec)\n\n\nprocedure: (utf-16be-codec)\n\nreturns: a codec\n\nlibraries: (chezscheme)\n\n" "endianness must be the symbol big or the symbol\nlittle.\n\n" "\nThe codec returned by utf-16-codec can be used to create and\nprocess data written UTF-16 format.\nWhen called without the endianness argument or with endianness\nbig, utf-16-codec returns a codec for standard UTF-16\ndata, i.e., one that defaults to big-endian format if no byte-order mark\n(BOM) is found.\n\n" "\nWhen output is transcoded with a transcoder based on this codec, a BOM is\nemitted just before the first character written, and each character is\nwritten as a UTF-16 character in big-endian format.\nFor input, a BOM is looked for at the start of the\ninput and, if present, controls the byte order of the remaining\nUTF-16 characters.\nIf no BOM is present, big-endian order is assumed.\nFor input-output ports, the BOM is not emitted if the file is\nread before written, and a BOM is not looked for if the file is written\nbefore read.\n\n" "\nFor textual ports created via transcoded-port, a BOM written or\nread via the transcoder appears at the beginning of the underlying data\nstream or file only if the binary port passed to transcoded-port\nis positioned at the start of the data stream or file.\nWhen the transcoder can determine this is the case, it sets a flag that\ncauses set-port-position! to position the port beyond the BOM if\nan attempt is made to reposition the port to the start of the data stream\nor file, so that the BOM is preserved.\n\n" "\nWhen called with endianness little, utf-16-codec\nreturns a codec that defaults to the little-endian format both for reading\nand for writing.\nFor output-only streams or input/output streams that are written before read,\nthe result is standard UTF-16, with a BOM that specifies little-endian\nformat followed by characters in little-endian byte order.\nFor input-only streams or input/output streams that are read before written,\nthis codec allows programs to read from input streams that either\nbegin with a BOM or are encoded in UTF-16LE format.\nThis is particularly useful for handling files that might have been\nproduced by older Windows applications that claim to produce UTF-16 files\nbut actually produce UTF-16LE files.\n\n" "\nThe Revised6 Report version of utf-16-codec lacks the\noptional endianness argument.\n\n" "\nThe codecs returned by utf-16le-codec and utf-16be-codec\nare used to read and write data in the UTF-16LE and UTF-16BE formats,\ni.e., UTF-16 with little-endian or big-endian byte order and no BOM.\nFor output, these codecs are useful for controlling whether and where\nthe BOM is emitted, since no BOM is emitted implicitly and a BOM\ncan be emitted explicitly as an ordinary character.\nFor input, these codecs are useful for processing files known to be\nin little-endian or big-endian format with no BOM.\n\n\n") ("io:s10" "\n\n\nprocedure: (iconv-codec code-page)\n\nreturns: a codec\n\nlibraries: (chezscheme)\n\n" "code-page must be a string and should identify a codec accepted by\nthe iconv library installed on the target machine.\nThe codec returned by this procedure can be used to convert from the\nnon-Unicode single- and multiple-byte character sets supported by\niconv.\nWhen used in the input direction, the codec converts byte sequences\ninto Scheme strings, and when used in the output direction, it converts\nScheme strings to byte sequences.\n\n" "\nThe set of supported code pages depends on the version of\niconv available; consult the iconv documentation\nor use the shell command iconv --list to obtain a list\nof supported code pages.\n\n" "\nWhile the Windows operating system does not supply an iconv\nlibrary, it is possible to use iconv-codec on Windows systems by\nsupplying an iconv dynamic-link library (named iconv.dll,\nlibiconv.dll, or libiconv-2.dll) that provides\nPosix-conformant iconv_open, iconv, and\niconv_close entry points either under those names or under the\nalternative names libiconv_open, libiconv, and\nlibiconv_close.\nThe dll must be located in a standard location for dlls or in the\ncurrent directory of the process the first time iconv-codec\nis called.\n\n") ("io:s11" "\n\n\nthread parameter: current-transcoder\n\nlibraries: (chezscheme)\n\n" "The transcoder value of the current-transcoder parameter is used\nwhenever a textual file is opened with an implicit transcoder, e.g., by\nopen-input-file and other convenience I/O procedures,\ncompile-file include, load, and\npretty-file.\nIts initial value is the value of the native-transcoder procedure.\n\n\n") ("io:s12" "\n\n\nprocedure: (transcoder? obj)\n\nreturns: #t if obj is a transcoder, #f otherwise\n\nlibraries: (chezscheme)\n\n") ("io:s13" "\n\n\nprocedure: (make-input-port handler input-buffer)\n\n\nprocedure: (make-output-port handler output-buffer)\n\n\nprocedure: (make-input/output-port handler input-buffer output-buffer)\n\nreturns: a new textual port\n\nlibraries: (chezscheme)\n\n" "handler must be a procedure, and\ninput-buffer and output-buffer must be strings.\nEach procedure creates a generic port.\nThe handler associated with the port is handler, the\ninput buffer is input-buffer, and the\noutput buffer is output-buffer.\nFor make-input-port, the output buffer is undefined, and for\nmake-output-port, the input buffer is undefined.\n\n" "\nThe input size of an input or input/output port is initialized to the\nstring length of the input buffer, and the input index is set to 0.\nThe output size and index of an output or input/output port are\ninitialized similarly.\n\n" "\nThe length of an input or output buffer may be zero, in which case\nbuffering is effectively disabled.\n\n") ("io:s15" "\n\n\nprocedure: (port-handler port)\n\nreturns: a procedure\n\nlibraries: (chezscheme)\n\n" "For generic ports, port-handler returns the handler passed to one\nof the generic port creation procedures described above.\nFor ports created by open-input-file and similar procedures,\nport-handler returns an internal handler that may be invoked in\nthe same manner as any other handler.\n\n") ("io:s16" "\n\n\nprocedure: (port-input-buffer input-port)\n\n\nprocedure: (port-input-size input-port)\n\n\nprocedure: (port-input-index input-port)\n\n\nprocedure: (textual-port-input-buffer textual-input-port)\n\n\nprocedure: (textual-port-input-size textual-input-port)\n\n\nprocedure: (textual-port-input-index textual-input-port)\n\n\nprocedure: (binary-port-input-buffer binary-input-port)\n\n\nprocedure: (binary-port-input-size binary-input-port)\n\n\nprocedure: (binary-port-input-index binary-input-port)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "These procedures return the input buffer, size, or index\nof the input port.\nThe variants specialized to textual or binary ports are slightly\nmore efficient than their generic counterparts.\n\n\n") ("io:s17" "\n\n\nprocedure: (set-port-input-index! input-port n)\n\n\nprocedure: (set-port-input-size! input-port n)\n\n\nprocedure: (set-port-input-buffer! input-port x)\n\n\nprocedure: (set-textual-port-input-index! textual-input-port n)\n\n\nprocedure: (set-textual-port-input-size! textual-input-port n)\n\n\nprocedure: (set-textual-port-input-buffer! textual-input-port string)\n\n\nprocedure: (set-binary-port-input-index! binary-input-port n)\n\n\nprocedure: (set-binary-port-input-size! binary-input-port n)\n\n\nprocedure: (set-binary-port-input-buffer! binary-input-port bytevector)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "The procedure set-port-input-index! sets the input index field of\ninput-port to n, which must be a nonnegative integer less than\nor equal to the port's input size.\n\n" "\nThe procedure set-port-input-size! sets the input size field of\ninput-port to n, which must be a nonnegative integer less than\nor equal to the string length of the port's input buffer.\nIt also sets the input index to 0.\n\n" "\nThe procedure set-port-input-buffer! sets the input buffer field of\ninput-port to x, which must be a string for textual ports and a\nbytevector for binary ports.\nIt also sets the input size to the length of the string or bytevector\nand the input index to 0.\n\n" "\nThe variants specialized to textual or binary ports are slightly\nmore efficient than their generic counterparts.\n\n") ("io:s18" "\n\n\nprocedure: (port-input-count input-port)\n\n\nprocedure: (textual-port-input-count textual-input-port)\n\n\nprocedure: (binary-port-input-count binary-input-port)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "These procedures return an exact integer representing the number of\ncharacters or bytes left to be read from the port's input buffer, i.e.,\nthe difference between the buffer size and index.\n\n" "\nThe variants specialized to textual or binary ports are slightly\nmore efficient than their generic counterpart.\n\n") ("io:s19" "\n\n\nprocedure: (port-input-empty? input-port)\n\nreturns: #t if the port's input buffer contains no more data, otherwise #f\n\nlibraries: (chezscheme)\n\n" "This procedure determines whether the port's input count is zero without\ncomputing or returning the actual count.\n\n") ("io:s20" "\n\n\nprocedure: (port-output-buffer output-port)\n\n\nprocedure: (port-output-size output-port)\n\n\nprocedure: (port-output-index output-port)\n\n\nprocedure: (textual-port-output-buffer output-port)\n\n\nprocedure: (textual-port-output-size output-port)\n\n\nprocedure: (textual-port-output-index output-port)\n\n\nprocedure: (binary-port-output-buffer output-port)\n\n\nprocedure: (binary-port-output-size output-port)\n\n\nprocedure: (binary-port-output-index output-port)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "These procedures return the output buffer, size, or index\nof the output port.\nThe variants specialized to textual or binary ports are slightly\nmore efficient than their generic counterparts.\n\n\n") ("io:s21" "\n\n\nprocedure: (set-port-output-index! output-port n)\n\n\nprocedure: (set-port-output-size! output-port n)\n\n\nprocedure: (set-port-output-buffer! output-port x)\n\n\nprocedure: (set-textual-port-output-index! textual-output-port n)\n\n\nprocedure: (set-textual-port-output-size! textual-output-port n)\n\n\nprocedure: (set-textual-port-output-buffer! textual-output-port string)\n\n\nprocedure: (set-binary-port-output-index! output-port n)\n\n\nprocedure: (set-binary-port-output-size! output-port n)\n\n\nprocedure: (set-binary-port-output-buffer! binary-output-port bytevector)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "The procedure set-port-output-index! sets the output index field of\nthe output port to n, which must be a nonnegative integer less than\nor equal to the port's output size.\n\n" "\nThe procedure set-port-output-size! sets the output size field of\nthe output port to n, which must be a nonnegative integer less than\nor equal to the string length of the port's output buffer.\nIt also sets the output index to 0.\n\n" "\nThe procedure set-port-output-buffer! sets the output buffer field of\noutput-port to x, which must be a string for textual ports and a\nbytevector for binary ports.\nIt also sets the output size to the length of the string or bytevector\nand the output index to 0.\n\n" "\nThe variants specialized to textual or binary ports are slightly\nmore efficient than their generic counterparts.\n\n") ("io:s22" "\n\n\nprocedure: (port-output-count output-port)\n\n\nprocedure: (textual-port-output-count textual-output-port)\n\n\nprocedure: (binary-port-output-count binary-output-port)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "These procedures return an exact integer representing the amount of\nspace in characters or bytes available to be written in the\nport's output buffer, i.e., the difference between the buffer size\nand index.\n\n" "\nThe variants specialized to textual or binary ports are slightly\nmore efficient than their generic counterpart.\n\n") ("io:s23" "\n\n\nprocedure: (port-output-full? output-port)\n\nreturns: #t if the port's input buffer has no more room, otherwise #f\n\nlibraries: (chezscheme)\n\n" "This procedure determines whether the port's output count is zero without\ncomputing or returning the actual count.\n\n") ("io:s24" "\n\n\nprocedure: (mark-port-closed! port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure directly marks the port closed so that no further\ninput or output operations are allowed on it.\nIt is typically used by handlers upon receipt of a close-port\nmessage.\n\n") ("io:s25" "\n\n\nprocedure: (port-closed? port)\n\nreturns: #t if port is closed, #f otherwise\n\nlibraries: (chezscheme)\n\n" "\n" "(let ([p (open-output-string)])\n\n  (port-closed? p)) --> #f\n\n\n(let ([p (open-output-string)])\n\n  (close-port p)\n\n  (port-closed? p)) --> #t\n") ("io:s26" "desc:set-port-bol\n\n\nprocedure: (set-port-bol! output-port obj)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "When obj is #f, the port's beginning-of-line (BOL)\nflag is cleared; otherwise, the port's BOL flag is set.\n\n" "\nThe BOL flag is consulted by fresh-line\n(page 243) to determine if it needs to emit a\nnewline.\nThis flag is maintained automatically for file output ports, string output\nports, and transcript ports.\nThe flag is set for newly created file and string output ports, except\nfor file output ports created with the append option, for which\nthe flag is reset.\nThe BOL flag is clear for newly created generic ports and never set\nautomatically, but may be set explicitly using set-port-bol!.\nThe port is always flushed immediately before the flag is consulted, so it\nneed not be maintained on a per-character basis for buffered ports.\n\n") ("io:s27" "\n\n\nprocedure: (port-bol? port)\n\nreturns: #t if port's BOL flag is set, #f otherwise\n\nlibraries: (chezscheme)\n\n") ("io:s28" "\n\nprocedure: (set-port-eof! input-port obj)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "When obj is not #f, set-port-eof! marks input-port\nso that, once its buffer is empty, the port is treated as if it were at\neof even if more data is available in the underlying byte or character\nstream.\nOnce this artificial eof has been read, the eof mark is cleared, making\nany additional data in the stream available beyond the eof.\nThis feature can be used by a generic port to simulate a stream consisting\nof multiple input files.\n\n" "\nWhen obj is #f, the eof mark is cleared.\n\n" "\nThe following example assumes /dev/zero provides an infinite stream of\nzero bytes.\n\n" "\n\n" "(define p\n\n  (parameterize ([file-buffer-size 3])\n\n    (open-file-input-port \"/dev/zero\")))\n\n(set-port-eof! p #t)\n\n(get-u8 p) --> #!eof\n\n(get-u8 p) --> 0\n\n(set-port-eof! p #t)\n\n(get-u8 p) --> 0\n\n(get-u8 p) --> 0\n\n(get-u8 p) --> #!eof\n\n(get-u8 p) --> 0\n") ("io:s29" "\n\nprocedure: (port-name port)\n\nreturns: the name associated with port\n\nlibraries: (chezscheme)\n\n" "The name may be any object but is usually a string or #f\n(denoting no name).\nFor file ports, the name is typically a string naming the file.\n\n" "\n\n" "(let ([p (open-input-file \"myfile.ss\")])\n\n  (port-name p)) --> \"myfile.ss\"\n\n\n(let ([p (open-output-string)])\n\n  (port-name p)) --> \"string\"\n") ("io:s30" "\n\nprocedure: (set-port-name! port obj)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedure sets port's name to obj, which should be\na string or #f (denoting no name).\n\n\n") ("io:s31" "\n\n\nprocedure: (port-length port)\n\n\nprocedure: (file-length port)\n\nreturns: the length of the file or other object to which port refers\n\n\nprocedure: (port-has-port-length? port)\n\nreturns: #t if the port supports port-length, #f otherwise\n\nlibraries: (chezscheme)\n\n" "A port may allow the length of the underlying stream of characters or bytes\nto be determined.\nIf so, the procedure port-has-port-length? returns\n#t and port-length returns the current length.\nFor binary ports, the length is always an exact nonnegative integer byte\ncount.\nFor textual ports, the representation of a length is unspecified; it\nmay not be an exact nonnegative integer and, even if it is, it may not\nrepresent either a byte or character count.\nThe length may be used at some later time to reset the length if the\nport supports set-port-length!.\nIf port-length is called on a port that does not support it,\nan exception with condition type &assertion is raised.\n\n" "\nFile lengths beyond 232 might not be reported property\nfor compressed files on 32-bit versions of the system.\n\n" "\nfile-length is identical to port-length.\n\n") ("io:s32" "\n\n\nprocedure: (set-port-length! port len)\n\nreturns: unspecified\n\n\nprocedure: (port-has-set-port-length!? port)\n\nreturns: #t if the port supports set-port-length!, #f otherwise\n\nlibraries: (chezscheme)\n\n" "A port may allow the length of the underlying stream of characters or bytes\nto be set, i.e., extended or truncated.\nIf so, the procedure port-has-set-port-length!? returns\n#t and set-port-length! changes the length.\nFor binary ports, the length len must be an exact nonnegative integer byte\ncount.\nFor textual ports, the representation of a length is unspecified, as\ndescribed in the entry for port-length above, but len must be\nan appropriate length for the textual port, which is usually guaranteed\nto be the case only if it was obtained from a call to port-length\non the same port.\nIf set-port-length! is called on a port that does not support it,\nan exception with condition type &assertion is raised.\n\n" "\nIt is not possible to set the length of a port opened with compression\nto an arbitrary position, and the result of an attempt to set the length\nof a compressed file beyond 232 on 32-bit versions of the system is\nundefined.\n\n\n") ("io:s33" "\n\n\nprocedure: (port-nonblocking? port)\n\nreturns: #t if the port is in nonblocking mode, #f otherwise\n\n\nprocedure: (port-has-port-nonblocking?? port)\n\nreturns: #t if the port supports port-nonblocking?, #f otherwise\n\nlibraries: (chezscheme)\n\n" "A port may allow the nonblocking status of the port to be determined.\nIf so, the procedure port-has-port-nonblocking?? returns\n#t and port-nonblocking? returns a boolean value\nreflecting whether the port is in nonblocking mode.\n\n\n") ("io:s34" "\n\n\nprocedure: (set-port-nonblocking! port obj)\n\nreturns: unspecified\n\n\nprocedure: (port-has-set-port-nonblocking!? port)\n\nreturns: #t if the port supports set-port-nonblocking!, #f otherwise\n\nlibraries: (chezscheme)\n\n" "A port may allow reads or writes to be performed in a \"nonblocking\" fashion.\nIf so, the procedure port-has-set-port-nonblocking!? returns\n#t and set-port-nonblocking! sets the port to nonblocking\nmode (if obj is a true value) or blocking mode (if obj is #f).\nIf set-port-nonblocking! is called on a port that does not support it,\nan exception with condition type &assertion is raised.\n\n" "\nPorts created by the standard Revised6 port opening procedures are\ninitially set in blocking mode by default.\nThe same is true for most of the procedures described in this document.\nA generic port based on a nonblocking source may be nonblocking\ninitially.\nA port returned by open-fd-input-port,\nopen-fd-output-port, or open-fd-input/output-port\nis initially in nonblocking mode if the file-descriptor passed in is in\nnonblocking mode.\nSimilarly, a port returned by standard-input-port,\nstandard-output-port, or standard-error-port is\ninitially in nonblocking mode if the underlying stdin, stdout,\nor stderr file descriptor is in nonblocking mode.\n\n" "\nAlthough get-bytevector-some and get-string-some normally\ncannot return an empty bytevector or empty string, they can if the port\nis in nonblocking mode and no input is available.\nAlso, get-bytevector-some! and get-string-some!\nmay not read any data if the port is in nonblocking mode and\nno data is available.\nSimilarly, put-bytevector-some and put-string-some\nmay not write any data if the port is in nonblocking mode and\nno room is available.\n\n" "\nNonblocking mode is not supported under Windows.\n\n") ("io:s35" "\n\n\nprocedure: (file-position port)\n\n\nprocedure: (file-position port pos)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "When the second argument is omitted, this procedure behaves like the R6RS\nport-position procedure, and when present, like the R6RS\nset-port-position! procedure.\n\n" "\nFor compressed files opened with the compressed flag,\nfile-position returns the position in the\nuncompressed stream of data.\nChanging the position of a compressed input file opened with the\ncompressed flag generally requires rewinding and rereading the\nfile and might thus be slow.\nThe position of a compressed output file opened with the\ncompressed flag can be moved forward only; this is\naccomplished by writing a (compressed) sequence of zeros.\nFile positions beyond 232 might not be reported property\nfor compressed files on 32-bit versions of the system.\n\n\n") ("io:s36" "\n\n\nprocedure: (clear-input-port)\n\n\nprocedure: (clear-input-port input-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "If input-port is not supplied, it defaults to the current input port.\nThis procedure discards any data in the buffer associated\nwith input-port.\nThis may be necessary, for example, to clear any type-ahead from the keyboard\nin preparation for an urgent query.\n\n") ("io:s37" "\n\n\nprocedure: (clear-output-port)\n\n\nprocedure: (clear-output-port output-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "If output-port is not supplied, it defaults to the current output port.\nThis procedure discards any data in the buffer associated\nwith output-port.\nThis may be necessary, for example, to clear any pending output on an\ninteractive port in preparation for an urgent message.\n\n\n") ("io:s38" "\n\n\nprocedure: (flush-output-port)\n\n\nprocedure: (flush-output-port output-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "If output-port is not supplied, it defaults to the current output port.\nThis procedure  forces any data in the buffer associated\nwith output-port to be printed immediately.\nThe console output port is automatically flushed after a newline and before\ninput from the console input port; all ports are automatically flushed when\nthey are closed.\nflush-output-port may be necessary, however, to force a message\nwithout a newline to be sent to the console output port or to force output\nto appear on a file without delay.\n\n") ("io:s39" "\n\n\nprocedure: (port-file-compressed! port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "port must be an input or an output port, but not an input/output port.\nIt must be a file port pointing to a regular file, i.e., a file on disk rather\nthan, e.g., a socket.\nThe port can be a binary or textual port.\nIf the port is an output port, subsequent output sent to the port\nwill be compressed.\nIf the port is an input port, subsequent input will be decompressed\nif and only if the port is currently pointing at compressed data.\nThe compression format for output\nis determined by the compress-format\nparameter, while the compression format on input is inferred.\nThe compression level, which is relevant only for output, is determined\nby the compress-level parameter.\nThis procedure has no effect if the port is already set for compression.\n\n") ("io:s42" "\n\n\nthread parameter: compress-format\n\nlibraries: (chezscheme)\n\n" "compress-format determines the\ncompression algorithm and format used for output. Currently,\nthe possible values of the parameter are the symbols lz4 (the default)\nand gzip.\n\n" "\nThe lz4 format uses the LZ4 compression library developed by\nYann Collet.\nIt is therefore compatible with the lz4 program, which\nmeans that lz4 may be used to uncompress files produced\nby Chez Scheme and visa versa.\n\n" "\nThe gzip format uses the zlib compression library developed by\nJean-loup Gailly and Mark Adler.\nIt is therefore compatible with the gzip program, which\nmeans that gzip may be used to uncompress files produced\nby Chez Scheme and visa versa.\n\n" "\nReading lz4-compressed data tends to be much faster than reading\ngzip-compressed data, while gzip-compressed data tends to \nbe significantly smaller.\n\n") ("io:s43" "\n\n\nthread parameter: compress-level\n\nlibraries: (chezscheme)\n\n" "compress-level determines the amount of effort spent on\ncompression and is thus relevant only for output.\nIt can be set to one of the symbols minimum, low,\nmedium, high, or maximum, which are\nlisted in order from shortest to longest expected compression time\nand least to greatest expected effectiveness.\nIts default value is medium.\n\n") ("io:s44" "\n\n\nprocedure: (open-input-string string)\n\nreturns: a new string input port\n\nlibraries: (chezscheme)\n\n" "A string input port is similar to a file input port, except that\ncharacters and objects drawn from the port come from string\nrather than from a file.\n\n" "\nA string port is at \"end of file\" when the port reaches the end of the\nstring.\nIt is not necessary to close a string port, although it is okay to do so.\n\n" "\n\n" "(let ([p (open-input-string \"hi mom!\")])\n\n  (let ([x (read p)])\n\n    (list x (read p)))) --> (hi mom!)\n") ("io:s46" "\n\nprocedure: (with-input-from-string string thunk)\n\nreturns: the values returned by thunk\n\nlibraries: (chezscheme)\n\n" "thunk must be a procedure and should accept zero arguments.\nwith-input-from-string parameterizes the current input port to be the\nresult of opening string for input during the\napplication of thunk.\n\n" "\n\n" "(with-input-from-string \"(cons 3 4)\"\n\n  (lambda ()\n\n    (eval (read)))) --> (3 . 4)\n") ("io:s47" "\n\nprocedure: (open-output-string)\n\nreturns: a new string output port\n\nlibraries: (chezscheme)\n\n" "A string output port is similar to a file output port, except that\ncharacters and objects written to the port are placed in a string\n(which grows as needed) rather than to a file.\nThe string built by writing to a string output port may be obtained\nwith get-output-string.\nSee the example given for get-output-string below.\nIt is not necessary to close a string port, although it is okay to do so.\n\n\n") ("io:s49" "\n\n\nprocedure: (get-output-string string-output-port)\n\nreturns: the string associated with string-output-port\n\nlibraries: (chezscheme)\n\n" "string-output-port must be an port returned by open-output-string.\n\n" "\nAs a side effect, get-output-string resets string-output-port\nso that subsequent output to string-output-port is placed\ninto a fresh string.\n\n" "\n\n" "(let ([p (open-output-string)])\n\n  (write 'hi p)\n\n  (write-char #\\space p)\n\n  (write 'mom! p)\n\n  (get-output-string p)) --> \"hi mom!\"\n" "An implementation of format (Section 9.13) might be\nwritten using string-output ports to produce string output.\n\n\n") ("io:s50" "\n\n\nprocedure: (with-output-to-string thunk)\n\nreturns: a string containing the output\n\nlibraries: (chezscheme)\n\n" "thunk must be a procedure and should accept zero arguments.\nwith-output-to-string parameterizes the current output port to\na new string output port during the\napplication of thunk.\nIf thunk returns, the string associated with the new string output\nport is returned, as with get-output-string.\n\n" "\n\n" "(with-output-to-string\n\n  (lambda ()\n\n    (display \"Once upon a time ...\")\n\n    (newline))) --> \"Once upon a time ...\\n\"\n") ("io:s51" "\n\n\nthread parameter: file-buffer-size\n\nlibraries: (chezscheme)\n\n" "file-buffer-size is a parameter that determines the size of each\nbuffer created when the buffer mode is not none for a port\ncreated by one of the file open operations, e.g., open-input-file\nor open-file-output-port.\nWhen called with no arguments, the parameter returns the\ncurrent buffer size.\nWhen called with a positive fixnum k,\nit sets the current buffer size to k.\n\n") ("io:s52" "\n\n\nprocedure: (file-port? port)\n\nreturns: #t if port is a file port, #f otherwise\n\nlibraries: (chezscheme)\n\n" "A file port is any port based directly\non an O/S file descriptor, e.g., one created by open-file-input-port,\nopen-output-port, open-fd-input-port, etc., but not\na string, bytevector, or custom  port.\n\n\n") ("io:s53" "\n\n\nprocedure: (port-file-descriptor port)\n\nreturns: the file descriptor associated with port\n\nlibraries: (chezscheme)\n\n" "port must be a file port, i.e., a port for which file-port?\nreturns #t.\n\n\n") ("io:s54" "\n\n\nthread parameter: custom-port-buffer-size\n\nlibraries: (chezscheme)\n\n" "custom-port-buffer-size is a parameter that determines the sizes\nof the buffers associated with newly created custom ports.\nWhen called with no arguments, the parameter returns the\ncurrent buffer size.\nWhen called with a positive fixnum k,\nit sets the current buffer size to k.\n\n") ("io:s55" "\n\n\nglobal parameter: console-input-port\n\nlibraries: (chezscheme)\n\n" "console-input-port is a parameter that determines the\ninput port used by the waiter and interactive debugger.\nWhen called with no arguments, it returns the\nconsole input port.\nWhen called with one argument, which must be a textual input port,\nit changes the value of the console\ninput port.\nThe initial value of this parameter is a port tied to the standard\ninput (stdin) stream of the Scheme process.\n\n") ("io:s56" "\n\n\nthread parameter: current-input-port\n\nlibraries: (chezscheme)\n\n" "current-input-port is a parameter that determines the\ndefault port argument for most input procedures, including\nread-char, peek-char, and read,\nWhen called with no arguments, current-input-port returns the\ncurrent input port.\nWhen called with one argument, which must be a textual input port,\nit changes the value of the current\ninput port.\nThe Revised6 Report version of current-input-port accepts\nonly zero arguments, i.e., it cannot be used to change the current input\nport.\nThe initial value of this parameter is the same port as the initial\nvalue of console-input-port.\n\n\n") ("io:s57" "\n\n\nprocedure: (open-input-file path)\n\n\nprocedure: (open-input-file path options)\n\nreturns: a new input port\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nopen-input-file opens a textual input port for the file named by\npath.\nAn exception is raised with condition type\n&i/o-filename if the file does not exist or cannot be\nopened for input.\n\n" "\noptions, if present, is a symbolic option name or option list.\nPossible symbolic option names are \ncompressed, uncompressed, buffered,\nand unbuffered.\nAn option list is a list containing zero or more symbolic option names.\n\n" "\nThe mutually exclusive compressed and\nuncompressed options determine whether the input file\nshould be decompressed if it is compressed (where the compression\nformat is inferred).\n(See open-output-file.)\nThe default is uncompressed, so the uncompressed\noption is useful only as documentation.\n\n" "\nThe mutually exclusive buffered and unbuffered\noptions determine whether input is buffered.\nWhen input is buffered, it is read in large blocks and buffered internally\nfor efficiency to reduce the number of operating system requests.\nWhen the unbuffered option is specified, input is unbuffered,\nbut not fully, since one character of buffering is required to support\npeek-char and unread-char.\nInput is buffered by default, so the buffered option is useful\nonly as documentation.\n\n\n" "\nFor example, the call\n\n" "\n\n" "(open-input-file \"frob\" '(compressed))\n" "opens the file frob with decompression enabled.\n\n" "\nThe Revised6 Report version of open-input-file does not\nsupport the optional options argument.\n\n") ("io:s58" "\n\n\nprocedure: (call-with-input-file path procedure)\n\n\nprocedure: (call-with-input-file path procedure options)\n\nreturns: the values returned by procedure\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nprocedure should accept one argument.\n\n" "\ncall-with-input-file creates a new input port for the file named\nby path, as if with open-input-file, and passes this port to procedure.\nIf procedure returns normally, call-with-input-file closes the input port\nand returns the values returned by procedure.\n\n" "\ncall-with-input-file does not automatically close the input\nport if a continuation created outside of procedure is invoked, since it\nis possible that another continuation created inside of procedure will be\ninvoked at a later time, returning control to procedure.\nIf procedure does not return, an implementation is free to close the\ninput port only if it can prove that the input port is no longer accessible.\nAs shown in Section http://scheme.com/tspl4/./control.html#g1025.6 of The Scheme Programming Language, 4th Edition, dynamic-wind may be used to\nensure that the port is closed if a continuation created outside of\nprocedure is invoked.\n\n" "\nSee open-input-file above for a description of the optional\noptions argument.\n\n" "\nThe Revised6 Report version of call-with-input-file does not\nsupport the optional input argument.\n\n") ("io:s59" "\n\n\nprocedure: (with-input-from-file path thunk)\n\n\nprocedure: (with-input-from-file path thunk options)\n\nreturns: the values returned by thunk\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nthunk must be a procedure and should accept zero arguments.\n\n" "\nwith-input-from-file temporarily changes the current input port to be the\nresult of opening the file named by path, as if with open-input-file, during the\napplication of thunk.\nIf thunk returns, the port is closed and the current input port\nis restored to its old value.\n\n" "\nThe behavior of with-input-from-file is unspecified\nif a continuation created outside\nof thunk is invoked before thunk returns.\nAn implementation may close the port and restore the current input\nport to its old value---but it may not.\n\n" "\nSee open-input-file above for a description of the optional\noptions argument.\n\n" "\nThe Revised6 Report version of with-input-from-file does not\nsupport the optional options argument.\n\n") ("io:s60" "\n\n\nprocedure: (open-fd-input-port fd)\n\n\nprocedure: (open-fd-input-port fd b-mode)\n\n\nprocedure: (open-fd-input-port fd b-mode ?transcoder)\n\nreturns: a new input port for the file descriptor fd\n\nlibraries: (chezscheme)\n\n" "fd must be a nonnegative exact integer and should be a valid\nopen file descriptor.\nIf ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual input port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary input port.\nSee the lead-in to Section http://scheme.com/tspl4/./io.html#g1237.2 of The Scheme Programming Language, 4th Edition\nfor a description of the constraints on and effects of the other\narguments.\n\n" "\nThe file descriptor is closed when the port is closed.\n\n") ("io:s61" "\n\n\nprocedure: (standard-input-port)\n\n\nprocedure: (standard-input-port b-mode)\n\n\nprocedure: (standard-input-port b-mode ?transcoder)\n\nreturns: a new input port connected to the process's standard input\n\nlibraries: (chezscheme)\n\n" "If ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual input port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary input port.\nThe buffer mode b-mode defaults to block.\n\n" "\nThe Revised6 Report version of this procedure does not accept the\noptional b-mode and ?transcoder arguments, which limits\nit to an implementation-dependent buffering mode (block in\nChez Scheme) and binary output.\n\n") ("io:s62" "\n\n\nprocedure: (get-string-some textual-input-port)\n\nreturns: a nonempty string or the eof object\n\nlibraries: (chezscheme)\n\n" "If textual-input-port is at end of file, the eof object is returned.\nOtherwise, get-string-some reads (as if with get-u8)\nat least one character and possibly more, and returns a string containing\nthese characters.\nThe port's position is advanced past the characters read.\nThe maximum number of characters read by this operation is implementation-dependent.\n\n" "\nAn exception to the \"at least one character\" guarantee occurs\nif the port is in nonblocking mode (see set-port-nonblocking!)\nand no input is ready.\nIn this case, an empty string is returned.\n\n\n") ("io:s63" "\n\n\nprocedure: (get-string-some! textual-input-port string start n)\n\nreturns: the count of characters read, as an exact nonnegative integer, or the eof object\n\nlibraries: (chezscheme)\n\n" "start and n must be exact nonnegative integers, and the sum of\nstart and n must not exceed the length of string.\n\n" "\nIf n is 0, this procedure returns zero without attempting to\nread from textual-input-port and without modifying string.\n\n" "\nOtherwise, if textual-input-port is at end of file, this procedure\nreturns the eof object, except it returns zero when the port is in nonblocking mode\n(see set-port-nonblocking!) and the port cannot be determined\nto be at end of file without blocking.\nIn either case, string is not modified.\n\n" "\nOtherwise, this procedure reads (as if with get-char)\nup to n characters from the port, stores the characters in consecutive locations of string\nstarting at start, advances the port's position just past the characters read, and\nreturns the count of characters read.\n\n" "\nIf the port is in nonblocking mode, this procedure reads no more\nthan it can without blocking and thus might read zero characters;\notherwise, it reads at least one character but no more than are available\nwhen the first character becomes available.\n\n") ("io:s64" "\n\n\nprocedure: (get-bytevector-some! binary-input-port bytevector start n)\n\nreturns: the count of bytes read, as an exact nonnegative integer, or the eof object\n\nlibraries: (chezscheme)\n\n" "start and n must be exact nonnegative integers, and the sum of\nstart and n must not exceed the length of bytevector.\n\n" "\nIf n is 0, this procedure returns zero without attempting to\nread from binary-input-port and without modifying bytevector.\n\n" "\nOtherwise, if binary-input-port is at end of file, this procedure\nreturns the eof object, except it returns zero when the port is in nonblocking mode\n(see set-port-nonblocking!) and the port cannot be determined\nto be at end of file without blocking.\nIn either case, bytevector is not modified.\n\n" "\nOtherwise, this procedure reads (as if with get-u8)\nup to n bytes from the port, stores the bytes in consecutive locations of bytevector\nstarting at start, advances the port's position just past the bytes read, and\nreturns the count of bytes read.\n\n" "\nIf the port is in nonblocking mode, this procedure reads no more\nthan it can without blocking and thus might read zero bytes;\notherwise, it reads at least one byte but no more than are available\nwhen the first byte becomes available.\n\n") ("io:s65" "\n\n\nprocedure: (unread-char char)\n\n\nprocedure: (unread-char char textual-input-port)\n\n\nprocedure: (unget-char textual-input-port char)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "For unread-char, if textual-input-port is not supplied, it\ndefaults to the current input port.\nThese procedures \"unread\" the last character read from\ntextual-input-port.\nchar may or may not be ignored, depending upon the implementation.\nIn any case, char should be last character read from the port.\nA character should not be unread twice on the same port\nwithout an intervening call to read-char or get-char.\n\n" "\nunread-char and unget-char are provided for applications\nrequiring one character of lookahead and may be used in place of, or even\nin combination with, peek-char or lookahead-char.\nOne character of lookahead is required in the procedure\nread-word, which is defined below in terms of unread-char.\nread-word returns the next word from a textual input port as a string, where\na word is defined to be a sequence of alphabetic characters.\nSince it does not know until it reads one character too many that it has\nread the entire word, read-word uses unread-char to\nreturn the character to the input port.\n\n" "\n\n" "(define read-word\n\n  (lambda (p)\n\n    (list->string\n\n      (let f ([c (read-char p)])\n\n        (cond\n\n          [(eof-object? c) '()]\n\n          [(char-alphabetic? c)\n\n           (cons c (f (read-char p)))]\n\n          [else\n\n           (unread-char c p)\n\n           '()])))))\n" "In the alternate version below, peek-char is used instead of\nunread-char.\n\n" "\n\n" "(define read-word\n\n  (lambda (p)\n\n    (list->string\n\n      (let f ([c (peek-char p)])\n\n        (cond\n\n          [(eof-object? c) '()]\n\n          [(char-alphabetic? c)\n\n           (read-char p)\n\n           (cons c (f (peek-char p)))]\n\n          [else '()])))))\n" "The advantage of unread-char in this situation is that only\none call to unread-char per word is required, whereas one\ncall to peek-char is required for each character in the word\nplus the first character beyond.\nIn many cases, unread-char and unget-char do not enjoy\nthis advantage, and peek-char or lookahead-char\nshould be used instead.\n\n\n") ("io:s66" "\n\n\nprocedure: (unget-u8 binary-input-port octet)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "This procedures \"unreads\" the last byte read from\nbinary-input-port.\noctet may or may not be ignored, depending upon the implementation.\nIn any case, octet should be last byte read from the port.\nA byte should not be unread twice on the same port\nwithout an intervening call to get-u8.\n\n\n") ("io:s67" "\n\n\nprocedure: (input-port-ready? input-port)\n\nreturns: #t if data is available on input-port, #f otherwise\n\nlibraries: (chezscheme)\n\n" "input-port-ready? allows a program to check to see if input is\navailable on a textual or binary input port without hanging.\nIf input is available or the port is at end of file,\ninput-port-ready? returns #t.\nIf it cannot determine from the port whether input is ready, \ninput-port-ready? raises an exception with condition type\n&i/o-read-error.\nOtherwise, it returns #f.\n\n") ("io:s68" "\n\n\nprocedure: (char-ready?)\n\n\nprocedure: (char-ready? textual-input-port)\n\nreturns: #t if a character is available on textual-input-port, #f otherwise\n\nlibraries: (chezscheme)\n\n" "If textual-input-port is not supplied, it defaults to the current input port.\nchar-ready? is like input-port-ready? except it is\nrestricted to textual input ports.\n\n\n") ("io:s69" "\n\n\nprocedure: (block-read textual-input-port string)\n\n\nprocedure: (block-read textual-input-port string count)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "count must be a nonnegative fixnum less than or equal to the\nlength of string.\nIf not provided, it defaults to the length of string.\n\n" "\nIf textual-input-port is at end-of-file, an eof object is returned.\nOtherwise, string is filled with as many characters as are\navailable for reading from textual-input-port up to count,\nand the number of characters placed in the string is returned.\n\n" "\nIf textual-input-port is buffered and the buffer is nonempty,\nthe buffered input or a portion thereof is returned; otherwise\nblock-read bypasses the buffer entirely.\n\n") ("io:s70" "\n\n\nprocedure: (read-token)\n\n\nprocedure: (read-token textual-input-port)\n\n\nprocedure: (read-token textual-input-port sfd bfp)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "sfd must be a source-file descriptor.\nbfp must be an exact nonnegative integer and should be the\ncharacter position of the next character to be read from\ntextual-input-port.\n\n" "\nParsing of a Scheme datum is conceptually performed in two steps.\nFirst, the sequence of characters that form the datum are grouped into\ntokens, such as symbols, numbers, left parentheses, and\ndouble quotes.\nDuring this first step, whitespace and comments are discarded.\nSecond, these tokens are grouped into data.\n\n" "\nread performs both of these steps and creates an internal\nrepresentation of each datum it parses.\nread-token may be used to perform the first step only, one\ntoken at a time.\nread-token is intended to be used by editors and program\nformatters that must be able to parse a program or datum without\nactually reading it.\n\n" "\nIf textual-input-port is not supplied, it defaults to the current input port.\nOne token is read from the input port and returned as four values:\n\n" "\n\ntype: a symbol describing the type of token read,\n\n" "\nvalue: the token value,\n\n" "\nstart: the position of the first character of the token,\nrelative to the starting position of the input port (or #f,\nif the position cannot be determined), and\n\n" "\nend: the first position beyond the token,\nrelative to the starting position of the input port (or #f,\nif the position cannot be determined).\n\n\n" "\nThe input port is left pointing to the first character position beyond\nthe token.\n\n" "\nWhen the token type fully specifies the token,\nread-token returns #f for the value.\nThe token types are listed below with the corresponding value\nin parentheses.\n\n" "\n\natomic (atom) an atomic value, i.e., \n    a symbol, boolean, number, character, #!eof,\n    or #!bwp\nbox (#f) box prefix, i.e.,  #&\ndot (#f) dotted pair separator, i.e., .\neof (#!eof) end of file\nfasl (#f) fasl prefix, i.e., #@\ninsert (n) graph reference, i.e., #n#\nlbrack (#f) open square bracket\nlparen (#f) open parenthesis\nmark (n) graph mark, i.e., #n=\nquote (quote, quasiquote,\n    syntax, unquote, unquote-splicing,\n    or datum-comment)\n    an abbreviation mark, e.g., ' or ,@ or\n    datum-comment prefix\nrbrack (#f) close square bracket\nrecord-brack (#f) record open bracket, i.e., #[\nrparen (#f) close parenthesis\nvfxnparen (n) fxvector prefix, i.e., #nvfx(\nvfxparen (#f) fxvector prefix, i.e., #vfx(\nvnparen (n) vector prefix, i.e., #n(\nvparen (#f) vector prefix, i.e., #(\nvu8nparen (n) bytevector prefix, i.e., #nvu8(\nvu8paren (#f) bytevector prefix, i.e., #vu8(\n\n\n" "\nThe set of token types is likely to change in future releases of the\nsystem; check the release notes for details on such changes.\n\n" "\nSpecifying sfd and bfp improves the quality of error messages,\nguarantees start and end can be determined,\nand eliminates the overhead of asking for a file position on each call\nto read-token.\nIn most cases, bfp should be 0 for the first call\nto read-token at the start of a file,\nand it should be the fourth return value (end) of the preceding\ncall to read-token for each subsequent\ncall.\nThis protocol is necessary to handle files containing multiple-byte\ncharacters, since file positions do not necessarily correspond\nto character positions.\n\n" "\n\n" "(define s (open-input-string \"(a b c)\"))\n\n(read-token s) --> lparen\n\n                   #f\n\n                   0\n\n                   1\n\n(define s (open-input-string \"abc 123\"))\n\n(read-token s) --> atomic\n\n                   abc\n\n                   0\n\n                   3\n\n(define s (open-input-string \"\"))\n\n(read-token s) --> eof\n\n                   #!eof\n\n                   0\n\n                   0\n\n(define s (open-input-string \"#7=#7#\"))\n\n(read-token s) --> mark\n\n                   7\n\n                   0\n\n                   3\n\n(read-token s) --> insert\n\n                   7\n\n                   3\n\n                   6\n" "The information read-token returns is not always\nsufficient for reconstituting the exact sequence of characters that\nmake up a token.\nFor example, 1.0 and 1e0 both return\ntype atomic with value 1.0.\nThe exact sequence of characters may be obtained only by repositioning\nthe port and reading a block of characters of the appropriate length,\nusing the relative positions given by start and end.\n\n\n") ("io:s71" "\n\n\nglobal parameter: console-output-port\n\nlibraries: (chezscheme)\n\n" "console-output-port is a parameter that determines the\noutput port used by the waiter and interactive debugger.\nWhen called with no arguments, it returns the\nconsole output port.\nWhen called with one argument, which must be a textual output port,\nit changes the value of the console\noutput port.\nThe initial value of this parameter is a port tied to the standard\noutput (stdout) stream of the Scheme process.\n\n\n") ("io:s72" "\n\n\nthread parameter: current-output-port\n\nlibraries: (chezscheme)\n\n" "current-output-port is a parameter that determines the\ndefault port argument for most output procedures,\nincluding write-char, newline, write,\ndisplay, and pretty-print.\nWhen called with no arguments, current-output-port returns the\ncurrent output port.\nWhen called with one argument, which must be a textual output port,\nit changes the value of the current\noutput port.\nThe Revised6 Report version of current-output-port accepts\nonly zero arguments, i.e., it cannot be used to change the current output\nport.\nThe initial value of this parameter is the same port as the initial\nvalue of console-output-port.\n\n\n") ("io:s73" "\n\n\nthread parameter: console-error-port\n\nlibraries: (chezscheme)\n\n" "console-error-port is a parameter that can be used to set\nor obtain the console error port, which determines the port to which\nconditions and other messages are printed by the default exception\nhandler.\nWhen called with no arguments, console-error-port returns the\nconsole error port.\nWhen called with one argument, which must be a textual output port,\nit changes the value of the console\nerror port.\n\n" "\nIf the system determines that the standard output (stdout) and standard\nerror (stderr) streams refer to the same file, socket, pipe, virtual\nterminal, device, etc., this parameter is initially set to the same value\nas the parameter console-output-port.\nOtherwise, this parameter is initially set to a different port tied to the\nstandard error (stderr) stream of the Scheme process.\n\n") ("io:s74" "\n\n\nthread parameter: current-error-port\n\nlibraries: (chezscheme)\n\n" "current-error-port is a parameter that can be used to set\nor obtain the current error port.\nWhen called with no arguments, current-error-port returns the\ncurrent error port.\nWhen called with one argument, which must be a textual output port,\nit changes the value of the current error port.\nThe Revised6 Report version of current-error-port accepts\nonly zero arguments, i.e., it cannot be used to change the current error\nport.\nThe initial value of this parameter is the same port as the initial\nvalue of console-error-port.\n\n") ("io:s75" "\n\n\nprocedure: (open-output-file path)\n\n\nprocedure: (open-output-file path options)\n\nreturns: a new output port\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nopen-output-file opens a textual output port for the file named by\npath.\n\n" "\noptions, if present, is a symbolic option name or option list.\nPossible symbolic option names are \nerror, truncate, replace, append,\ncompressed, uncompressed, buffered,\nunbuffered, exclusive, and nonexclusive.\nAn option list is a list containing zero or more symbolic option names\nand possibly the two-element\noption mode mode.\n\n" "\nThe mutually exclusive error, truncate,\nreplace, and append options are used to direct what happens when\nthe file to be opened already exists.\n\nerror: An exception is raised with condition-type &i/o-filename.\nreplace: The existing file is deleted before the new file\nis opened.\ntruncate: The existing file is opened\nand truncated to zero length.\nappend: \nThe existing file is opened\nand the output port is positioned at the end of the file before each write\nso that output to the port is always appended to the file.\n\nThe default behavior is to raise an exception.\n\n" "\nThe mutually exclusive compressed and\nuncompressed options determine whether the output file is to\nbe compressed.\nThe compression format and level are determined by the\ncompress-format\nand\ncompress-level\nparameters.\nFiles are uncompressed by default, so the uncompressed\noption is useful only as documentation.\n\n" "\nThe mutually exclusive buffered and unbuffered\noptions determine whether output is buffered.\nUnbuffered output is sent immediately to the file, whereas buffered\noutput not written until the port's output buffer is filled or the\nport is flushed (via flush-output-port) or closed (via\nflush-output-port or by the storage management system when\nthe port becomes inaccessible).\nOutput is buffered by default for efficiency, so the\nbuffered option is useful only as documentation.\n\n" "\nThe mutually exclusive exclusive and nonexclusive\noptions determine whether access to the file is \"exclusive.\"\nWhen the exclusive option is specified, the file is locked until\nthe port is closed to prevent access by other processes.\nOn some systems the lock is advisory, i.e., it inhibits access by \nother processes only if they also attempt to open exclusively.\nNonexclusive access is the default, so the nonexclusive option\nis useful only as documentation.\n\n" "\nThe mode option determines the permission bits\non Unix systems when the file is created by the operation, subject\nto the process umask.\nThe subsequent element in the options list must be an exact integer\nspecifying the permissions in the manner of the Unix open\nfunction.\nThe mode option is ignored under Windows.\n\n" "\nFor example, the call\n\n" "\n\n" "(open-output-file \"frob\" '(compressed truncate mode #o644))\n" "opens the file frob with compression enabled.\nIf frob already exists it is truncated.\nOn Unix-based systems, if frob does not already exist, the permission\nbits on the newly created file are set to logical and of #o644 and the\nprocess's umask.\n\n" "\nThe Revised6 Report version of open-output-file does not\nsupport the optional options argument.\n\n") ("io:s78" "\n\n\nprocedure: (call-with-output-file path procedure)\n\n\nprocedure: (call-with-output-file path procedure options)\n\nreturns: the values returned by procedure\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nprocedure should accept one argument.\n\n" "\ncall-with-output-file creates a new output port for the file named\nby path, as if with open-output-file, and passes this port to procedure.\nIf procedure returns, call-with-output-file closes the output port\nand returns the values returned by procedure.\n\n" "\ncall-with-output-file does not automatically close the output\nport if a continuation created outside of procedure is invoked, since it\nis possible that another continuation created inside of procedure will be\ninvoked at a later time, returning control to procedure.\nIf procedure does not return, an implementation is free to close the\noutput port only if it can prove that the output port is no longer accessible.\nAs shown in Section http://scheme.com/tspl4/./control.html#g1025.6 of The Scheme Programming Language, 4th Edition, dynamic-wind may be used to\nensure that the port is closed if a continuation created outside of\nprocedure is invoked.\n\n" "\nSee open-output-file above for a description of the optional\noptions argument.\n\n" "\nThe Revised6 Report version of call-with-output-file does not\nsupport the optional options argument.\n\n\n") ("io:s79" "\n\n\nprocedure: (with-output-to-file path thunk)\n\n\nprocedure: (with-output-to-file path thunk options)\n\nreturns: the value returned by thunk\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nthunk must be a procedure and should accept zero arguments.\n\n" "\nwith-output-to-file temporarily rebinds the current output port to be the\nresult of opening the file named by path, as if with open-output-file,\nduring the application of thunk.\nIf thunk returns, the port is closed and the current output port\nis restored to its old value.\n\n" "\nThe behavior of with-output-to-file is unspecified if a\ncontinuation created outside of thunk is invoked before\nthunk returns.\nAn implementation may close the port and restore the current output\nport to its old value---but it may not.\n\n" "\nSee open-output-file above for a description of the optional\noptions argument.\n\n" "\nThe Revised6 Report version of with-output-to-file does not\nsupport the optional options argument.\n\n") ("io:s80" "\n\n\nprocedure: (open-fd-output-port fd)\n\n\nprocedure: (open-fd-output-port fd b-mode)\n\n\nprocedure: (open-fd-output-port fd b-mode ?transcoder)\n\nreturns: a new output port for the file descriptor fd\n\nlibraries: (chezscheme)\n\n" "fd must be a nonnegative exact integer and should be a valid\nopen file descriptor.\nIf ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual output port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary output port.\nSee the lead-in to Section http://scheme.com/tspl4/./io.html#g1237.2 of The Scheme Programming Language, 4th Edition\nfor a description of the constraints on and effects of the other\narguments.\n\n" "\nThe file descriptor is closed when the port is closed.\n\n") ("io:s81" "\n\n\nprocedure: (standard-output-port)\n\n\nprocedure: (standard-output-port b-mode)\n\n\nprocedure: (standard-output-port b-mode ?transcoder)\n\nreturns: a new output port connected to the process's standard output\n\nlibraries: (chezscheme)\n\n" "If ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual output port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary output port.\nThe buffer mode b-mode defaults to line, which differs from\nblock in Chez Scheme only for textual output ports.\n\n" "\nThe Revised6 Report version of this procedure does not accept the\noptional b-mode and ?transcoder arguments, which limits\nit to an implementation-dependent buffering mode (line in\nChez Scheme) and binary output.\n\n\n") ("io:s82" "\n\n\nprocedure: (standard-error-port)\n\n\nprocedure: (standard-error-port b-mode)\n\n\nprocedure: (standard-error-port b-mode ?transcoder)\n\nreturns: a new output port connected to the process's standard error\n\nlibraries: (chezscheme)\n\n" "If ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual output port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary output port.\nThe buffer mode b-mode defaults to none.\nSee the lead-in to Section http://scheme.com/tspl4/./io.html#g1237.2 of The Scheme Programming Language, 4th Edition\nfor a description of the constraints on and effects of the other\narguments.\n\n" "\nThe Revised6 Report version of this procedure does not accept the\noptional b-mode and ?transcoder arguments, which limits\nit to an implementation-dependent buffering mode (none in\nChez Scheme) and binary output.\n\n\n") ("io:s83" "\n\n\nprocedure: (put-bytevector-some binary-output-port bytevector)\n\n\nprocedure: (put-bytevector-some binary-output-port bytevector start)\n\n\nprocedure: (put-bytevector-some binary-output-port bytevector start n)\n\nreturns: the number of bytes written\n\nlibraries: (chezscheme)\n\n" "start and n must be nonnegative exact integers, and the sum of\nstart and n must not exceed the length of bytevector.\nIf not supplied, start defaults to zero and n defaults to\nthe difference between the length of bytevector and start.\n\n" "\nThis procedure normally writes the n bytes of bytevector\nstarting at start to the port and advances the its position past the\nend of the bytes written.\nIf the port is in nonblocking mode (see set-port-nonblocking!),\nhowever, the number of bytes written may be less than n, if\nthe system would have to block to write more bytes.\n\n\n") ("io:s84" "\n\n\nprocedure: (put-string-some textual-output-port string)\n\n\nprocedure: (put-string-some textual-output-port string start)\n\n\nprocedure: (put-string-some textual-output-port string start n)\n\nreturns: the number of characters written\n\nlibraries: (chezscheme)\n\n" "start and n must be nonnegative exact integers, and the sum of\nstart and n must not exceed the length of string.\nIf not supplied, start defaults to zero and n defaults to\nthe difference between the length of string and start.\n\n" "\nThis procedure normally writes the n characters of string\nstarting at start to the port and advances the its position past the\nend of the characters written.\nIf the port is in nonblocking mode (see set-port-nonblocking!),\nhowever, the number of characters written may be less than n, if\nthe system would have to block to write more characters.\n\n\n") ("io:s85" "\n\n\nprocedure: (display-string string)\n\n\nprocedure: (display-string string textual-output-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "display-string writes the characters contained within\nstring to textual-output-port or to the current-output port \nif textual-output-port is not specified.\nThe enclosing string quotes are not printed, and special characters\nwithin the string are not escaped.\ndisplay-string is a more efficient alternative to\ndisplay for displaying strings.\n\n") ("io:s86" "\n\n\nprocedure: (block-write textual-output-port string)\n\n\nprocedure: (block-write textual-output-port string count)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "count must be a nonnegative fixnum less than or equal to the\nlength of string.\nIf not provided, it defaults to the length of string.\n\n" "\nblock-write writes the first count characters of string\nto textual-output-port.\nIf the port is buffered and the buffer is nonempty, the\nbuffer is flushed before the contents of string are written.\nIn any case, the contents of string are written immediately,\nwithout passing through the buffer.\n\n") ("io:s87" "\n\n\nprocedure: (truncate-port output-port)\n\n\nprocedure: (truncate-port output-port pos)\n\n\nprocedure: (truncate-file output-port)\n\n\nprocedure: (truncate-file output-port pos)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "truncate-port and truncate-file are identical.\n\n" "\npos must be an exact nonnegative integer.  It defaults to 0.\n\n" "\nThese procedures truncate the file or other object associated with\noutput-port to pos and repositions the port\nto that position, i.e., it combines the functionality of\nset-port-length! and set-port-position! and\ncan be called on a port only if port-has-set-port-length!? and\nport-has-set-port-position!? are both true of the port.\n\n\n") ("io:s88" "\ndesc:fresh-line\n\n\nprocedure: (fresh-line)\n\n\nprocedure: (fresh-line textual-output-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "If textual-output-port is not supplied, it defaults to the current output port.\n\n" "\nThis procedure behaves like newline, i.e., sends a newline\ncharacter to textual-output-port, unless it can determine that the port\nis already positioned at the start of a line.\nIt does this by flushing the port and consulting the\n\"beginning-of-line\" (BOL) flag associated with the port.\n(See page 222.)\n\n\n") ("io:s89" "\n\n\nprocedure: (open-input-output-file path)\n\n\nprocedure: (open-input-output-file path options)\n\nreturns: a new input-output port\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nopen-input-output-file opens a textual input-output port for the file named by\npath.\n\n" "\nThe port may be used to read from or write to the named file.\nThe file is created if it does not already exist.\n\n" "\noptions, if present, is a symbolic option name or option list.\nPossible symbolic option names are \nbuffered,\nunbuffered, exclusive, and nonexclusive.\nAn option list is a list containing zero or more symbolic option names\nand possibly the two-element\noption mode mode.\nSee the description of open-output-file for an explanation\nof these options.\n\n" "\nInput/output files are usually closed using close-port\nbut may also be closed with either\nclose-input-port or\nclose-output-port.\n\n") ("io:s90" "\n\n\nprocedure: (open-fd-input/output-port fd)\n\n\nprocedure: (open-fd-input/output-port fd b-mode)\n\n\nprocedure: (open-fd-input/output-port fd b-mode ?transcoder)\n\nreturns: a new input/output port for the file descriptor fd\n\nlibraries: (chezscheme)\n\n" "fd must be a nonnegative exact integer and should be a valid\nopen file descriptor.\nIf ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual input/output port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary input/output port.\nSee the lead-in to Section http://scheme.com/tspl4/./io.html#g1237.2 of The Scheme Programming Language, 4th Edition\nfor a description of the constraints on and effects of the other\narguments.\n\n" "\nThe file descriptor is closed when the port is closed.\n\n\n") ("io:s92" "\n\n\nprocedure: (multibyte->string code-page bytevector)\n\nreturns: a string containing the characters encoded in bytevector\n\n\nprocedure: (string->multibyte code-page string)\n\nreturns: a bytevector containing the encodings of the characters in string\n\nlibraries: (chezscheme)\n\n" "These procedures are available only under Windows.\nThe procedure multibyte->string is a wrapper for the Windows API\nMultiByteToWideChar function,\nand string->multibyte is a wrapper for the Windows API\nWideCharToMultiByte function.\n\n" "\ncode-page declares the encoding of the byte sequences in the input\nor output bytevectors.\nIt must be an exact nonnegative integer identifying a code page or one of\nthe symbols cp-acp, cp-maccp, cp-oemcp,\ncp-symbol, cp-thread-acp, cp-utf7, or\ncp-utf8, which have the same meanings as the API function\nmeanings for the like-named constants.\n\n") ("io:s93" "\n\n\nprocedure: (pretty-print obj)\n\n\nprocedure: (pretty-print obj textual-output-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "If textual-output-port is not supplied, it defaults to the current output port.\n\n" "\npretty-print is similar to write except that it uses\nany number of spaces and newlines in order to print obj in a\nstyle that is pleasing to look at and which shows the nesting level via\nindentation.\nFor example,\n\n" "\n\n" "(pretty-print '(define factorial (lambda (n) (let fact ((i n) (a 1))\n\n  (if (= i 0) a (fact (- i 1) (* a i)))))))\n" "might produce\n\n" "\n\n" "(define factorial\n\n  (lambda (n)\n\n    (let fact ([i n] [a 1])\n\n      (if (= i 0) a (fact (- i 1) (* a i))))))\n") ("io:s94" "\n\nprocedure: (pretty-file ifn ofn)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "ifn and ofn must be strings.\npretty-file reads each object in turn from the file named by\nifn and pretty prints the object to the file named by ofn.\nComments present in the input are discarded by the reader and so do\nnot appear in the output file.\nIf the file named by ofn already exists, it is replaced.\n\n") ("io:s95" "\n\n\nprocedure: (pretty-format sym)\n\nreturns: see below\n\n\nprocedure: (pretty-format sym fmt)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "By default, the pretty printer uses a generic algorithm for printing\neach form.\nThis procedure is used to override this default and guide the\npretty-printers treatment of specific forms.\nThe symbol sym names a syntactic form or procedure.\nWith just one argument, pretty-format returns the current\nformat associated with sym, or #f if no format is\nassociated with sym.\n\n" "\nIn the two-argument case, the format fmt is associated with\nsym for future invocations of the pretty printer.\nfmt must be in the formatting language described below.\n\n" "\n\n  \n  \n  \n<fmt>centermath/csug/2.gif(quote symbol)\n  center|var\n  center|symbol\n  center|(read-macro string symbol)\n  center|(meta)\n  center|(bracket . fmt-tail)\n  center|(alt fmt fmt*)\n  center|fmt-tail\nfmt-tailcentermath/csug/2.gif()\n  center|(tab fmt ...)\n  center|(fmt tab ...)\n  center|(tab fmt . fmt-tail)\n  center|(fmt ...)\n  center|(fmt . fmt-tail)\n  center|(fill tab fmt ...)\ntabcentermath/csug/2.gifint\n  center|#f\n\n\n" "\nSome of the format forms are used for matching when there are multiple\nalternatives, while others are used for matching and control indentation\nor printing.\nA description of each fmt is given below.\n\n" "\n\n(quote symbol):\nThis matches only the symbol symbol.\n\n" "\nvar:\nThis matches any symbol.\n\n" "\nsymbol:\nThis matches any input.\n\n" "\n(read-macro string symbol):\nThis is used for read macros like quote and syntax.\nIt matches any input of the form (symbol subform).\nFor forms that match, the pretty printer prints\nstring immediately followed by subform.\n\n" "\n(meta):\nThis is a special case used for the meta keyword\n(Section 11.8) which is used as a keyword prefix of\nanother form.\n\n" "\n(alt fmt fmt*):\nThis compares the input against the specified formats and uses the\none that is the closest match.\nMost often, one of the formats will match exactly, but in other\ncases, as when input is malformed or appears in abstract form in the\ntemplate of a syntactic abstraction, none of the formats will match\nexactly.\n\n" "\n(bracket . fmt-tail):\nThis matches any list-structured input and prints the input enclosed\nin square brackets, i.e.,\n[ and ],\nrather than parentheses.\n\n" "\nfmt-tail:\nThis matches any list-structured input.\n\n\n" "\nIndentation of list-structured forms is determined via the\nfmt-tail specifier used to the last two cases above.\nA description of each fmt-tail is given below.\n\n" "\n\n():\nThis matches an empty list tail.\n\n" "\n(tab fmt ...):\nThis matches the tail of any proper list; if the tail is nonempty\nand the list does not fit entirely on the current line, a line break is\ninserted before the first subform of the tail and tab (see\nbelow) determines the amount by which this and all subsequent subforms\nare indented.\n\n" "\n(fmt tab ...):\nThis matches the tail of any proper list; if the tail is nonempty\nand the list does not fit entirely on the current line, a line break is\ninserted after the first subform of the tail and tab (see\nbelow) determines the amount by which all subsequent subforms are\nindented.\n\n" "\n(tab fmt . fmt-tail):\nThis matches a nonempty tail if the tail of the tail matches fmt-tail.\nIf the list does not fit entirely on the current line, a line break is\ninserted before the first subform of the tail and tab (see\nbelow) determines the amount by which the subform is indented.\n\n" "\n(fmt ...):\nThis matches the tail of any proper list and specified that no\nline breaks are to be inserted before or after the current or\nsubsequent subforms.\n\n" "\n(fmt . fmt-tail):\nThis matches a nonempty tail if the tail of the tail matches fmt-tail\nand specifies that no line break is to be inserted before or after\nthe current subform.\n\n" "\n(fill tab fmt ...):\nThis matches the tail of any proper list and invokes a fill mode in\nwhich the forms are packed with as many as will fit on each line.\n\n\n" "\nA tab determines the amount by which a list subform is indented.\nIf tab is a nonnegative exact integer int, the subform\nis indented int spaces in from the character position just after\nthe opening parenthesis or bracket of the parent form.\nIf tab is #f, the standard indentation is used.\nThe standard indentation can be determined or changed via the parameter\npretty-standard-indent, which is described later in this\nsection.\n\n" "\nIn cases where a format is given that doesn't quite match, the pretty\nprinter tries to use the given format as far as it can.\nFor example, if a format matches a list-structured form with a specific\nnumber of subforms, but more or fewer subform are given, the pretty\nprinter will discard or replicate subform formats as necessary.\n\n" "\nHere is an example showing the formatting of let might be specified.\n\n" "\n\n" "(pretty-format 'let\n\n  '(alt (let ([bracket var x] 0 ...) #f e #f e ...)\n\n        (let var ([bracket var x] 0 ...) #f e #f e ...)))\n" "Since let comes in two forms, named and unnamed, two alternatives\nare specified.\nIn either case, the bracket fmt is used to enclose the\nbindings in square brackets, with all bindings after the first appearing\njust below the first (and just after the enclosing opening parenthesis),\nif they don't all fit on one line.\nEach body form is indented by the standard indentation.\n\n") ("io:s98" "\n\n\nthread parameter: pretty-line-length\n\n\nthread parameter: pretty-one-line-limit\n\nlibraries: (chezscheme)\n\n" "The value of each of these parameters must be a positive fixnum.\n\n" "\nThe parameters pretty-line-length and\npretty-one-line-limit control the output produced by\npretty-print.\npretty-line-length determines after which character position (starting\nfrom the first) on a line the pretty printer attempts to cut off output.\nThis is a soft limit only; if necessary, the pretty-printer will go beyond\npretty-line-length.\n\n" "\npretty-one-line-limit is similar to\npretty-line-length, except that it is relative to the first\nnonblank position on each line of output.\nIt is also a soft limit.\n\n\n") ("io:s100" "\n\n\nthread parameter: pretty-initial-indent\n\nlibraries: (chezscheme)\n\n" "The value of this parameter must be a nonnegative fixnum.\n\n" "\nThe parameter pretty-initial-indent is used to tell\npretty-print where on an output\nline it has been called.\nIf pretty-initial-indent is zero (the default), pretty-print\nassumes that the first line of output it produces will start at the\nbeginning of the line.\nIf set to a nonzero value n, pretty-print assumes that the first\nline will appear at character position n and will adjust its\nprinting of subsequent lines.\n\n\n") ("io:s102" "\n\n\nthread parameter: pretty-standard-indent\n\nlibraries: (chezscheme)\n\n" "The value of this parameter must be a nonnegative fixnum.\n\n" "\nThis determines the amount by which\npretty-print indents subexpressions of most forms, such as let\nexpressions, from the form's keyword or first subexpression.\n\n\n") ("io:s103" "\n\n\nthread parameter: pretty-maximum-lines\n\nlibraries: (chezscheme)\n\n" "The parameter pretty-maximum-lines controls how many lines\npretty-print prints when it is called.\nIf set to #f (the default), no limit is imposed; if set to a\nnonnegative fixnum n, at most n lines are printed.\n\n\n") ("io:s104" "\n\n\nprocedure: (format format-string obj ...)\n\n\nprocedure: (format #f format-string obj ...)\n\n\nprocedure: (format #t format-string obj ...)\n\n\nprocedure: (format textual-output-port format-string obj ...)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "When the first argument to format is a string or #f (first and\nsecond forms above),\nformat constructs an output string from format-string and the\nobjects obj ....\nCharacters are copied from format-string to the output string from\nleft to right, until format-string is exhausted.\nThe format string may contain one or more format directives, which are\nmulti-character sequences prefixed by a tilde ( ~ ).\nEach directive is replaced by some other text, often involving one or more\nof the obj ... arguments, as determined by the semantics\nof the directive.\n\n" "\nWhen the first argument is #t, output is sent to the current output\nport instead, as with printf.\nWhen the first argument is a port, output is sent to that port, as with\nfprintf.\nprintf and fprintf are described later in this section.\n\n" "\nChez Scheme's implementation of format supports all of the\nCommon Lisp [citation30] format directives except for those specific\nto the Common Lisp pretty printer.\nPlease consult a Common Lisp reference or the\nhttp://www.lispworks.com/documentation/HyperSpec/Front/index.htmCommon Lisp Hyperspec,\nfor complete documentation.\nA few of the most useful directives are described below.\n\n\n" "\nAbsent any format directives, format simply displays its string\nargument.\n\n" "\n\n" "(format \"hi there\") --> \"hi there\"\n" "The ~s directive is replaced by the printed representation of\nthe next obj, which may be any object, in machine-readable format,\nas with write.\n\n" "\n\n" "(format \"hi ~s\" 'mom) --> \"hi mom\"\n\n(format \"hi ~s\" \"mom\") --> \"hi \\\"mom\\\"\"\n\n(format \"hi ~s~s\" 'mom #\\!) --> \"hi mom#\\\\!\"\n" "The general form of a ~s directive is actually\n~mincol,colinc,minpad,padchars,\nand the s can be preceded by an at sign ( @ )\nmodifier.\nThese additional parameters are used to control padding in the\noutput, with at least minpad copies of padchar\nplus an integer multiple of colinc copies of padchar\nto make the total width, including the written object,\nmincol characters wide.\nThe padding is placed on the left if the @ modifier is\npresent, otherwise on the right.\nmincol and minpad default to 0, colinc defaults\nto 1, and padchar defaults to space.\nIf specified, padchar is prefixed by a single quote mark.\n\n" "\n\n" "(format \"~10s\" 'hello) --> \"hello     \"\n\n(format \"~10@s\" 'hello) --> \"     hello\"\n\n(format \"~10,,,'*@s\" 'hello) --> \"*****hello\"\n" "The ~a directive is similar, but prints the object as with\ndisplay.\n\n" "\n\n" "(format \"hi ~s~s\" \"mom\" #\\!) --> \"hi \\\"mom\\\"#\\\\!\"\n\n(format \"hi ~a~a\" \"mom\" #\\!) --> \"hi mom!\"\n" "A tilde may be inserted into the output with ~~, and a newline\nmay be inserted with ~% (or embedded in the string with\n\\n).\n\n" "\n\n" "(format \"~~line one,~%line two.~~\") --> \"~line one,\\nline two.~\"\n\n(format \"~~line one,\\nline two.~~\") --> \"~line one,\\nline two.~\"\n" "Real numbers may be printed in floating-point notation with ~f.\n\n" "\n\n" "(format \"~f\" 3.14159) --> 3.14159\n" "Exact numbers may printed as well as inexact numbers in this manner; they\nare simply converted to inexact first as if with exact->inexact.\n\n" "\n\n" "(format \"~f\" 1/3) --> \"0.3333333333333333\"\n" "The general form is actually ~w,d,k,overflowchar,padcharf.\nIf specified, w determines the overall width of the output,\nand d the number of digits to the right of the decimal point.\npadchar, which defaults to space, is the pad character used\nif padding is needed.\nPadding is always inserted on the left.\nThe number is scaled by 10k when printed; k defaults to zero.\nThe entire w-character field is filled with copies of\noverflowchar if overflowchar is specified and the number\ncannot be printed in w characters.\nk defaults to 1\nIf an @ modifier is present, a plus sign is printed before the\nnumber for nonnegative inputs; otherwise, a sign is printed only if the\nnumber is negative.\n\n" "\n\n" "(format \"~,3f\" 3.14159) --> \"3.142\"\n\n(format \"~10f\" 3.14159) --> \"   3.14159\"\n\n(format \"~10,,,'#f\" 1e20) --> \"##########\"\n" "Real numbers may also be printed with ~e for scientific\nnotation or with ~g, which uses either floating-point or\nscientific notation based on the size of the input.\n\n" "\n\n" "(format \"~e\" 1e23) --> \"1.0e+23\"\n\n(format \"~g\" 1e23) --> \"1.0e+23\"\n" "A real number may also be printed with ~$, which uses\nmonetary notation defaulting to two digits to the right of the\ndecimal point.\n\n" "\n\n" "(format \"$~$\" (* 39.95 1.06)) --> \"$42.35\"\n\n(format \"~$USD\" 1/3) --> \"0.33USD\"\n" "Words can be pluralized automatically using p.\n\n" "(format \"~s bear~:p in ~s den~:p\" 10 1) --> \"10 bears in 1 den\"\n" "Numbers may be printed out in words or roman numerals using variations\non ~r.\n\n" "\n\n" "(format \"~r\" 2599) -->  \"two thousand five hundred ninety-nine\"\n\n(format \"~:r\" 99) -->  \"ninety-ninth\"\n\n(format \"~@r\" 2599) --> \"MMDXCIX\"\n" "Case conversions can be performed by bracketing a portion of the\nformat string with the ~@( and ~) directives.\n\n" "\n\n" "(format \"~@(~r~)\" 2599) -->  \"Two thousand five hundred ninety-nine\"\n\n(format \"~@:(~a~)\" \"Ouch!\") -->  \"OUCH!\"\n" "Some of the directives shown above have more options and parameters, and \nthere are other directives as well, including directives for conditionals,\niteration, indirection, and justification.\nAgain, please consult a Common Lisp reference for complete documentation.\n\n" "\nAn implementation of a greatly simplified version of format\nappears in Section http://scheme.com/tspl4/./examples.html#g18012.6 of The Scheme Programming Language, 4th Edition.\n\n\n") ("io:s106" "\n\n\nprocedure: (printf format-string obj ...)\n\n\nprocedure: (fprintf textual-output-port format-string obj ...)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "These procedures are simple wrappers for format.\nprintf prints the formatted output to the current output,\nas with a first-argument of #t to format, and\nfprintf prints the formatted output to the textual-output-port,\nas when the first argument to format is a port.\n\n") ("io:s107" "\ndesc:char-name\n\n\nprocedure: (char-name obj)\n\nreturns: see below\n\n\nprocedure: (char-name name char)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "char-name is used to associate names (symbols) with characters\nor to retrieve the most recently associated name or character for a \ngiven character or name.\nA name can map to only one character, but more than one name\ncan map to the same character.\nThe name most recently associated with a character determines\nhow that character prints, and each name associated with a character\nmay be used after the #\\ character prefix to name that\ncharacter on input.\n\n" "\nCharacter associations created by char-name are ignored by the\nprinter unless the parameter print-char-name is set to a true\nvalue.\nThe reader recognizes character names established by char-name\nexcept after #!r6rs, which is implied within a library or\nR6RS top-level program.\n\n" "\nIn the one-argument form, obj must be a symbol or character.\nIf it is a symbol and a character is associated with the\nsymbol, char-name returns that character.\nIf it is a symbol and no character is associated with the symbol,\nchar-name returns #f.\nSimilarly, if obj is a character, char-name returns the\nmost recently associated symbol for the character or #f if\nno name is associated with the character.\nFor example, with the default set of character names:\n\n" "\n\n" "(char-name #\\space) --> space\n\n(char-name 'space) --> #\\space\n\n(char-name 'nochar) --> #f\n\n(char-name #\\a) --> #f\n" "When passed two arguments, name is added to the set of names\nassociated with char, and any other association for name\nis dropped.\nchar may be #f, in which case any other association\nfor name is dropped and no new association is formed.\nIn either case, any other names associated with char remain\nassociated with char.\n\n" "\nThe following interactive session demonstrates the use of\nchar-name to establish and remove associations between\ncharacters and names, including the association of more than\none name with a character.\n\n" "\n\n" "(print-char-name #t)\n\n(char-name 'etx) --> #f\n\n(char-name 'etx #\\x3)\n\n(char-name 'etx) --> #\\etx\n\n(char-name #\\x3) --> etx\n\n#\\etx --> #\\etx\n\n(eq? #\\etx #\\x3) --> #t\n\n#!r6rs #\\etx --> exception: invalid character name etx\n\n#!chezscheme #\\etx --> #\\etx\n\n(char-name 'etx #\\space)\n\n(char-name #\\x3) --> #f\n\n(char-name 'etx) --> #\\etx\n\n#\\space --> #\\etx\n\n(char-name 'etx #f)\n\n#\\etx --> exception: invalid character name etx\n\n#\\space --> #\\space\n" "(When using the expression editor, it is necessary to type Control-J to\nforce the editor to read the erroneous #\\etx input on the two\ninputs above that result in read errors, since typing Enter\ncauses the expression editor to read the input only if the input is\nwell-formed.)\n\n" "\nThe reader does not recognize hex scalar value escapes in character names,\nas it does in symbols, so #\\new\\x6c;ine is not equivalent\nto #\\newline.\nIn general, programmers should avoid the use of character name symbols\nthat cannot be entered without the use of hex scalar value escapes or\nother symbol-name escape mechanisms, since such character names will\nnot be readable.\n\n\n") ("io:s108" "\n\n\nthread parameter: print-char-name\n\nlibraries: (chezscheme)\n\n" "When print-char-name is set to #f (the default), associations\ncreated by char-name are ignored by write,\nput-datum, pretty-print, and the format\n\"~s\" directive.\nOtherwise, these procedures use the names established by\nchar-name when printing character objects.\n\n" "\n\n" "(char-name 'etx #\\x3)\n\n(format \"~s\" #\\x3) --> \"#\\\\x3\"\n\n(parameterize ([print-char-name #t])\n\n  (format \"~s\" #\\x3)) --> \"#\\\\etx\"\n") ("io:s109" "\n\nthread parameter: case-sensitive\n\nlibraries: (chezscheme)\n\n" "The case-sensitive parameter determines whether the\nreader is case-sensitive with respect to symbol and character names.\nWhen set to true (the default, as required by the Revised6 Report)\nthe case of alphabetic characters\nwithin symbol names is significant.\nWhen set to #f, case is insignificant.\nMore precisely, when set to #f, symbol and character names are\nfolded (as if by string-foldcase); otherwise, they are left\nas they appear in the input.\n\n" "\nThe value of the case-sensitive matters only\nif neither #!fold-case nor #!no-fold-case has appeared\npreviously in the same input stream.\nThat is, symbol and character name are folded if #!fold-case has\nbeen seen.\nThey are not folded if #!no-fold-case has been seen.\nIf neither has been seen, they are folded if and only if\n(case-sensitive) is #f.\n\n" "\n\n" "(case-sensitive) --> #t\n\n(eq? 'abc 'ABC) --> #f\n\n'ABC --> ABC\n\n(case-sensitive #f)\n\n'ABC --> abc\n\n(eq? 'abc 'ABC) --> #t\n") ("io:s110" "\n\nthread parameter: print-graph\n\nlibraries: (chezscheme)\n\n" "When print-graph is set to a true value,\nwrite and pretty-print\nlocate and print objects with shared structure, including\ncycles, in a notation that may be read subsequently with read.\nThis notation employs the syntax\n\"#n=obj,\"\nwhere n\nis a nonnegative integer and obj is the printed representation\nof an object, to label the first occurrence of obj in the output.\nThe syntax\n\"#n#\"\nis used to refer to the object labeled by\nn thereafter in the output.\nprint-graph is set to #f by default.\n\n" "\nIf graph printing is not enabled,\nthe settings of print-length and print-level\nare insufficient to force finite output,\nand write or pretty-print detects a cycle in an\nobject it is given to print,\na warning is issued (an exception with condition type &warning is\nraised) and the object is printed as if\nprint-graph were enabled.\n\n" "\nSince objects printed through the ~s option in the format control\nstrings of format, printf, and fprintf are printed as with\nwrite, the printing of such objects is also affected by print-graph.\n\n" "\n\n" "(parameterize ([print-graph #t])\n\n  (let ([x (list 'a 'b)])\n\n    (format \"~s\" (list x x)))) --> \"(#0=(a b) #0#)\"\n\n\n(parameterize ([print-graph #t])\n\n  (let ([x (list 'a 'b)])\n\n    (set-car! x x)\n\n    (set-cdr! x x)\n\n    (format \"~s\" x))) --> \"#0=(#0# . #0#)\"\n" "The graph syntax is understood by the procedure\nread, allowing graph structures\nto be printed and read consistently.\n\n\n") ("io:s114" "\n\n\nthread parameter: print-level\n\n\nthread parameter: print-length\n\nlibraries: (chezscheme)\n\n" "These parameters can be used to limit the extent to which nested\nor multiple-element structures are printed.\nWhen called without arguments, print-level returns the current\nprint level and print-length returns the current print length.\nWhen called with one argument, which must be a nonnegative fixnum or\n#f, print-level sets the current print level and\nprint-length sets the current print length to the argument.\n\n" "\nWhen print-level is set to a nonnegative integer n,\nwrite and pretty-print\ntraverse only n levels deep into nested structures.\nIf a structure being printed exceeds n levels of nesting,\nthe substructure beyond that point is replaced in the output by an\nellipsis\n( ... ).\nprint-level is set to #f by default, which places\nno limit on the number of levels printed.\n\n" "\nWhen print-length is set to a nonnegative integer n, the\nprocedures write and pretty-print\nprint only n elements of a list or vector,\nreplacing the remainder of the list or vector with an\nellipsis\n( ... ).\nprint-length is set to #f by default, which places\nno limit on the number of elements printed.\n\n" "\nSince objects printed through the ~s option in\nthe format control strings of format, printf, and fprintf are\nprinted as with write,\nthe printing of such objects is also affected by print-level\nand print-length.\n\n" "\nThe parameters print-level and print-length are useful for\ncontrolling the volume of output in contexts where only a small portion\nof the output is needed to identify the object being printed.\nThey are also useful in situations where circular structures may be\nprinted (see also print-graph).\n\n" "\n\n" "(format \"~s\" '((((a) b) c) d e f g)) --> \"((((a) b) c) d e f g)\"\n\n\n(parameterize ([print-level 2])\n\n  (format \"~s\" '((((a) b) c) d e f g))) --> \"(((...) c) d e f g)\"\n\n\n(parameterize ([print-length 3])\n\n  (format \"~s\" '((((a) b) c) d e f g))) --> \"((((a) b) c) d e ...)\"\n\n\n(parameterize ([print-level 2]\n\n               [print-length 3])\n\n  (format \"~s\" '((((a) b) c) d e f g))) --> \"(((...) c) d e ...)\"\n") ("io:s119" "\n\nthread parameter: print-radix\n\nlibraries: (chezscheme)\n\n" "The print-radix parameter determines the radix in which\nnumbers are printed by write, pretty-print, and\ndisplay.\nIts value should be an integer between 2 and 36, inclusive.\nIts default value is 10.\n\n" "\nWhen the value of print-radix is not 10, write and\npretty-print print a radix prefix before the number\n(#b for radix 2, #o for radix 8, #x for\nradix 16, and #nr for any other radix n).\n\n" "\nSince objects printed through the ~s and\n~a options in the format control strings of\nformat, printf, and fprintf are printed as\nwith write and display, the printing of such objects\nis also affected by print-radix.\n\n" "\n\n" "(format \"~s\" 11242957) --> \"11242957\"\n\n\n(parameterize ([print-radix 16])\n\n  (format \"~s\" 11242957)) --> \"#xAB8DCD\"\n\n\n(parameterize ([print-radix 16])\n\n  (format \"~a\" 11242957)) --> \"AB8DCD\"\n") ("io:s120" "\n\nthread parameter: print-gensym\n\nlibraries: (chezscheme)\n\n" "When\nprint-gensym is set to #t (the default)\ngensyms are printed with an\nextended symbol syntax that includes both the pretty name and the unique\nname of the gensym: \n#{pretty-name unique-name}.\nWhen set to pretty, the pretty name only is shown, with the\nprefix #:.\nWhen set to pretty/suffix,\nthe printer prints the gensym's \"pretty\" name along with a\nsuffix based on the gensym's \"unique\" name, separated by a dot ( \".\" ).\nIf the gensym's unique name is generated automatically during the current\nsession, the suffix is that portion of the unique name that is not common\nto all gensyms created during the current session.\nOtherwise, the suffix is the entire unique name.\nWhen set to #f, the pretty name only is shown, with no\nprefix.\n\n" "\nSince objects printed through the ~s option in the\nformat control strings of format, printf,\nerrorf, etc., are printed as with write, the printing of\nsuch objects is also affected by print-gensym.\n\n" "\nWhen printing an object that may contain more than one occurrence of a\ngensym and print-graph is set to pretty or #f,\nit is useful to set print-graph to #t so that\nmultiple occurrences of the same gensym are marked as identical in\nthe output.\n\n" "\n\n" "(let ([g (gensym)])\n\n  (format \"~s\" g)) --> \"#{g0 bdids2xl6v49vgwe-a}\"\n\n\n(let ([g (gensym)])\n\n  (parameterize ([print-gensym 'pretty])\n\n    (format \"~s\" g))) --> \"#:g1\n\n\n(let ([g (gensym)])\n\n  (parameterize ([print-gensym #f])\n\n    (format \"~s\" g))) --> \"g2\"\n\n\n(let ([g (gensym)])\n\n  (parameterize ([print-graph #t] [print-gensym 'pretty])\n\n    (format \"~s\" (list g g)))) --> \"(#0=#:g3 #0#)\"\n\n\n(let ([g1 (gensym \"x\")]\n\n      [g2 (gensym \"x\")]\n\n      [g3 (gensym \"y\")])\n\n  (parameterize ([print-gensym 'pretty/suffix])\n\n    (format \"~s ~s ~s\" g1 g2 g3))) --> \"x.1 x.2 y.3\"\n") ("io:s125" "\n\nthread parameter: print-brackets\n\nlibraries: (chezscheme)\n\n" "When print-brackets is set to a true value, the pretty printer\n(see pretty-print) uses square\nbrackets rather than parentheses around certain subexpressions of\ncommon control structures, e.g., around let bindings and\ncond clauses.\nprint-brackets is set to #t by default.\n\n" "\n\n" "(let ([p (open-output-string)])\n\n  (pretty-print '(let ([x 3]) x) p) --> \"(let ([x 3]) x)\n\n  (get-output-string p))            gifs/ghostRightarrow.gif \"\n\n\n(parameterize ([print-brackets #f])\n\n  (let ([p (open-output-string)])\n\n    (pretty-print '(let ([x 3]) x) p) --> \"(let ((x 3)) x)\n\n    (get-output-string p)))           gifs/ghostRightarrow.gif \"\n") ("io:s127" "\n\nthread parameter: print-extended-identifiers\n\nlibraries: (chezscheme)\n\n" "Chez Scheme extends the syntax of identifiers as described in\nSection 1.1, except within a set of forms prefixed by\n#!r6rs (which is implied in a library or top-level program).\n\n" "\nWhen this parameter is set to false (the default), identifiers in the\nextended set are printed with hex scalar value escapes as necessary to\nconform to the R6RS syntax for identifiers.\nWhen this parameter is set to a true value, identifiers in the\nextended set are printed without the escapes.\nIdentifiers whose names fall outside of both syntaxes are printed with\nthe escapes regardless of the setting of this parameter.\n\n" "\nFor example:\n\n" "\n\n" "(parameterize ([print-extended-identifiers #f])\n\n  (printf \"~s\\n~s\\n\"\n\n    '(1+ --- { } .xyz)\n\n    (string->symbol \"123\")))\n" "prints\n\n" "\n\n" "(\\x31;+ \\x2D;-- \\x7B; \\x7D; \\x2E;xyz)\n\n\\x31;23\n" "while\n\n" "\n\n" "(parameterize ([print-extended-identifiers #t])\n\n  (printf \"~s\\n~s\\n\"\n\n    '(1+ --- { } .xyz)\n\n    (string->symbol \"123\")))\n" "prints\n\n" "\n\n" "(1+ --- { } .xyz)\n\n\\x31;23\n") ("io:s128" "\n\nthread parameter: print-vector-length\n\nlibraries: (chezscheme)\n\n" "When print-vector-length is set to a true value,\nwrite, put-datum, and pretty-print includes the length\nfor all vectors between the \"#\" and open parenthesis,\nall bytevectors between the \"#vu8\" and open parenthesis,\nand all fxvectors between the \"#vfx\" and open parenthesis.\nThis parameter is set to #f by default.\n\n" "\nWhen print-vector-length is set to a\ntrue value, write, put-datum, and pretty-print\nalso suppress duplicated trailing elements in the vector to\nreduce the amount of output.\nThis form is also recognized by the reader.\n\n" "\nSince objects printed through the ~s option in the\nformat control strings of format, printf, and\nfprintf are printed as with write, the printing of\nsuch objects is also affected by the setting of\nprint-vector-length.\n\n" "\n\n" "(format \"~s\" (vector 'a 'b 'c 'c 'c)) --> \"#(a b c c c)\"\n\n\n(parameterize ([print-vector-length #t])\n\n  (format \"~s\" (vector 'a 'b 'c 'c 'c))) --> \"#5(a b c)\"\n\n\n(parameterize ([print-vector-length #t])\n\n  (format \"~s\" (bytevector 1 2 3 4 4 4))) --> \"#6vu8(1 2 3 4)\"\n\n\n(parameterize ([print-vector-length #t])\n\n  (format \"~s\" (fxvector 1 2 3 4 4 4))) --> \"#6vfx(1 2 3 4)\"\n") ("io:s130" "\n\nthread parameter: print-precision\n\nlibraries: (chezscheme)\n\n" "When print-precision is set to #f (the default),\nwrite, put-datum, pretty-print, and the\nformat \"~s\" directive do not include the\nvertical-bar \"mantissa-width\" syntax after each floating-point\nnumber.\nWhen set to a nonnegative exact integer, the mantissa width is\nincluded, as per the precision argument to\nnumber->string.\n\n") ("io:s131" "\n\n\nthread parameter: print-unicode\n\nlibraries: (chezscheme)\n\n" "When print-unicode is set to #f,\nwrite, put-datum, pretty-print, and the\nformat \"~s\" directive display Unicode characters\nwith encodings 8016 (128) and above that appear \nwithin character objects, symbols, and strings\nusing hexadecimal character escapes.\nWhen set to a true value (the default), they are displayed like\nother printing characters, as if by put-char.\n\n" "\n\n" "(format \"~s\" #\\x3bb) --> \"#\\\\math/csug/3.gif\"\n\n(parameterize ([print-unicode #f])\n\n  (format \"~s\" #\\x3bb)) --> \"#\\\\x3BB\"\n") ("io:s133" "\n\n\nprocedure: (fasl-write obj binary-output-port)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "fasl-write writes the fasl representation of obj to\nbinary-output-port.\nAn exception is raised with condition-type &assertion if\nobj or any portion of obj has no external fasl representation,\ne.g., if obj is or contains a procedure.\n\n" "\nThe fasl representation of obj is compressed if the parameter\nfasl-compressed, described below, is set to #t,\nits default value.\nFor this reason, binary-output-port generally should not be opened\nwith the compressed option.\nA warning is issued (an exception with condition type &warning\nis raised) on the first attempt to write fasl objects to or read\nfasl objects from a compressed file.\n\n" "\n\n" "(define bop (open-file-output-port \"tmp.fsl\"))\n\n(fasl-write '(a b c) bop)\n\n(close-port bop)\n\n\n(define bip (open-file-input-port \"tmp.fsl\"))\n\n(fasl-read bip) --> (a b c)\n\n(fasl-read bip) --> #!eof\n\n(close-port bip)\n") ("io:s134" "\n\nprocedure: (fasl-read binary-input-port)\n\n\nprocedure: (fasl-read binary-input-port situation)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "If present, situation must be one of the symbols load,\nvisit, or revisit.\nIt defaults to load.\n\n" "\nfasl-read reads one object from\nbinary-input-port, which must be positioned at the\nfront of an object written in fasl format.\nfasl-read returns the eof object if the file is positioned\nat the end of file.\nIf the situation is visit, fasl-read skips over \nany revisit (run-time-only) objects, and\nif the situation is revisit, fasl-read skips over \nany visit (compile-time-only) objects.\nIt doesn't skip any if the situation is load.\nSimilarly, objects marked as both visit and revisit (e.g., object code\ncorresponding to source code within an eval-when form with\nsituation load or situations visit and revisit)\nare never skipped.\n\n" "\nfasl-read automatically decompresses the representation\nof each fasl object written in compressed format by fasl-write.\nThus, binary-input-port generally should not be opened with\nthe compressed option.\nA warning is issued (an exception with condition type &warning\nis raised) on the first attempt to write fasl objects to or read\nfasl objects from a compressed file.\n\n" "\n\n" "(define bop (open-file-output-port \"tmp.fsl\"))\n\n(fasl-write '(a b c) bop)\n\n(close-port bop)\n\n\n(define bip (open-file-input-port \"tmp.fsl\"))\n\n(fasl-read bip) --> (a b c)\n\n(fasl-read bip) --> #!eof\n\n(close-port bip)\n") ("io:s135" "\n\nthread parameter: fasl-compressed\n\nlibraries: (chezscheme)\n\n" "When this parameter is set to its default value, #t,\nfasl-write compresses the representation of each object\nas it writes it, often resulting in substantially smaller output\nbut possibly taking more time to write and read.\nThe compression format and level are determined by the\ncompress-format\nand\ncompress-level\nparameters.\n\n\n") ("io:s138" "\n\n\nprocedure: (fasl-file ifn ofn)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "ifn and ofn must be strings.\nfasl-file may be used to convert a file in human-readable\nformat into an equivalent\nfile written in fasl format.\nfasl-file reads each object in turn from the file named by\nifn and writes the fasl format for the object onto the file\nnamed by ofn.\nIf the file named by ofn already exists, it is replaced.\n\n\n") ("io:s139" "\n\n\nglobal parameter: current-directory\n\n\nglobal parameter: cd\n\nlibraries: (chezscheme)\n\n" "When invoked without arguments, current-directory returns a string\nrepresenting the current working directory.\nOtherwise, the current working directory is changed to the directory\nspecified by the argument, which must be a string representing a valid\ndirectory pathname.\n\n" "\ncd is bound to the same parameter.\n\n") ("io:s140" "\n\n\nprocedure: (directory-list path)\n\nreturns: a list of file names\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nThe return value is a list of strings representing the names of\nfiles found in the directory named by path.\ndirectory-list raises an exception with condition\ntype &i/o-filename if path does not name a directory\nor if the process cannot list the directory.\n\n") ("io:s141" "\n\n\nprocedure: (file-exists? path)\n\n\nprocedure: (file-exists? path follow?)\n\nreturns: #t if the file named by path exists, #f otherwise\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nIf the optional follow? argument is true (the default),\nfile-exists? follows symbolic links; otherwise it does not.\nThus, file-exists? will return #f when handed the\npathname of a broken symbolic link unless follow? is provided\nand is #f.\n\n" "\nThe Revised6 Report file-exists? does not accept the\noptional follow? argument.\nWhether it follows symbolic links is unspecified.\n\n") ("io:s142" "\n\n\nprocedure: (file-regular? path)\n\n\nprocedure: (file-regular? path follow?)\n\nreturns: #t if the file named by path is a regular file, #f otherwise\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nIf the optional follow? argument is true (the default),\nfile-regular? follows symbolic links; otherwise it does not.\n\n") ("io:s143" "\n\n\nprocedure: (file-directory? path)\n\n\nprocedure: (file-directory? path follow?)\n\nreturns: #t if the file named by path is a directory, #f otherwise\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nIf the optional follow? argument is true (the default),\nthis procedure follows symbolic links; otherwise it does not.\n\n") ("io:s144" "\n\n\nprocedure: (file-symbolic-link? path)\n\nreturns: #t if the file named by path is a symbolic link, #f otherwise\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nfile-symbolic-link? never follows symbolic links in making its\ndetermination.\n\n") ("io:s145" "\n\n\nprocedure: (file-access-time path/port)\n\n\nprocedure: (file-access-time path/port follow?)\n\nreturns: the access time of the specified file\n\n\nprocedure: (file-change-time path/port)\n\n\nprocedure: (file-change-time path/port follow?)\n\nreturns: the change time of the specified file\n\n\nprocedure: (file-modification-time path/port)\n\n\nprocedure: (file-modification-time path/port follow?)\n\nreturns: the modification time of the specified file\n\nlibraries: (chezscheme)\n\n" "path/port must be a string or port.\nIf path/port is a string, the time returned is for the file named\nby the string, and the optional follow? argument determines whether\nsymbolic links are followed.\nIf follow? is true (the default),\nthis procedure follows symbolic links; otherwise it does not.\nIf path/port is a port, it must be a file port, and the time returned\nis for the associated file.\nIn this case, follow? is ignored.\n\n" "\nThe returned times are represented as time objects\n(Section 12.10).\n\n\n") ("io:s146" "\n\n\nprocedure: (mkdir path)\n\n\nprocedure: (mkdir path mode)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nmode must be a fixnum.\n\n" "\nmkdir creates a directory with the name given by path.\nAll path path components leading up to the last must already\nexist.\nIf the optional mode argument is present, it overrides the default\npermissions for the new directory.\nUnder Windows, the mode argument is ignored.\n\n" "\nmkdir raises an exception with condition\ntype &i/o-filename if the directory cannot be created.\n\n\n") ("io:s147" "\n\n\nprocedure: (delete-file path)\n\n\nprocedure: (delete-file path error?)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "path must be a string.\ndelete-file removes the file named by path.\nIf the optional error? argument is #f (the default),\ndelete-file returns a boolean value: #t if the\noperation is successful and #f if it is not.\nOtherwise, delete-file returns an unspecified value if the\noperation is successful and raises an exception with condition\ntype &i/o-filename if it is not.\n\n" "\nThe Revised6 Report delete-file does not accept the\noptional error? argument but behaves as if error?\nis true.\n\n") ("io:s148" "\n\n\nprocedure: (delete-directory path)\n\n\nprocedure: (delete-directory path error?)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "path must be a string.\ndelete-directory removes the directory named by path.\nIf the optional error? argument is #f (the default),\ndelete-directory returns a boolean value: #t if the\noperation is successful and #f if it is not.\nOtherwise, delete-directory returns an unspecified value if the\noperation is successful and raises an exception with condition\ntype &i/o-filename if it is not.\nThe behavior is unspecified if the directory is not empty, but on\nmost systems the operations will not succeed.\n\n") ("io:s149" "\n\n\nprocedure: (rename-file old-pathname new-pathname)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "old-pathname and new-pathname must be strings.\nrename-file changes the name of the file named by old-pathname\nto new-pathname.\nIf the file does not exist or cannot be renamed,\nan exception is raised with condition type &i/o-filename.\n\n") ("io:s150" "\n\n\nprocedure: (chmod path mode)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nmode must be a fixnum.\n\n" "\nchmod sets the permissions on the file named by\npath to mode.\nBits 0, 1, and 2 of mode are the execute, write, and read permission bits\nfor users other than the file's owner who are not in the file's group.\nBits 3-5 are the execute, write, and read permission bits for users other\nthan the file's owner but in the file's group.\nBits 6-8 are the execute, write, and read permission bits\nfor the file's owner.\nBits 7-9 are the Unix sticky, set-group-id, and set-user-id bits.\nUnder Windows, all but the user \"write\" bit are ignored.\nIf the file does not exist or the permissions cannot be changed,\nan exception is raised with condition type &i/o-filename.\n\n") ("io:s151" "\n\n\nprocedure: (get-mode path)\n\n\nprocedure: (get-mode path follow?)\n\nreturns: the current permissions mode for path\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nget-mode retrieves the permissions on the file named by\npath and returns them as a fixnum in the same form as the mode\nargument to chmod.\nIf the optional follow? argument is true (the default),\nthis procedure follows symbolic links; otherwise it does not.\n\n\n") ("io:s152" "\n\n\nprocedure: (directory-separator? char)\n\nreturns: #t if char is a directory separator, #f otherwise\n\nlibraries: (chezscheme)\n\n" "The character #\\/ is a directory separator on all\ncurrent machine types, and #\\\\ is a directory separator\nunder Windows.\n\n") ("io:s153" "\n\n\nprocedure: (directory-separator)\n\nreturns: the preferred directory separator\n\nlibraries: (chezscheme)\n\n" "The preferred directory separator is #\\\\ for Windows and\n#\\/ for other systems.\n\n") ("io:s154" "\n\n\nprocedure: (path-first path)\n\n\nprocedure: (path-rest path)\n\n\nprocedure: (path-last path)\n\n\nprocedure: (path-parent path)\n\n\nprocedure: (path-extension path)\n\n\nprocedure: (path-root path)\n\nreturns: the specified component of path\n\n\nprocedure: (path-absolute? path)\n\nreturns: #t if path is absolute, otherwise #f\n\nlibraries: (chezscheme)\n\n" "path must be a string.\nThe return value is also a (possibly empty) string.\n\n" "\nThe path first component is the first directory in the path, or the\nempty string if the path consists only of a single filename.\nThe path rest component is the portion of the path that does not\ninclude the path first component or the directory separator (if\nany) that separates it from the rest of the path.\nThe path last component is the last (filename) portion of path.\nThe path parent component is the portion of path that does not\ninclude the path last component, if any, or the directory separator that\nseparates it from the rest of the path.\n\n" "\nIf the first component of the path names a root directory (including drives\nand shares under Windows), home directory\n(e.g., ~/abc or ~user/abc), \nthe current directory (.), or the parent directory\n(..), path-first returns that component.\nFor paths that consist only of such a directory,\nboth path-first and path-parent act as\nidentity procedures, while path-rest and path-last\nreturn the empty string.\n\n" "\nThe path extension component is the portion of path that follows\nthe last dot (period) in the last component of a path name.\nThe path root component is the portion of path that does not\ninclude the extension, if any, or the dot that precedes it.\n\n" "\nIf the first component names a root directory (including drives\nand shares under Windows) or home directory,\npath-absolute? returns #t.\nOtherwise, path-absolute? returns #f. \n\n" "\nThe tables below identify the components for several example paths,\nwith underscores representing empty strings.\n\n" "\nleft\npath               left abs         left first              left rest               left parent             left last               left root               left ext        left\na         left #f left _         left a         left _         left a         left a         left _ left\na/        left #f left a         left _         left a         left _         left a/        left _ left\na/b       left #f left a         left b         left a         left b         left a/b       left _ left\na/b.c     left #f left a         left b.c       left a         left b.c       left a/b       left c left\n/         left #t left /         left _         left /         left _         left /         left _ left\n/a/b.c    left #t left /         left a/b.c     left /a        left b.c       left /a/b      left c left\n~/a/b.c   left #t left ~         left a/b.c     left ~/a       left b.c       left ~/a/b     left c left\n~u/a/b.c  left #t left ~u        left a/b.c     left ~u/a      left b.c       left ~u/a/b    left c left\n../..     left #f left ..        left ..        left ..        left ..        left ../..     left _ left\n\n\n" "\nThe second table shows the components when Windows drives and shares\nare involved.\n\n" "\nleft\npath               left abs         left first              left rest               left parent             left last               left root               left ext       left\nc:        left #f left c:        left _         left c:        left _         left c:        left _ left\nc:/       left #t left c:/       left _         left c:/       left _         left c:/       left _ left\nc:a/b     left #f left c:        left a/b       left c:a       left b         left c:a/b     left _ left\n//s/a/b.c left #t left //s       left a/b.c     left //s/a     left b.c       left //s/a/b   left c left\n//s.com   left #t left //s.com   left _         left //s.com   left _         left //s.com   left _ left\n\n\n" "\nThe following procedure can be used to reproduce the tables above.\n\n" "\n\n" "(define print-table\n\n  (lambda path*\n\n    (define print-row\n\n      (lambda (abs? path first rest parent last root extension)\n\n        (printf \"~a~11t~a~17t~a~28t~a~39t~a~50t~a~61t~a~73t~a\\n\"\n\n          abs? path first rest parent last root extension)))\n\n    (print-row \"path\" \"abs\" \"first\" \"rest\" \"parent\" \"last\" \"root\" \"ext\")\n\n    (for-each\n\n      (lambda (path)\n\n        (define uscore (lambda (s) (if (eqv? s \"\") \"_\" s)))\n\n        (apply print-row path\n\n          (map (lambda (s) (if (eqv? s \"\") \"_\" s))\n\n               (list (path-absolute? path) (path-first path)\n\n                 (path-rest path) (path-parent path) (path-last path)\n\n                 (path-root path) (path-extension path)))))\n\n      path*)))\n" "For example, the first table can be produced with:\n\n" "\n\n" "(print-table \"a\" \"a/\" \"a/b\" \"a/b.c\" \"/\" \"/a/b.c\" \"~/a/b.c\"\n\n  \"~u/a/b.c\" \"../..\")\n" "while the second can be produced (under Windows) with:\n\n" "\n\n" "(print-table \"c:\" \"c:/\" \"c:a/b\" \"//s/a/b.c\" \"//s.com\")\n") ("threads:s2" "\n\n\nprocedure: (fork-thread thunk)\n\nreturns: a thread object\n\nlibraries: (chezscheme)\n\n" "thunk must be a procedure that accepts zero arguments.\n\n" "\nfork-thread invokes thunk in a new thread and returns\na thread object.\n\n" "\nNothing can be done with the thread object returned by\nfork-thread, other than to print it.\n\n" "\nThreads created by foreign code using some means other than\nfork-thread must call Sactivate_thread\n(Section 4.8) before touching any Scheme data\nor calling any Scheme procedures.\n\n") ("threads:s3" "\n\n\nprocedure: (thread? obj)\n\nreturns: #t if obj is a thread object, #f otherwise\n\nlibraries: (chezscheme)\n\n") ("threads:s4" "\n\nprocedure: (get-thread-id)\n\nreturns: the thread id of the current thread\n\nlibraries: (chezscheme)\n\n" "The thread id is a thread number assigned by thread id, and has no\nrelationship to the process id returned by\nget-process-id, which is the same\nin all threads.\n\n\n") ("threads:s6" "\n\n\nprocedure: (make-mutex)\n\n\nprocedure: (make-mutex name)\n\nreturns: a new mutex object\n\nlibraries: (chezscheme)\n\n" "name, if supplied, must be a symbol which identifies the mutex, or\n#f for no name. The name is printed every time the mutex is\nprinted, which is useful for debugging.\n\n") ("threads:s7" "\n\n\nprocedure: (mutex? obj)\n\nreturns: #t if obj is a mutex, #f otherwise\n\nlibraries: (chezscheme)\n\n") ("threads:s8" "\n\nprocedure: (mutex-acquire mutex)\n\n\nprocedure: (mutex-acquire mutex block?)\n\nreturns: see below\n\nlibraries: (chezscheme)\n\n" "mutex must be a mutex.\n\n" "\nmutex-acquire acquires the mutex identified by mutex.\nThe optional boolean argument block? defaults to\n#t and specifies whether the thread should block\nwaiting for the mutex.\nIf block? is omitted or is true, the thread\nblocks until the mutex has been acquired, and an unspecified\nvalue is returned.\n\n" "\nIf block? is false and the mutex currently belongs\nto a different thread, the current thread does not block.\nInstead, mutex-acquire returns\nimmediately with the value #f to\nindicate that the mutex is not available.\nIf block? is false and the mutex is successfully\nacquired, mutex-acquire returns #t.\n\n" "\nMutexes are recursive in Posix threads terminology, which\nmeans that the calling thread can use mutex-acquire to\n(re)acquire a mutex it already has.\nIn this case, an equal number of mutex-release calls\nis necessary to release the mutex.\n\n") ("threads:s9" "\n\n\nprocedure: (mutex-release mutex)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "mutex must be a mutex.\n\n" "\nmutex-release releases the mutex identified by mutex.\nUnpredictable behavior results if the mutex is not owned by the\ncalling thread.\n\n") ("threads:s10" "\n\n\nsyntax: (with-mutex mutex body1 body2 ...)\n\nreturns: the values of the body body1 body2 ...\n\nlibraries: (chezscheme)\n\n" "with-mutex evaluates the expression mutex, which must\nevaluate to a mutex, acquires the mutex, evaluates the body\nbody1 body2 ..., and releases the mutex.\nThe mutex is released whether the body returns normally or\nvia a control operation (that is, throw to a continuation, perhaps because\nof an error) that results in\na nonlocal exit from the with-mutex form.\nIf control subsequently returns to the body via a\ncontinuation invocation, the mutex is reacquired.\n\n" "\nUsing with-mutex is generally more convenient and safer than using\nmutex-acquire and mutex-release directly.\n\n") ("threads:s11" "\n\n\nprocedure: (mutex-name mutex)\n\nreturns: the name associated with mutex, if any; otherwise #f\n\nlibraries: (chezscheme)\n\n" "mutex must be a mutex.\n\n") ("threads:s12" "\n\n\nprocedure: (make-condition)\n\n\nprocedure: (make-condition name)\n\nreturns: a new condition object\n\nlibraries: (chezscheme)\n\n" "name, if supplied, must be a symbol which identifies the condition\nobject, or #f for no name. The name is printed every time the\ncondition is printed, which is useful for debugging.\n\n") ("threads:s13" "\n\n\nprocedure: (thread-condition? obj)\n\nreturns: #t if obj is a condition object, #f otherwise\n\nlibraries: (chezscheme)\n\n") ("threads:s14" "\n\nprocedure: (condition-wait cond mutex)\n\n\nprocedure: (condition-wait cond mutex timeout)\n\nreturns: #t if the calling thread was awakened by the condition, #f if the calling thread timed out waiting\n\nlibraries: (chezscheme)\n\n" "cond must be a condition object, and\nmutex must be a mutex.\nThe optional argument timeout is a time record of type\ntime-duration or time-utc, or #f for no\ntimeout. It defaults to #f.\n\n" "\ncondition-wait waits up to the specified timeout for\nthe condition identified by the condition object cond.\nThe calling thread must have acquired the mutex identified by the mutex\nmutex at the time condition-wait is\ncalled.\nmutex is released as a side effect of the call to\ncondition-wait.\nWhen a thread is later released from the condition variable by one of\nthe procedures described below or the timeout expires, mutex is\nreacquired and condition-wait returns.\n\n\n") ("threads:s15" "\n\n\nprocedure: (condition-signal cond)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "cond must be a condition object.\n\n" "\ncondition-signal releases one of the threads waiting for the\ncondition identified by cond.\n\n\n") ("threads:s16" "\n\n\nprocedure: (condition-broadcast cond)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "cond must be a condition object.\n\n" "\ncondition-broadcast releases all of the threads waiting for the\ncondition identified by cond.\n\n") ("threads:s17" "\n\n\nprocedure: (condition-name condition)\n\nreturns: the name associated with condition, if any; otherwise #f\n\nlibraries: (chezscheme)\n\n" "condition must be a condition.\n\n") ("threads:s19" "\n\nsyntax: (ftype-init-lock! ftype-name (a ...) fptr-expr)\n\n\nsyntax: (ftype-init-lock! ftype-name (a ...) fptr-expr index)\n\nreturns: unspecified\n\n\nsyntax: (ftype-lock! ftype-name (a ...) fptr-expr)\n\n\nsyntax: (ftype-lock! ftype-name (a ...) fptr-expr index)\n\nreturns: #t if the lock is not already locked, #f otherwise\n\n\nsyntax: (ftype-spin-lock! ftype-name (a ...) fptr-expr)\n\n\nsyntax: (ftype-spin-lock! ftype-name (a ...) fptr-expr index)\n\nreturns: unspecified\n\n\nsyntax: (ftype-unlock! ftype-name (a ...) fptr-expr)\n\n\nsyntax: (ftype-unlock! ftype-name (a ...) fptr-expr index)\n\nreturns: unspecified\n\nlibraries: (chezscheme)\n\n" "Each of these has a syntax like and behaves similarly to\nftype-set! (page 86), though with an implicit\nval-expr.\nIn particular, the restrictions on and handling of fptr-expr\nand the accessors a ... is similar, with one important\nrestriction: the field specified by the last accessor, upon which\nthe form operates,  must be a word-size integer, i.e., an\niptr, uptr, or the equivalent, with the native\nendianness.\n\n" "\nftype-init-lock! should be used to initialize the lock prior\nto the use of any of the other operators; if this is not done, the\nbehavior of the other operators is undefined.\n\n" "\nftype-lock! can be used to lock the lock.\nIf it finds the lock unlocked at the time of the operation, it locks\nthe lock and returns #t; if it finds the lock already locked,\nit returns #f without changing the lock.\n\n" "\nftype-spin-lock! can also be used to lock the lock.\nIf it finds the lock unlocked at the time of the operation, it locks the\nlock and returns; if it finds the lock already locked, it waits until\nthe lock is unlocked, then locks the lock and returns.\nIf no other thread or process unlocks the lock, the operation does\nnot return and cannot be interrupted by normal means, including by the\nstorage manager for the purpose of initiating a garbage collection.\nThere are also no guarantees of fairness, so a process might hang\nindefinitely even if other processes are actively locking and unlocking\nthe lock.\n\n" "\nftype-unlock! is used to unlock a lock.\nIf it finds the lock locked, it unlocks the lock and returns.\nOtherwise, it returns without changing the lock.\n\n") ("threads:s20" "\n\n\nsyntax: (ftype-locked-incr! ftype-name (a ...) fptr-expr)\n\n\nsyntax: (ftype-locked-incr! ftype-name (a ...) fptr-expr index)\n\nreturns: #t if the updated value is 0, #f otherwise\n\n\nsyntax: (ftype-locked-decr! ftype-name (a ...) fptr-expr)\n\n\nsyntax: (ftype-locked-decr! ftype-name (a ...) fptr-expr index)\n\nreturns: #t if the updated value is 0, #f otherwise\n\nlibraries: (chezscheme)\n\n" "Each of these has a syntax like and behaves similarly to\nftype-set! (page 86), though with an implicit\nval-expr.\nIn particular, the restrictions on and handling of fptr-expr\nand the accessors a ... is similar, with one important\nrestriction: the field specified by the last accessor, upon which\nthe form operates,  must be a word-size integer, i.e., an\niptr, uptr, or the equivalent, with the native\nendianness.\n\n" "\nftype-locked-incr! atomically reads the value of the specified\nfield, adds 1 to the value, and writes the new value back into the\nfield.\nSimilarly, ftype-locked-decr! atomically reads the value of\nthe specified field, subtracts 1 from the value, and writes the new\nvalue back into the field.\nBoth return #t if the new value is 0, otherwise #f.\n\n") ("threads:s25" "\n\n\nsyntax: (ftype-guardian ftype-name)\n\nreturns: a new ftype guardian\n\nlibraries: (chezscheme)\n\n" "ftype-name must name an ftype.\nThe first base field of the ftype (or one of the first base fields\nin the case of unions) must be a word-sized integer (iptr or uptr)\nwith native endianness.\nThis field is assumed to hold a reference count.\n\n" "\nThe return value is a new ftype guardian g, with which\nftype-pointers of type ftype-name (or some subtype of\nftype-name) can be registered.\nAn ftype pointer is registered with g by invoking g\nwith the ftype pointer as an argument.\n\n" "\nAn ftype guardian does not automatically protect from collection\nthe ftype pointers registered with it,  as a normal guardian would\ndo.\nInstead, for each registered ftype pointer that becomes inaccessible\nvia normal (non-weak, non-guardian pointers), the guardian decrements\nthe reference count of the object to which the ftype pointer points.\nIf the resulting reference-count value is zero, the ftype pointer\nis preserved and can be retrieved from the guardian.\nIf the resulting reference-count value is non-zero, however, the\nftype pointer is not preserved.\nObjects retrieved from an ftype guardian (by calling it without\narguments) are guaranteed to have zero reference counts, assuming\nreference counts are maintained properly by code outside the\ncollector.\n\n" "\nThe collector decrements the reference count using the equivalent\nof ftype-locked-decr!\nto support systems in which non-Scheme objects are stored in memory\nshared by multiple processes.\nIn such systems, programs should themselves use\nftype-locked-incr! and\nftype-locked-decr! or non-Scheme equivalents (e.g., the C\nLOCKED_INCR and\nLOCKED_DECR macros in scheme.h,\nwhich are described in Section 4.8) to maintain\nreference counts.\n\n" "\nThe following example defines a simple ftype and an allocator for\nobjects of that ftype that frees any objects of that ftype that were\npreviously allocated and no longer accessible.\n\n" "\n\n" "(module (A make-A free-dropped-As)\n\n  (define-ftype A\n\n    (struct\n\n      [refcount uptr]\n\n      [data int]))\n\n  (define g (ftype-guardian A))\n\n  (define free-dropped-As\n\n    (lambda ()\n\n      (let ([a (g)])\n\n        (when a\n\n          (printf \"freeing ~s\\n\" (ftype-ref A (data) a))\n\n          (foreign-free (ftype-pointer-address a))\n\n          (free-dropped-As)))))\n\n  (define make-A\n\n    (lambda (n)\n\n      (free-dropped-As)\n\n      (let ([a (make-ftype-pointer A (foreign-alloc (ftype-sizeof A)))])\n\n        (ftype-set! A (refcount) a 1)\n\n        (ftype-set! A (data) a n)\n\n        (g a)\n\n        a))))\n" "We can test this by allocating, dropping, and immediately collecting\nftype pointers to A.\n\n" "\n\n" "> (do ([i 10 (fx- i 1)])\n\n      ((fx= i 0))\n\n    (make-A i)\n\n    (collect))\n\nfreeing 10\n\nfreeing 9\n\nfreeing 8\n\nfreeing 7\n\nfreeing 6\n\nfreeing 5\n\nfreeing 4\n\nfreeing 3\n\nfreeing 2\n\n> (free-dropped-As)\n\nfreeing 1\n" "Objects guarded by an ftype guardian might contain pointers to other\nobjects whose reference counts should also be incremented upon\nallocation of the containing object and decremented upon freeing\nof the containing object.\n\n\n") ("threads:s30" "\n\n\nprocedure: (make-thread-parameter object)\n\n\nprocedure: (make-thread-parameter object procedure)\n\nreturns: a new thread parameter\n\nlibraries: (chezscheme)\n\n" "See Section 12.13 for a general\ndiscussion of parameters and the use of the optional second argument.\n\n" "\nWhen a thread parameter is created, a separate location is set aside\nin each current and future thread to hold the value of the parameter's\ninternal state variable.\n(This location may be eliminated by the storage manager when the\nparameter becomes inaccessible.)\nChanges to the thread parameter in one thread are not seen by any\nother thread.\n\n" "\nWhen a new thread is created (see fork-thread),\nthe current value (not location) of each\nthread parameter is inherited from the forking thread by the new thread.\nSimilarly, when a thread created by some other means is activated for the\nfirst time (see Sactivate_thread in\nSection 4.8), the current value (not location) of each\nthread parameter is inherited from the main (original) thread by the new\nthread.\n\n" "\nMost built-in parameters are thread parameters, but some are global.\nAll are marked as global or thread where they are defined.\nThere is no distinction between built-in global and thread parameters\nin the nonthreaded versions of the system.\n\n\n")) (tspl ("control:s1" "\n\n\nsyntax: (expr0 expr1 ...)\n\nreturns: values of applying the value of expr0 to the values of expr1 ...\n\n" "Procedure application is the most basic Scheme control structure.\nAny structured form without a syntax keyword in the first position is a\nprocedure application.\nThe expressions expr0 and expr1 ... are evaluated; each\nshould evaluate to a single value.\nAfter each of these expressions has been evaluated, the value of\nexpr0 is applied to the values of expr1 ....\nIf expr0 does not evaluate to a procedure, or if the procedure does not\naccept the number of arguments provided, an exception with condition type\n&assertion is raised.\n\n" "\nThe order in which the procedure and argument\nexpressions are evaluated is unspecified.\nIt may be left to right, right to left, or any other order.\nThe evaluation is guaranteed to be sequential, however: whatever order\nis chosen, each expression is fully evaluated before evaluation of\nthe next is started.\n\n" "\n\n" "(+ 3 4) --> 7\n\n\n((if (odd? 3) + -) 6 2) --> 8\n\n\n((lambda (x) x) 5) --> 5\n\n\n(let ([f (lambda (x) (+ x x))])\n\n  (f 8)) --> 16\n") ("control:s3" "desc:apply\n\n\nprocedure: (apply procedure obj ... list)\n\nreturns: the values of applying procedure to obj ... and\nthe elements of list\n\nlibraries: (rnrs base), (rnrs)\n\n" "apply invokes procedure, passing\nthe first obj as the first argument,\nthe second obj as the second argument, and\nso on for each object in obj ..., and passing the elements of\nlist in order as the remaining arguments.\nThus, procedure is called with as many arguments as there are\nobjs plus elements of list.\n\n" "\napply is useful when some or all of the arguments to be passed to\na procedure are in a list, since it frees the programmer from\nexplicitly destructuring the list.\n\n" "\n\n" "(apply + '(4 5)) --> 9\n\n\n(apply min '(6 8 3 2 5)) --> 2\n\n\n(apply min  5 1 3 '(6 8 3 2 5)) --> 1\n\n\n(apply vector 'a 'b '(c d e)) --> #(a b c d e)\n\n\n(define first\n\n  (lambda (ls)\n\n    (apply (lambda (x . y) x) ls)))\n\n(define rest\n\n  (lambda (ls)\n\n    (apply (lambda (x . y) y) ls)))\n\n(first '(a b c d)) --> a\n\n(rest '(a b c d)) --> (b c d)\n\n\n(apply append\n\n  '(1 2 3)\n\n  '((a b) (c d e) (f))) --> (1 2 3 a b c d e f)\n") ("control:s4" "\n\n\nsyntax: (begin expr1 expr2 ...)\n\nreturns: the values of the last subexpression\n\nlibraries: (rnrs base), (rnrs)\n\n" "The expressions expr1 expr2 ... are evaluated in sequence\nfrom left to right.\nbegin is used to sequence assignments,\ninput/output, or other operations that cause side effects.\n\n" "\n\n" "(define x 3)\n\n(begin\n\n  (set! x (+ x 1))\n\n  (+ x x)) --> 8\n" "A begin form may contain zero or more definitions in place of\nthe expressions expr1 expr2 ..., in which case\nit is considered to be a definition and may appear only where definitions\nare valid.\n\n" "\n\n" "(let ()\n\n  (begin (define x 3) (define y 4))\n\n  (+ x y)) --> 7\n" "This form of begin is primarily used by syntactic extensions\nthat must expand into multiple definitions.\n(See page 101.)\n\n" "\nThe bodies of many syntactic forms, including lambda, case-lambda, let,\nlet*, letrec, and letrec*, as well as the result clauses of cond,\ncase, and do, are treated as if they\nwere inside an implicit begin; i.e., the expressions\nmaking up the body or result clause are executed in sequence, with the values of the\nlast expression being returned.\n\n" "\n\n" "(define swap-pair!\n\n  (lambda (x)\n\n    (let ([temp (car x)])\n\n      (set-car! x (cdr x))\n\n      (set-cdr! x temp)\n\n      x)))\n\n(swap-pair! (cons 'a 'b)) --> (b . a)\n") ("control:s8" "\n\n\nsyntax: (if test consequent alternative)\n\n\n\nsyntax: (if test consequent)\n\nreturns: the values of consequent or alternative depending on the\nvalue of test\n\nlibraries: (rnrs base), (rnrs)\n\n" "The test, consequent, and alternative subforms must be\nexpressions.\nIf test evaluates to a true value (anything other than #f),\nconsequent is evaluated and its values are returned.\nOtherwise, alternative is evaluated and its values are returned.\nWith the second, \"one-armed,\" form, which has no alternative,\nthe result is unspecified if test evaluates to false.\n\n" "\n\n" "(let ([ls '(a b c)])\n\n  (if (null? ls)\n\n      '()\n\n      (cdr ls))) --> (b c)\n\n\n(let ([ls '()])\n\n  (if (null? ls)\n\n      '()\n\n      (cdr ls))) --> ()\n\n\n(let ([abs\n\n       (lambda (x)\n\n         (if (< x 0)\n\n             (- 0 x)\n\n             x))])\n\n  (abs -4)) --> 4\n\n\n(let ([x -4])\n\n  (if (< x 0)\n\n      (list 'minus (- 0 x))\n\n      (list 'plus 4))) --> (minus 4)\n") ("control:s10" "\n\nprocedure: (not obj)\n\nreturns: #t if obj is false, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "not is equivalent to (lambda (x) (if x #f #t)).\n\n" "\n\n" "(not #f) --> #t\n\n(not #t) --> #f\n\n(not '()) --> #f\n\n(not (< 4 5)) --> #f\n") ("control:s11" "\n\nsyntax: (and expr ...)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "If no subexpressions are present, the and form evaluates to #t.\nOtherwise, and evaluates each subexpression in sequence from left to right\nuntil only one subexpression remains or a subexpression returns #f.\nIf one subexpression remains, it is evaluated and its values are returned.\nIf a subexpression returns #f, and returns #f without\nevaluating the remaining subexpressions.\nA syntax definition of and appears on page 62.\n\n" "\n\n" "(let ([x 3])\n\n  (and (> x 2) (< x 4))) --> #t\n\n\n(let ([x 5])\n\n  (and (> x 2) (< x 4))) --> #f\n\n\n(and #f '(a b) '(c d)) --> #f\n\n(and '(a b) '(c d) '(e f)) --> (e f)\n") ("control:s12" "\n\nsyntax: (or expr ...)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "If no subexpressions are present, the or form evaluates to #f.\nOtherwise, or evaluates each subexpression in sequence from left to right\nuntil only one subexpression remains or a subexpression returns a value other\nthan #f.\nIf one subexpression remains, it is evaluated and its values are returned.\nIf a subexpression returns a value other than #f, or returns\nthat value without evaluating the remaining subexpressions.\nA syntax definition of or appears on page 63.\n\n" "\n\n" "(let ([x 3])\n\n  (or (< x 2) (> x 4))) --> #f\n\n\n(let ([x 5])\n\n  (or (< x 2) (> x 4))) --> #t\n\n\n(or #f '(a b) '(c d)) --> (a b)\n") ("control:s13" "\n\nsyntax: (cond clause1 clause2 ...)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "Each clause but the last must take one of the forms\nbelow.\n\n" "\n\n" "(test)\n\n(test expr1 expr2 ...)\n\n(test => expr)\n" "The last clause may be in any of the above forms, or it may be\nan \"else clause\" of the form\n\n" "\n\n" "(else expr1 expr2 ...)\n" "Each test is evaluated in order until one evaluates to a true\nvalue or until all of the tests have been evaluated.\nIf the first clause whose test evaluates to a true value is\nin the first form given above, the\nvalue of test is returned.\n\n" "\nIf the first clause whose test evaluates to a true value is\nin the second form given above, the\nexpressions expr1 expr2... are evaluated in\nsequence and the values of the last expression are returned.\n\n" "\nIf the first clause whose test evaluates to a true value is\nin the third form given above, the expression expr is\nevaluated.\nThe value should be a procedure of one argument, which is applied\nto the value of test.\nThe values of this application are returned.\n\n" "\nIf none of the tests evaluates to a true value and an else clause\nis present, the expressions expr1 expr2 ... of the else\nclause are evaluated in sequence and the values of the last expression\nare returned.\n\n" "\nIf none of the tests evaluates to a true value and no else clause\nis present, the value or values are unspecified.\n\n" "\nSee page 305 for a syntax definition of cond.\n\n" "\n\n" "(let ([x 0])\n\n  (cond\n\n    [(< x 0) (list 'minus (abs x))]\n\n    [(> x 0) (list 'plus x)]\n\n    [else (list 'zero x)])) --> (zero 0)\n\n\n(define select\n\n  (lambda (x)\n\n    (cond\n\n      [(not (symbol? x))]\n\n      [(assq x '((a . 1) (b . 2) (c . 3))) => cdr]\n\n      [else 0])))\n\n\n(select 3) --> #t\n\n(select 'b) --> 2\n\n(select 'e) --> 0\n") ("control:s16" "\n\nsyntax: else\n\n\n\nsyntax: =>\n\nlibraries: (rnrs base), (rnrs exceptions), (rnrs)\n\n" "These identifiers are auxiliary keywords for cond.\nBoth also serve as auxiliary keywords for guard, and\nelse also serves as an auxiliary keyword for case.\nIt is a syntax violation to reference these identifiers except in\ncontexts where they are recognized as auxiliary keywords.\n\n\n") ("control:s17" "\n\n\nsyntax: (when test-expr expr1 expr2 ...)\n\n\n\nsyntax: (unless test-expr expr1 expr2 ...)\n\nreturns: see below\n\nlibraries: (rnrs control), (rnrs)\n\n" "For when,\nif test-expr evaluates to a true value, the expressions\nexpr1 expr2 ... are evaluated in sequence,\nand the values of the last expression are returned.\nIf test-expr evaluates to false, none of the other expressions\nare evaluated, and the value or values of when are unspecified.\n\n" "\nFor unless,\nif test-expr evaluates to false, the expressions\nexpr1 expr2 ... are evaluated in sequence,\nand the values of the last expression are returned.\nIf test-expr evaluates to a true value, none of the other\nexpressions are evaluated, and the value or values of unless are unspecified.\n\n" "\nA when or unless expression is usually clearer than\nthe corresponding \"one-armed\" if expression.\n\n" "\n\n" "(let ([x -4] [sign 'plus])\n\n  (when (< x 0)\n\n    (set! x (- 0 x))\n\n    (set! sign 'minus))\n\n  (list sign x)) --> (minus 4)\n\n\n(define check-pair\n\n  (lambda (x)\n\n    (unless (pair? x)\n\n      (syntax-violation 'check-pair \"invalid argument\" x))\n\n    x))\n\n\n(check-pair '(a b c)) --> (a b c)\n" "when may be defined as follows:\n\n" "\n\n" "(define-syntax when\n\n  (syntax-rules ()\n\n    [(_ e0 e1 e2 ...)\n\n     (if e0 (begin e1 e2 ...))]))\n" "unless may be defined as follows:\n\n" "\n\n" "(define-syntax unless\n\n  (syntax-rules ()\n\n    [(_ e0 e1 e2 ...)\n\n     (if (not e0) (begin e1 e2 ...))]))\n" "or in terms of when as follows:\n\n" "\n\n" "(define-syntax unless\n\n  (syntax-rules ()\n\n    [(_ e0 e1 e2 ...)\n\n     (when (not e0) e1 e2 ...)]))\n") ("control:s18" "\n\nsyntax: (case expr0 clause1 clause2 ...)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "Each clause but the last must take the form\n\n" "\n\n" "((key ...) expr1 expr2 ...)\n" "where each key is a datum distinct from the other keys.\nThe last clause may be in the above form or it may be an\nelse clause of the form\n\n" "\n\n" "(else expr1 expr2 ...)\n" "expr0 is evaluated and the result is compared\n(using eqv?) against the keys of each clause in order.\nIf a clause containing a matching key is found, the\nexpressions expr1 expr2 ... are evaluated in sequence\nand the values of the last expression are returned.\n\n" "\nIf none of the clauses contains a matching key and an else clause\nis present, the expressions expr1 expr2 ... of the\nelse clause are evaluated in sequence and the values of the last\nexpression are returned.\n\n" "\nIf none of the clauses contains a matching key and no else clause\nis present, the value or values are unspecified.\n\n" "\nSee page 306 for a syntax definition of case.\n\n" "\n\n" "(let ([x 4] [y 5])\n\n  (case (+ x y)\n\n    [(1 3 5 7 9) 'odd]\n\n    [(0 2 4 6 8) 'even]\n\n    [else 'out-of-range])) --> odd\n") ("control:s20" "\n\n\nsyntax: (let name ((var expr) ...) body1 body2 ...)\n\nreturns: values of the final body expression\n\nlibraries: (rnrs base), (rnrs)\n\n" "This form of let, called named\nlet, is a general-purpose iteration and\nrecursion construct.\nIt is similar to the more common form of let\n(see Section 4.4) in the\nbinding of the variables var ... to the values of expr ... within\nthe body body1 body2 ..., which is processed and evaluated like\na lambda body.\nIn addition, the variable name is bound within the body to\na procedure that may be called to recur or iterate; the arguments to\nthe procedure become the new values of the variables var ....\n\n" "\nA named let expression of the form\n\n" "\n\n" "(let name ((var expr) ...)\n\n  body1 body2 ...)\n" "can be rewritten with letrec as follows.\n\n" "\n\n" "((letrec ((name (lambda (var ...) body1 body2 ...)))\n\n   name)\n\n expr ...)\n" "A syntax definition of let that implements this transformation\nand handles unnamed let as well\ncan be found on page 312.\n\n\n" "\nThe procedure divisors defined below uses named let to compute the\nnontrivial divisors of a nonnegative integer.\n\n" "\n\n" "(define divisors\n\n  (lambda (n)\n\n    (let f ([i 2])\n\n      (cond\n\n        [(>= i n) '()]\n\n        [(integer? (/ n i)) (cons i (f (+ i 1)))]\n\n        [else (f (+ i 1))]))))\n\n\n(divisors 5) --> ()\n\n(divisors 32) --> (2 4 8 16)\n" "The version above is non-tail-recursive when a divisor is found and\ntail-recursive when a divisor is not found.\nThe version below is fully tail-recursive.\nIt builds up the list in reverse order, but this is easy to remedy,\nif desired, by reversing the list on exit.\n\n" "\n\n" "(define divisors\n\n  (lambda (n)\n\n    (let f ([i 2] [ls '()])\n\n      (cond\n\n        [(>= i n) ls]\n\n        [(integer? (/ n i)) (f (+ i 1) (cons i ls))]\n\n        [else (f (+ i 1) ls)]))))\n") ("control:s25" "\n\nsyntax: (do ((var init update) ...) (test result ...) expr ...)\n\nreturns: the values of the last result expression\n\nlibraries: (rnrs control), (rnrs)\n\n" "do allows a common restricted form of iteration\nto be expressed succinctly.\nThe variables var ... are bound initially to the\nvalues of init ... and are rebound on each subsequent\niteration to the values of update ....\nThe expressions test, \nupdate ...,\nexpr ..., and\nresult ...\nare all within the scope of the bindings\nestablished for var ....\n\n" "\nOn each step, the test expression test is evaluated.\nIf the value of test is true, iteration ceases,\nthe expressions result ... are evaluated in\nsequence, and the values of the last expression are returned.\nIf no result expressions are present, the value or values of the do\nexpression are unspecified.\n\n" "\nIf the value of test is false, the expressions expr ...\nare evaluated in sequence, the expressions update ... are\nevaluated, new bindings for var ... to the values of\nupdate ... are created, and iteration continues.\n\n" "\nThe expressions expr ... are evaluated only for effect\nand are often omitted entirely.\nAny update expression may be omitted, in which case the effect is\nthe same as if the update were simply the corresponding\nvar.\n\n" "\nAlthough looping constructs in most languages require that the loop\niterands be updated via assignment, do requires the loop\niterands var ... to be updated via rebinding.\nIn fact, no side effects are involved in the evaluation of a\ndo expression unless they are performed explicitly by its\nsubexpressions.\n\n" "\nSee page 313 for a syntax definition of do.\n\n" "\nThe definitions of factorial and fibonacci below are\nstraightforward translations of the tail-recursive named-let versions\ngiven in Section 3.2.\n\n" "\n\n" "(define factorial\n\n  (lambda (n)\n\n    (do ([i n (- i 1)] [a 1 (* a i)])\n\n        ((zero? i) a))))\n\n\n(factorial 10) --> 3628800\n\n\n(define fibonacci\n\n  (lambda (n)\n\n    (if (= n 0)\n\n        0\n\n        (do ([i n (- i 1)] [a1 1 (+ a1 a2)] [a2 0 a1])\n\n            ((= i 1) a1)))))\n\n\n(fibonacci 6) --> 8\n" "The definition of divisors below is\nsimilar to the tail-recursive definition of divisors given\nwith the description of named let above.\n\n" "\n\n" "(define divisors\n\n  (lambda (n)\n\n    (do ([i 2 (+ i 1)]\n\n         [ls '()\n\n             (if (integer? (/ n i))\n\n                 (cons i ls)\n\n                 ls)])\n\n        ((>= i n) ls))))\n" "The definition of scale-vector! below, which scales each\nelement of a vector v by a constant k, demonstrates a nonempty\ndo body.\n\n" "\n\n" "(define scale-vector!\n\n  (lambda (v k)\n\n    (let ([n (vector-length v)])\n\n      (do ([i 0 (+ i 1)])\n\n          ((= i n))\n\n        (vector-set! v i (* (vector-ref v i) k))))))\n\n\n(define vec (vector 1 2 3 4 5))\n\n(scale-vector! vec 2)\n\nvec --> #(2 4 6 8 10)\n") ("control:s30" "\n\n\nprocedure: (map procedure list1 list2 ...)\n\nreturns: list of results\n\nlibraries: (rnrs base), (rnrs)\n\n" "map applies procedure to corresponding\nelements of the lists list1 list2 ... and returns a\nlist of the resulting values.\nThe lists list1 list2 ... must be of the same length.\nprocedure should accept as many arguments as there are lists, should\nreturn a single value, and should not mutate the list arguments.\n\n" "\n\n" "(map abs '(1 -2 3 -4 5 -6)) --> (1 2 3 4 5 6)\n\n\n(map (lambda (x y) (* x y))\n\n     '(1 2 3 4)\n\n     '(8 7 6 5)) --> (8 14 18 20)\n" "While the order in which the applications themselves occur is not\nspecified, the order of the values in the output list is the same\nas that of the corresponding values in the input lists.\n\n" "\nmap might be defined as follows.\n\n" "\n\n" "(define map\n\n  (lambda (f ls . more)\n\n    (if (null? more)\n\n        (let map1 ([ls ls])\n\n          (if (null? ls)\n\n              '()\n\n              (cons (f (car ls))\n\n                    (map1 (cdr ls)))))\n\n        (let map-more ([ls ls] [more more])\n\n          (if (null? ls)\n\n              '()\n\n              (cons\n\n                (apply f (car ls) (map car more))\n\n                (map-more (cdr ls) (map cdr more))))))))\n" "No error checking is done by this version of map; f is assumed to\nbe a procedure and the other arguments are assumed to be proper lists\nof the same length.\nAn interesting feature of this definition is that map uses itself\nto pull out the cars and cdrs of the list of input lists; this works\nbecause of the special treatment of the single-list case.\n\n\n") ("control:s33" "\ndesc:for-each\n\n\nprocedure: (for-each procedure list1 list2 ...)\n\nreturns: unspecified\n\nlibraries: (rnrs base), (rnrs)\n\n" "for-each is similar to map except that\nfor-each does\nnot create and return a list of the resulting values, and for-each\nguarantees to perform the applications in sequence over the elements from\nleft to right.\nprocedure should accept as many arguments as there are lists\nand should not mutate the list arguments.\nfor-each may be defined without error checks as follows.\n\n" "\n\n" "(define for-each\n\n  (lambda (f ls . more)\n\n    (do ([ls ls (cdr ls)] [more more (map cdr more)])\n\n        ((null? ls))\n\n      (apply f (car ls) (map car more)))))\n\n\n(let ([same-count 0])\n\n  (for-each\n\n    (lambda (x y)\n\n      (when (= x y)\n\n        (set! same-count (+ same-count 1))))\n\n    '(1 2 3 4 5 6)\n\n    '(2 3 3 4 7 6))\n\n  same-count) --> 3\n") ("control:s36" "\n\nprocedure: (exists procedure list1 list2 ...)\n\nreturns: see below\n\nlibraries: (rnrs lists), (rnrs)\n\n" "The lists list1 list2 ... must be of the same length.\nprocedure should accept as many arguments as there are lists and should\nnot mutate the list arguments.\nIf the lists are empty, exists returns #f.\nOtherwise, exists applies procedure to corresponding elements\nof the lists list1 list2 ... in sequence until either the\nlists each have only one element or procedure returns a true value t.\nIn the former case, exists tail-calls procedure, applying it to the\nremaining element of each list.\nIn the latter case, exists returns t.\n\n" "\n\n" "(exists symbol? '(1.0 #\\a \"hi\" '())) --> #f\n\n\n(exists member\n\n        '(a b c)\n\n        '((c b) (b a) (a c))) --> (b a)\n\n\n(exists (lambda (x y z) (= (+ x y) z))\n\n        '(1 2 3 4)\n\n        '(1.2 2.3 3.4 4.5)\n\n        '(2.3 4.4 6.4 8.6)) --> #t\n" "exists may be defined (somewhat inefficiently and without error\nchecks) as follows:\n\n" "\n\n" "(define exists\n\n  (lambda (f ls . more)\n\n    (and (not (null? ls))\n\n      (let exists ([x (car ls)] [ls (cdr ls)] [more more])\n\n        (if (null? ls)\n\n            (apply f x (map car more))\n\n            (or (apply f x (map car more))\n\n                (exists (car ls) (cdr ls) (map cdr more))))))))\n") ("control:s37" "\n\nprocedure: (for-all procedure list1 list2 ...)\n\nreturns: see below\n\nlibraries: (rnrs lists), (rnrs)\n\n" "The lists list1 list2 ... must be of the same length.\nprocedure should accept as many arguments as there are lists and should\nnot mutate the list arguments.\nIf the lists are empty, for-all returns #t.\nOtherwise, for-all applies procedure to corresponding elements\nof the lists list1 list2 ... in sequence until either the\nlists each have only one element left or procedure returns #f.\nIn the former case, for-all tail-calls procedure, applying it to the\nremaining element of each list.\nIn the latter case, for-all returns #f.\n\n" "\n\n" "(for-all symbol? '(a b c d)) --> #t\n\n\n(for-all =\n\n         '(1 2 3 4)\n\n         '(1.0 2.0 3.0 4.0)) --> #t\n\n\n(for-all (lambda (x y z) (= (+ x y) z))\n\n         '(1 2 3 4)\n\n         '(1.2 2.3 3.4 4.5)\n\n         '(2.2 4.3 6.5 8.5)) --> #f\n" "for-all may be defined (somewhat inefficiently and without error\nchecks) as follows:\n\n" "\n\n" "(define for-all\n\n  (lambda (f ls . more)\n\n    (or (null? ls)\n\n      (let for-all ([x (car ls)] [ls (cdr ls)] [more more])\n\n        (if (null? ls)\n\n            (apply f x (map car more))\n\n            (and (apply f x (map car more))\n\n                 (for-all (car ls) (cdr ls) (map cdr more))))))))\n") ("control:s38" "\n\nprocedure: (fold-left procedure obj list1 list2 ...)\n\nreturns: see below\n\nlibraries: (rnrs lists), (rnrs)\n\n" "The list arguments should all have the same length.\nprocedure should accept one more argument than the number of list\narguments and return a single value.\nIt should not mutate the list arguments.\n\n" "\nfold-left returns obj if the list arguments are empty.\nIf they are not empty, fold-left applies procedure to\nobj and the cars of list1 list2 ...,\nthen recurs with\nthe value returned by procedure in place of obj and the cdr of\neach list in place of the list.\n\n" "\n\n" "(fold-left cons '() '(1 2 3 4)) --> ((((() . 1) . 2) . 3) . 4)\n\n\n(fold-left\n\n  (lambda (a x) (+ a (* x x)))\n\n  0 '(1 2 3 4 5)) --> 55\n\n\n(fold-left\n\n  (lambda (a . args) (append args a))\n\n  '(question)\n\n  '(that not to)\n\n  '(is to be)\n\n  '(the be: or)) --> (to be or not to be: that is the question)\n") ("control:s41" "\n\nprocedure: (fold-right procedure obj list1 list2 ...)\n\nreturns: see below\n\nlibraries: (rnrs lists), (rnrs)\n\n" "The list arguments should all have the same length.\nprocedure should accept one more argument than the number of list\narguments and return a single value.\nIt should not mutate the list arguments.\n\n" "\nfold-right returns obj if the list arguments are empty.\nIf they are not empty, fold-right recurs with the cdr of each\nlist replacing the list, then applies\nprocedure to the cars of list1 list2 ... and\nthe result returned by the recursion.\n\n" "\n\n" "(fold-right cons '() '(1 2 3 4)) --> (1 2 3 4)\n\n\n(fold-right\n\n  (lambda (x a) (+ a (* x x)))\n\n  0 '(1 2 3 4 5)) --> 55\n\n\n(fold-right\n\n  (lambda (x y a) (cons* x y a))   --> (parting is such sweet sorrow\n\n  '((with apologies))              gifs/ghostRightarrow.gif  gotta go see ya tomorrow\n\n  '(parting such sorrow go ya)     gifs/ghostRightarrow.gif  (with apologies))\n\n  '(is sweet gotta see tomorrow))\n") ("control:s44" "\n\nprocedure: (vector-map procedure vector1 vector1 ...)\n\nreturns: vector of results\n\nlibraries: (rnrs base), (rnrs)\n\n" "vector-map applies procedure to corresponding\nelements of vector1 vector2 ... and returns a\nvector of the resulting values.\nThe vectors vector1 vector2 ... must be of the same length, and\nprocedure should accept as many arguments as there are vectors and\nreturn a single value.\n\n" "\n\n" "(vector-map abs '#(1 -2 3 -4 5 -6)) --> #(1 2 3 4 5 6)\n\n(vector-map (lambda (x y) (* x y))\n\n  '#(1 2 3 4)\n\n  '#(8 7 6 5)) --> #(8 14 18 20)\n" "While the order in which the applications themselves occur is not\nspecified, the order of the values in the output vector is the same\nas that of the corresponding values in the input vectors.\n\n") ("control:s47" "\n\n\nprocedure: (vector-for-each procedure vector1 vector2 ...)\n\nreturns: unspecified\n\nlibraries: (rnrs base), (rnrs)\n\n" "vector-for-each is similar to vector-map except that\nvector-for-each does\nnot create and return a vector of the resulting values, and vector-for-each\nguarantees to perform the applications in sequence over the elements from\nleft to right.\n\n" "\n\n" "(let ([same-count 0])\n\n  (vector-for-each\n\n    (lambda (x y)\n\n      (when (= x y)\n\n        (set! same-count (+ same-count 1))))\n\n    '#(1 2 3 4 5 6)\n\n    '#(2 3 3 4 7 6))\n\n  same-count) --> 3\n") ("control:s50" "\n\nprocedure: (string-for-each procedure string1 string2 ...)\n\nreturns: unspecified\n\nlibraries: (rnrs base), (rnrs)\n\n" "string-for-each is similar to\nfor-each and vector-for-each\nexcept that the inputs are strings rather than lists or vectors.\n\n" "\n\n" "(let ([ls '()])\n\n  (string-for-each\n\n    (lambda r (set! ls (cons r ls)))\n\n    \"abcd\"\n\n    \"====\"\n\n    \"1234\")\n\n  (map list->string (reverse ls))) --> (\"a=1\" \"b=2\" \"c=3\" \"d=4\")\n") ("control:s54" "\n\n\nprocedure: (call/cc procedure)\n\n\n\nprocedure: (call-with-current-continuation procedure)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "These procedures are the same.\nThe shorter name is often used for the obvious reason that it requires\nfewer keystrokes to type.\n\n" "\ncall/cc obtains its continuation and passes it to procedure,\nwhich should accept one argument.\nThe continuation itself is represented by a procedure.\nEach time this procedure is applied to zero or more values, it returns the values to the\ncontinuation of the call/cc application.\nThat is, when the continuation procedure is called, it returns its arguments\nas the values of the application of call/cc.\n\n" "\nIf procedure returns normally when passed the continuation procedure,\nthe values returned by call/cc are the values returned by procedure.\n\n" "\nContinuations allow the implementation of nonlocal exits,\nbacktracking [citation14,citation29],\ncoroutines [citation16], and\nmultitasking [citation10,citation32].\n\n" "\nThe example below illustrates the use of a continuation to perform\na nonlocal exit from a loop.\n\n" "\n\n" "(define member\n\n  (lambda (x ls)\n\n    (call/cc\n\n      (lambda (break)\n\n        (do ([ls ls (cdr ls)])\n\n            ((null? ls) #f)\n\n          (when (equal? x (car ls))\n\n            (break ls)))))))\n\n\n(member 'd '(a b c)) --> #f\n\n(member 'b '(a b c)) --> (b c)\n" "Additional examples are given in Sections 3.3\nand 12.11.\n\n" "\nThe current continuation is typically represented internally as a stack\nof procedure activation records, and obtaining the continuation\ninvolves encapsulating the stack within a procedural object.\nSince an encapsulated stack has indefinite extent, some mechanism must\nbe used to preserve the stack contents indefinitely.\nThis can be done with surprising ease and efficiency and with no impact\non programs that do not use continuations [citation17].\n\n") ("control:s56" "\ndesc:dynamic-wind\n\n\nprocedure: (dynamic-wind in body out)\n\nreturns: values resulting from the application of body\n\nlibraries: (rnrs base), (rnrs)\n\n" "dynamic-wind offers \"protection\" from continuation\ninvocation.\nIt is useful for performing tasks that must be performed whenever control\nenters or leaves body, either normally or by continuation application.\n\n" "\nThe three arguments in, body, and out must be procedures\nand should accept zero arguments, i.e., they should be thunks.\nBefore applying body, and each time body is entered subsequently\nby the application of a continuation created within body, the in\nthunk is applied.\nUpon normal exit from body and each time body is exited by\nthe application of a continuation created outside body, the out\nthunk is applied.\n\n" "\nThus, it is guaranteed that in is invoked at least once.\nIn addition, if body ever returns, out is invoked at least\nonce.\n\n" "\nThe following example demonstrates the use of dynamic-wind to be sure\nthat an input port is closed after processing, regardless of whether the\nprocessing completes normally.\n\n" "\n\n" "(let ([p (open-input-file \"input-file\")])\n\n  (dynamic-wind\n\n    (lambda () #f)\n\n    (lambda () (process p))\n\n    (lambda () (close-port p))))\n" "Common Lisp provides a similar\nfacility (unwind-protect) for protection from nonlocal exits.\nThis is often sufficient.\nunwind-protect provides only the equivalent to out, however,\nsince Common Lisp does not support fully general continuations.\nHere is how unwind-protect might be specified with dynamic-wind.\n\n" "\n\n" "(define-syntax unwind-protect\n\n  (syntax-rules ()\n\n    [(_ body cleanup ...)\n\n     (dynamic-wind\n\n       (lambda () #f)\n\n       (lambda () body)\n\n       (lambda () cleanup ...))]))\n\n\n((call/cc\n\n   (let ([x 'a])\n\n     (lambda (k)\n\n       (unwind-protect\n\n         (k (lambda () x))\n\n         (set! x 'b)))))) --> b\n" "Some Scheme implementations support a controlled form of assignment\nknown as fluid\nbinding, in which a variable takes on a\ntemporary value during a given computation and reverts to the old value\nafter the computation has completed.\nThe syntactic form fluid-let defined below in terms of dynamic-wind\npermits the fluid binding of a single variable x to the value of\nan expression e within a the body b1 b2 ....\n\n" "\n\n" "(define-syntax fluid-let\n\n  (syntax-rules ()\n\n    [(_ ((x e)) b1 b2 ...)\n\n     (let ([y e])\n\n       (let ([swap (lambda () (let ([t x]) (set! x y) (set! y t)))])\n\n         (dynamic-wind swap (lambda () b1 b2 ...) swap)))]))\n" "Implementations that support fluid-let typically extend it to\nallow an indefinite number of (x e) pairs, as with let.\n\n" "\nIf no continuations are invoked within the body of a fluid-let,\nthe behavior is the same as if the variable were simply assigned\nthe new value on entry and assigned the old value on return.\n\n" "\n\n" "(let ([x 3])\n\n  (+ (fluid-let ([x 5])\n\n       x)\n\n     x)) --> 8\n" "A fluid-bound variable also reverts to the old value if a continuation\ncreated outside of the fluid-let is invoked.\n\n" "\n\n" "(let ([x 'a])\n\n  (let ([f (lambda () x)])\n\n    (cons (call/cc\n\n            (lambda (k)\n\n              (fluid-let ([x 'b])\n\n                (k (f)))))\n\n          (f)))) --> (b . a)\n" "If control has left a fluid-let body, either normally\nor by the invocation of a continuation, and control reenters the\nbody by the invocation of a continuation, the temporary value of\nthe fluid-bound variable is reinstated.\nFurthermore, any changes to the temporary value are maintained\nand reflected upon reentry.\n\n" "\n\n" "(define reenter #f)\n\n(define x 0)\n\n(fluid-let ([x 1])\n\n  (call/cc (lambda (k) (set! reenter k)))\n\n  (set! x (+ x 1))\n\n  x) --> 2\n\nx --> 0\n\n(reenter '*) --> 3\n\n(reenter '*) --> 4\n\nx --> 0\n" "A library showing how dynamic-wind might be implemented\nwere it not already built in is given below.\nIn addition to defining dynamic-wind, the code defines\na version of\ncall/cc\nthat does its part to support dynamic-wind.\n\n" "\n\n" "(library (dynamic-wind)\n\n  (export dynamic-wind call/cc\n\n    (rename (call/cc call-with-current-continuation)))\n\n  (import (rename (except (rnrs) dynamic-wind) (call/cc rnrs:call/cc)))\n\n\n  (define winders '())\n\n\n  (define common-tail\n\n    (lambda (x y)\n\n      (let ([lx (length x)] [ly (length y)])\n\n        (do ([x (if (> lx ly) (list-tail x (- lx ly)) x) (cdr x)]\n\n             [y (if (> ly lx) (list-tail y (- ly lx)) y) (cdr y)])\n\n            ((eq? x y) x)))))\n\n\n  (define do-wind\n\n    (lambda (new)\n\n      (let ([tail (common-tail new winders)])\n\n        (let f ([ls winders])\n\n          (if (not (eq? ls tail))\n\n              (begin\n\n                (set! winders (cdr ls))\n\n                ((cdar ls))\n\n                (f (cdr ls)))))\n\n        (let f ([ls new])\n\n          (if (not (eq? ls tail))\n\n              (begin\n\n                (f (cdr ls))\n\n                ((caar ls))\n\n                (set! winders ls)))))))\n" "\n" "  (define call/cc\n\n    (lambda (f)\n\n      (rnrs:call/cc\n\n        (lambda (k)\n\n          (f (let ([save winders])\n\n               (lambda (x)\n\n                 (unless (eq? save winders) (do-wind save))\n\n                 (k x))))))))\n\n\n  (define dynamic-wind\n\n    (lambda (in body out)\n\n      (in)\n\n      (set! winders (cons (cons in out) winders))\n\n      (let-values ([ans* (body)])\n\n        (set! winders (cdr winders))\n\n        (out)\n\n        (apply values ans*)))))\n" "Together, dynamic-wind and call/cc manage a list\nof winders.\nA winder is a pair of in and out thunks established\nby a call to dynamic-wind.\nWhenever dynamic-wind is invoked, the in thunk is\ninvoked, a new winder containing the in and out thunks\nis placed on the winders list, the body thunk is invoked,\nthe winder is removed from the winders list, and the out\nthunk is invoked.\nThis ordering ensures that the winder is on the winders list only\nwhen control has passed through in and not yet entered\nout.\nWhenever a continuation is obtained, the winders list is saved, and\nwhenever the continuation is invoked, the saved winders list is\nreinstated.\nDuring reinstatement, the out thunk of each winder on the\ncurrent winders list that is not also on the saved winders list is\ninvoked, followed by the in thunk of each winder on the saved\nwinders list that is not also on the current winders list.\nThe winders list is updated incrementally, again to ensure that\na winder is on the current winders list only if control has passed\nthrough its in thunk and not entered its out thunk.\n\n" "\nThe test (not (eq? save winders)) performed in call/cc\nis not strictly necessary but makes invoking a continuation\nless costly whenever the saved winders list is the same as the\ncurrent winders list.\n\n") ("control:s65" "\n\n\nsyntax: (delay expr)\n\nreturns: a promise\n\n\n\nprocedure: (force promise)\n\nreturns: result of forcing promise\n\nlibraries: (rnrs r5rs)\n\n" "The first time a promise created by delay is forced (with\nforce), it evaluates expr, \"remembering\" the resulting\nvalue.\nThereafter, each time the promise is forced, it returns the remembered\nvalue instead of reevaluating expr.\n\n" "\ndelay and force are typically used only in the absence of side\neffects, e.g., assignments, so that the order of evaluation is unimportant.\n\n" "\nThe benefit of using delay and force is that some\namount of computation might be avoided altogether if it is delayed until\nabsolutely required.\nDelayed evaluation may be used to construct conceptually infinite\nlists, or streams.\nThe example below shows how a stream abstraction may be built with\ndelay and force.\nA stream is a promise that, when forced, returns a pair whose cdr\nis a stream.\n\n" "\n\n" "(define stream-car\n\n  (lambda (s)\n\n    (car (force s))))\n\n\n(define stream-cdr\n\n  (lambda (s)\n\n    (cdr (force s))))\n\n\n(define counters\n\n  (let next ([n 1])\n\n    (delay (cons n (next (+ n 1))))))\n\n\n(stream-car counters) --> 1\n\n\n(stream-car (stream-cdr counters)) --> 2\n\n\n(define stream-add\n\n  (lambda (s1 s2)\n\n    (delay (cons\n\n             (+ (stream-car s1) (stream-car s2))\n\n             (stream-add (stream-cdr s1) (stream-cdr s2))))))\n\n\n(define even-counters\n\n  (stream-add counters counters))\n\n\n(stream-car even-counters) --> 2\n\n\n(stream-car (stream-cdr even-counters)) --> 4\n" "delay may be defined by\n\n" "\n\n" "(define-syntax delay\n\n  (syntax-rules ()\n\n    [(_ expr) (make-promise (lambda () expr))]))\n" "where make-promise might be defined\nas follows.\n\n" "\n\n" "(define make-promise\n\n  (lambda (p)\n\n    (let ([val #f] [set? #f])\n\n      (lambda ()\n\n        (unless set?\n\n          (let ([x (p)])\n\n            (unless set?\n\n              (set! val x)\n\n              (set! set? #t))))\n\n        val))))\n" "With this definition of delay, force simply invokes the promise\nto force evaluation or to retrieve the saved value.\n\n" "\n\n" "(define force\n\n  (lambda (promise)\n\n    (promise)))\n" "The second test of the variable set? in make-promise is necessary\nin the event that, as a result of applying p, the\npromise is recursively forced.\nSince a promise must always return the same value, the\nresult of the first application of p to complete is\nreturned.\n\n" "\nWhether delay and force handle multiple return values\nis unspecified; the implementation given above does not, but the following\nversion does, with the help of call-with-values and apply.\n\n" "\n\n" "(define make-promise\n\n  (lambda (p)\n\n    (let ([vals #f] [set? #f])\n\n      (lambda ()\n\n        (unless set?\n\n          (call-with-values p\n\n            (lambda x\n\n              (unless set?\n\n                (set! vals x)\n\n                (set! set? #t)))))\n\n        (apply values vals)))))\n\n\n(define p (delay (values 1 2 3)))\n\n(force p) --> 1\n\n          gifs/ghostRightarrow.gif 2\n\n          gifs/ghostRightarrow.gif 3\n\n(call-with-values (lambda () (force p)) +) --> 6\n" "Neither implementation is quite right, since force must raise\nan exception with condition type &assertion if its argument is\nnot a promise.\nSince distinguishing procedures created by make-promise from\nother procedures is impossible, force cannot do so reliably.\nThe following reimplementation of make-promise and force\nrepresents promises as records of the type promise to allow\nforce to make the required check.\n\n" "\n\n" "(define-record-type promise\n\n  (fields (immutable p) (mutable vals) (mutable set?))\n\n  (protocol (lambda (new) (lambda (p) (new p #f #f)))))\n\n\n(define force\n\n  (lambda (promise)\n\n    (unless (promise? promise)\n\n      (assertion-violation 'promise \"invalid argument\" promise))\n\n    (unless (promise-set? promise)\n\n      (call-with-values (promise-p promise)\n\n        (lambda x\n\n          (unless (promise-set? promise)\n\n            (promise-vals-set! promise x)\n\n            (promise-set?-set! promise #t)))))\n\n    (apply values (promise-vals promise))))\n") ("control:s70" "\n\n\nprocedure: (values obj ...)\n\nreturns: obj ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "The procedure values accepts any number of arguments and\nsimply passes (returns) the arguments to its continuation.\n\n" "\n\n" "(values) -->\n\n(values 1) --> 1\n\n\n(values 1 2 3) --> 1\n\n               gifs/ghostRightarrow.gif 2\n\n               gifs/ghostRightarrow.gif 3\n\n\n(define head&tail\n\n  (lambda (ls)\n\n    (values (car ls) (cdr ls))))\n\n\n(head&tail '(a b c)) --> a\n\n                     gifs/ghostRightarrow.gif (b c)\n") ("control:s71" "\n\nprocedure: (call-with-values producer consumer)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "producer and consumer must be procedures.\ncall-with-values applies consumer to the values\nreturned by invoking producer without arguments.\n\n" "\n\n" "(call-with-values\n\n  (lambda () (values 'bond 'james))\n\n  (lambda (x y) (cons y x))) --> (james . bond)\n\n\n(call-with-values values list) --> '()\n" "In the second example, values itself serves as the producer.\nIt receives no arguments and thus returns no values.\nlist is thus applied to no arguments and so returns the\nempty list.\n\n" "\nThe procedure dxdy defined below computes\nthe change in x and y coordinates for a pair of points whose\ncoordinates are represented by (x . y) pairs.\n\n" "\n\n" "(define dxdy\n\n  (lambda (p1 p2)\n\n    (values (- (car p2) (car p1))\n\n            (- (cdr p2) (cdr p1)))))\n\n\n(dxdy '(0 . 0) '(0 . 5)) --> 0\n\n                         gifs/ghostRightarrow.gif 5\n" "dxdy can be used to compute the length and slope of\na segment represented by two\nendpoints.\n\n" "\n\n" "(define segment-length\n\n  (lambda (p1 p2)\n\n    (call-with-values\n\n      (lambda () (dxdy p1 p2))\n\n      (lambda (dx dy) (sqrt (+ (* dx dx) (* dy dy)))))))\n\n\n(define segment-slope\n\n  (lambda (p1 p2)\n\n    (call-with-values\n\n      (lambda () (dxdy p1 p2))\n\n      (lambda (dx dy) (/ dy dx)))))\n\n\n(segment-length '(1 . 4) '(4 . 8)) --> 5\n\n(segment-slope '(1 . 4) '(4 . 8)) --> 4/3\n" "We can of course combine these to form one procedure that returns\ntwo values.\n\n" "\n\n" "(define describe-segment\n\n  (lambda (p1 p2)\n\n    (call-with-values\n\n      (lambda () (dxdy p1 p2))\n\n      (lambda (dx dy)\n\n        (values\n\n          (sqrt (+ (* dx dx) (* dy dy)))\n\n          (/ dy dx))))))\n\n\n(describe-segment '(1 . 4) '(4 . 8)) --> 5\n\n                                     --> 4/3\n" "The example below employs multiple values to divide a\nlist nondestructively into two sublists of alternating\nelements.\n\n" "\n\n" "(define split\n\n  (lambda (ls)\n\n    (if (or (null? ls) (null? (cdr ls)))\n\n        (values ls '())\n\n        (call-with-values\n\n          (lambda () (split (cddr ls)))\n\n          (lambda (odds evens)\n\n            (values (cons (car ls) odds)\n\n                    (cons (cadr ls) evens)))))))\n\n\n(split '(a b c d e f)) --> (a c e)\n\n                       gifs/ghostRightarrow.gif (b d f)\n" "At each level of recursion, the procedure split returns two\nvalues:  a list of the odd-numbered elements from the argument list and\na list of the even-numbered elements.\n\n\n" "\nThe continuation of a call to values need not be one established\nby a call to call-with-values, nor must only values be used to return\nto a continuation established by call-with-values.\nIn particular, (values e) and e are equivalent expressions.\nFor example:\n\n" "\n\n" "(+ (values 2) 4) --> 6\n\n\n(if (values #t) 1 2) --> 1\n\n\n(call-with-values\n\n  (lambda () 4)\n\n  (lambda (x) x)) --> 4\n" "Similarly, values may be used to pass any number of values to\na continuation that ignores the values, as in the following.\n\n" "\n\n" "(begin (values 1 2 3) 4) --> 4\n" "Because a continuation may accept zero or more than one value,\ncontinuations obtained via\ncall/cc may\naccept zero or more than one argument.\n\n" "\n\n" "(call-with-values\n\n  (lambda ()\n\n    (call/cc (lambda (k) (k 2 3))))\n\n  (lambda (x y) (list x y))) --> (2 3)\n" "The behavior is unspecified when a\ncontinuation expecting exactly one value receives zero values or more\nthan one value.\nFor example, the behavior of each of the following expressions is\nunspecified.\nSome implementations raise an exception, while others silently\nsuppress additional values or supply defaults for missing values.\n\n" "\n\n" "(if (values 1 2) 'x 'y)\n\n\n(+ (values) 5)\n" "Programs that wish to force extra values to be ignored in particular\ncontexts can do so easily by calling call-with-values explicitly.\nA syntactic form, which we might call first, can be defined to\nabstract the discarding of more than one value when only one is\ndesired.\n\n" "\n\n" "(define-syntax first\n\n  (syntax-rules ()\n\n    [(_ expr)\n\n     (call-with-values\n\n       (lambda () expr)\n\n       (lambda (x . y) x))]))\n\n\n(if (first (values #t #f)) 'a 'b) --> a\n" "Since implementations are required to raise an exception with condition\ntype &assertion if a procedure does not accept the number of\narguments passed to it, each of the following raises an exception.\n\n" "\n\n" "(call-with-values\n\n  (lambda () (values 2 3 4))\n\n  (lambda (x y) x))\n\n\n(call-with-values\n\n  (lambda () (call/cc (lambda (k) (k 0))))\n\n  (lambda (x y) x))\n" "Since producer is most often a lambda expression, it\nis often convenient to use a syntactic extension that suppresses\nthe lambda expression in the interest of readability.\n\n" "\n\n" "(define-syntax with-values\n\n  (syntax-rules ()\n\n    [(_ expr consumer)\n\n     (call-with-values (lambda () expr) consumer)]))\n\n\n(with-values (values 1 2) list) --> (1 2)\n\n(with-values (split '(1 2 3 4))\n\n  (lambda (odds evens)\n\n    evens)) --> (2 4)\n" "If the consumer is also a lambda expression, the\nmultiple-value variants of let and let* described\nin Section 4.5 are usually even more\nconvenient.\n\n" "\n\n" "(let-values ([(odds evens) (split '(1 2 3 4))])\n\n  evens) --> (2 4)\n\n\n(let-values ([ls (values 'a 'b 'c)])\n\n  ls) --> (a b c)\n" "Many standard syntactic forms and procedures  pass along multiple values.\nMost of these are \"automatic,\" in the sense that nothing special\nmust be done by the implementation to make this happen.\nThe usual expansion of let into a direct\nlambda call automatically propagates multiple\nvalues produced by the body of the let.\nOther operators must be coded specially to pass along multiple\nvalues.\nThe call-with-port procedure (page 7.6),\nfor example, calls its procedure argument, then closes the port argument\nbefore returning the procedure's values, so it must save the values\ntemporarily.\nThis is easily accomplished via let-values,\napply, and values:\n\n" "\n\n" "(define call-with-portdefn:call-with-port\n\n  (lambda (port proc)\n\n    (let-values ([val* (proc port)])\n\n      (close-port port)\n\n      (apply values val*))))\n" "If this seems like too much overhead when a single value is returned,\nthe code can use call-with-values and case-lambda to\nhandle the single-value case more efficiently:\n\n" "\n\n" "(define call-with-port\n\n  (lambda (port proc)\n\n    (call-with-values (lambda () (proc port))\n\n      (case-lambda\n\n        [(val) (close-port port) val]\n\n        [val* (close-port port) (apply values val*)]))))\n" "The definitions of values and call-with-values (and\nconcomitant redefinition of call/cc) in the library below\ndemonstrate that the multiple-return-values interface could be implemented\nin Scheme if it were not already built in.\nNo error checking can be done, however, for the case in which more than one\nvalue is returned to a single-value context, such as the test part\nof an if expression.\n\n" "\n\n" "(library (mrvs)\n\n  (export call-with-values values call/cc\n\n    (rename (call/cc call-with-current-continuation)))\n\n  (import\n\n    (rename\n\n      (except (rnrs) values call-with-values)\n\n      (call/cc rnrs:call/cc)))\n\n\n  (define magic (cons 'multiple 'values))\n\n\n  (define magic?\n\n    (lambda (x)\n\n      (and (pair? x) (eq? (car x) magic))))\n" "\n" "  (define call/cc\n\n    (lambda (p)\n\n      (rnrs:call/cc\n\n        (lambda (k)\n\n          (p (lambda args\n\n               (k (apply values args))))))))\n\n\n  (define values\n\n    (lambda args\n\n      (if (and (not (null? args)) (null? (cdr args)))\n\n          (car args)\n\n          (cons magic args))))\n\n\n  (define call-with-values\n\n    (lambda (producer consumer)\n\n      (let ([x (producer)])\n\n        (if (magic? x)\n\n            (apply consumer (cdr x))\n\n            (consumer x))))))\n" "Multiple values can be implemented more\nefficiently [citation2], but this\ncode serves to illustrate the meanings of the operators\nand may be used to provide multiple values in older, nonstandard\nimplementations that do not support them.\n\n\n") ("control:s80" "\n\n\nprocedure: (eval obj environment)\n\nreturns: values of the Scheme expression represented by obj in environment\n\nlibraries: (rnrs eval)\n\n" "If obj does not represent a syntactically valid expression, eval\nraises an exception with condition type &syntax.\nThe environments returned by environment,\nscheme-report-environment, and null-environment are\nimmutable.\nThus, eval also raises an exception with condition type\n&syntax if an assignment to any of the variables in the\nenvironment appears within the expression.\n\n" "\n\n" "(define cons 'not-cons)\n\n(eval '(let ([x 3]) (cons x 4)) (environment '(rnrs))) --> (3 . 4)\n\n\n(define lambda 'not-lambda)\n\n(eval '(lambda (x) x) (environment '(rnrs))) --> #<procedure>\n\n\n(eval '(cons 3 4) (environment)) --> exception\n") ("control:s81" "\n\nprocedure: (environment import-spec ...)\n\nreturns: an environment\n\nlibraries: (rnrs eval)\n\n" "environment returns an environment formed from the combined\nbindings of the given import specifiers.\nEach import-spec must be an s-expression representing a valid\nimport specifier (see Chapter 10).\n\n" "\n\n" "(define env (environment '(rnrs) '(prefix (rnrs lists) $)))\n\n(eval '($cons* 3 4 (* 5 8)) env) --> (3 4 . 40)\n") ("control:s82" "\n\nprocedure: (null-environment version)\n\n\n\nprocedure: (scheme-report-environment version)\n\nreturns: an R5RS compatibility environment\n\nlibraries: (rnrs r5rs)\n\n" "version must be the exact integer 5.\n\n" "\nnull-environment returns an environment containing\nbindings for the keywords whose meanings are defined by the\nRevised5 Report on Scheme, along with bindings for the\nauxiliary keywords else, =>, ...,\nand _.\n\n" "\nscheme-report-environment returns an environment containing\nthe same keyword bindings as the environment\nreturned by null-environment along with bindings for\nthe variables whose meanings are defined by the Revised5 Report on\nScheme, except those not defined by the Revised6 Report:\nload, interaction-environment,\ntranscript-on, transcript-off, and\nchar-ready?.\n\n") ("syntax:s12" "\n\n\nsyntax: (define-syntax keyword expr)\n\nlibraries: (rnrs base), (rnrs)\n\n" "expr must evaluate to a transformer.\n\n" "\nThe following example defines let* as a syntactic extension,\nspecifying the transformer with syntax-rules (see Section 8.2).\n\n" "\n\n" "(define-syntax let*\n\n  (syntax-rules ()\n\n    [(_ () b1 b2 ...) (let () b1 b2 ...)]\n\n    [(_ ((i1 e1) (i2 e2) ...) b1 b2 ...)\n\n     (let ([i1 e1])\n\n       (let* ([i2 e2] ...) b1 b2 ...))]))\n" "All bindings established by a set of internal definitions, whether\nkeyword or variable definitions, are visible everywhere within the\nimmediately enclosing body, including within the definitions themselves.\nFor example, the expression\n\n" "\n\n" "(let ()\n\n  (define even?\n\n    (lambda (x)\n\n      (or (= x 0) (odd? (- x 1)))))\n\n  (define-syntax odd?\n\n    (syntax-rules ()\n\n      [(_ x) (not (even? x))]))\n\n  (even? 10))\n" "is valid and should evaluate to #t.\n\n" "\nbody-expansionThe expander processes the initial forms in a library, lambda, or other\nbody from left to right.\nIf it encounters a variable definition, it records the fact that the\ndefined identifier is a variable but defers expansion of the\nright-hand-side expression until after all of the definitions have\nbeen processed.\nIf it encounters a keyword definition, it expands and evaluates the\nright-hand-side expression and binds the keyword to the resulting\ntransformer.\nIf it encounters an expression, it fully expands all deferred\nright-hand-side expressions along with the current and remaining\nbody expressions.\n\n" "\nAn implication of the left-to-right processing order is that one\ninternal definition can affect whether a subsequent form is also a\ndefinition.\nFor example, the expression\n\n" "\n\n" "(let ()\n\n  (define-syntax bind-to-zero\n\n    (syntax-rules ()\n\n      [(_ id) (define id 0)]))\n\n  (bind-to-zero x)\n\n  x)\n" "evaluates to 0, regardless of any binding for\nbind-to-zero that might appear outside of the let\nexpression.\n\n\n") ("syntax:s13" "\n\n\nsyntax: (let-syntax ((keyword expr) ...) form1 form2 ...)\n\n\n\nsyntax: (letrec-syntax ((keyword expr) ...) form1 form2 ...)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "Each expr must evaluate to a transformer.\nFor let-syntax and letrec-syntax both, each keyword\nis bound within the\nforms form1 form2 ....\nFor letrec-syntax the binding scope also includes each expr.\n\n" "\nletsyntaximplicitbeginA let-syntax or letrec-syntax form may expand into one or more\nexpressions anywhere expressions are permitted, in which case the\nresulting expressions are treated as if enclosed in a begin\nexpression.\nIt may also expand into zero or more definitions anywhere definitions are permitted,\nin which case the definitions are treated as if they appeared in place\nof the let-syntax or letrec-syntax form.\n\n" "\nThe following example highlights how let-syntax\nand letrec-syntax differ.\n\n" "\n\n" "(let ([f (lambda (x) (+ x 1))])\n\n  (let-syntax ([f (syntax-rules ()\n\n                       [(_ x) x])]\n\n               [g (syntax-rules ()\n\n                       [(_ x) (f x)])])\n\n    (list (f 1) (g 1)))) --> (1 2)\n\n\n(let ([f (lambda (x) (+ x 1))])\n\n  (letrec-syntax ([f (syntax-rules ()\n\n                       [(_ x) x])]\n\n                  [g (syntax-rules ()\n\n                       [(_ x) (f x)])])\n\n    (list (f 1) (g 1)))) --> (1 1)\n" "The two expressions are identical except that the let-syntax form\nin the first expression is a letrec-syntax form in the second.\nIn the first expression, the f occurring in g refers to\nthe let-bound variable f, whereas in the second it refers\nto the keyword f whose binding is established by the\nletrec-syntax form.\n\n\n") ("syntax:s14" "\n\n\nsyntax: (syntax-rules (literal ...) clause ...)\n\nreturns: a transformer\n\nlibraries: (rnrs base), (rnrs)\n\n" "Each literal must be an identifier other than\nan underscore ( _ ) or ellipsis ( ... ).\nEach clause must take the form below.\n\n" "\n\n" "(pattern template)\n" "Each pattern specifies one possible syntax that the input\nform might take, and the corresponding template specifies\nhow the output should appear.\n\n" "\nPatterns consist of list structure, vector structure,\nidentifiers, and\nconstants.\nEach identifier within a pattern is either a literal,\na pattern variable,\nan underscore,\nor an\nellipsis.\nThe identifier _ is an underscore, and\nthe identifier ... is an ellipsis.\nAny identifier other than _ or ... is a literal if it appears\nin the list of literals\n(literal ...);\notherwise, it is a pattern variable.\nLiterals serve as auxiliary keywords, such as else in\ncase and cond expressions.\nList and vector structure within a pattern specifies the basic structure\nrequired of the input, the underscore and pattern variables specify arbitrary\nsubstructure, and literals and constants specify atomic pieces\nthat must match exactly.\nEllipses specify repeated occurrences of the subpatterns they\nfollow.\n\n" "\npatternsAn input form F matches a pattern P if and only if\n\n" "\n\nP is an underscore or pattern variable,\n\n\nP is a literal identifier\nand F is an identifier with\nthe same binding as determined by the predicate\nfree-identifier=?\n(Section 8.3),\n\n\nP is of the form\n(P1 ... Pn)\nand F is a list of n elements that match P1 through\nPn,\n\n\nP is of the form\n(P1 ... Pn . Px)\nand F is a list or improper list of n or more elements\nwhose first n elements match P1 through Pn\nand\nwhose nth cdr matches Px,\n\n\nP is of the form\n(P1 ... Pk Pe ellipsis Pm+1 ... Pn),\nwhere ellipsis is the identifier ...\nand F is a proper list of n\nelements whose first k elements match P1 through Pk,\nwhose next m - k elements each match Pe,\nand\nwhose remaining n - m elements match Pm+1 through Pn,\n\n\nP is of the form\n(P1 ... Pk Pe ellipsis Pm+1 ... Pn . Px),\nwhere ellipsis is the identifier ...\nand F is a list or improper list of n\nelements whose first k elements match P1 through Pk,\nwhose next m - k elements each match Pe,\nwhose next n - m elements match Pm+1 through Pn,\nand \nwhose nth and final cdr matches Px,\n\n\nP is of the form\n#(P1 ... Pn)\nand F is a vector of n elements that match P1 through\nPn,\n\n\nP is of the form\n#(P1 ... Pk Pe ellipsis Pm+1 ... Pn),\nwhere ellipsis is the identifier ...\nand F is a vector of n elements\nwhose first k elements match P1 through Pk,\nwhose next m - k elements each match Pe,\nand\nwhose remaining n - m elements match Pm+1 through Pn,\nor\n\n\nP is a pattern datum (any nonlist, nonvector, nonsymbol\nobject) and F is equal to P in the sense of the\nequal? procedure.\n\n" "\n\n" "\nThe outermost structure of a syntax-rules pattern\nmust actually be in one of the list-structured forms above, although\nsubpatterns of the pattern may be in any of the above forms.\nFurthermore, the first element of the outermost pattern is ignored,\nsince it is always assumed to be the keyword naming the\nsyntactic form.\n(These statements do not apply to syntax-case; see\nSection 8.3.)\n\n" "\nIf an input form passed to a syntax-rules transformer\nmatches the pattern for a given clause, the clause\nis accepted and the form is transformed as specified by the\nassociated template.\nAs this transformation takes place,\npattern variables appearing in the pattern\nare bound to the corresponding input subforms.\nPattern variables appearing within a subpattern followed by\none or more ellipses may be bound to a sequence or sequences of zero or more\ninput subforms.\n\n" "\nA template is a pattern variable, an identifier that\nis not a pattern\nvariable, a pattern datum, a list of subtemplates\n(S1 ... Sn), an improper list of subtemplates\n(S1 S2 ... Sn . T), or a\nvector of subtemplates #(S1 ... Sn).\nEach subtemplate Si is a template\nfollowed by zero or more ellipses.\nThe final element T of an improper subtemplate list is a template.\n\n" "\nPattern variables appearing within a template are replaced in\nthe output by the input subforms to which they are bound.\nPattern data and identifiers that are not pattern variables\nare inserted directly into the output.\nList and vector structure within the template remains list and vector\nstructure in the output.\nA subtemplate followed by an ellipsis expands\ninto zero or more occurrences of the subtemplate.\nThe subtemplate\nmust contain at least one pattern variable from a subpattern\nfollowed by an ellipsis.\n(Otherwise, the expander could not determine how many times the subform\nshould be repeated in the output.)\nPattern variables that occur in subpatterns followed by one or more\nellipses may occur only in subtemplates that are\nfollowed by (at least) as many ellipses.\nThese pattern variables are replaced in the output by the input\nsubforms to which  they are bound, distributed as specified.\nIf a pattern variable is followed by more ellipses in the template\nthan in the associated pattern, the input form is replicated as\nnecessary.\n\n" "\nA template of the form\n(... template) is identical to template, except that\nellipses within the template have no special meaning.\nThat is, any ellipses contained within template are\ntreated as ordinary identifiers.\nIn particular, the template (... ...) produces a single\nellipsis, ....\nThis allows syntactic extensions to expand into forms containing\nellipses, including syntax-rules or syntax-case\npatterns and templates.\n\n" "\n" "The definition of or below demonstrates the use of\nsyntax-rules.\n\n" "\n\n" "(define-syntax or\n\n  (syntax-rules ()\n\n    [(_) #f]\n\n    [(_ e) e]\n\n    [(_ e1 e2 e3 ...)\n\n     (let ([t e1]) (if t t (or e2 e3 ...)))]))\n" "The input patterns specify that the input must consist of the\nkeyword and zero or more subexpressions.\nAn underscore ( _ ),\nwhich is a special pattern symbol that matches any input,\nis often used for the keyword position to remind the programmer\nand anyone reading the definition that the keyword\nposition never fails to contain the expected keyword and need not be\nmatched.\n(In fact, as mentioned above, syntax-rules ignores what appears\nin the keyword position.)\nIf more than one subexpression is present (third clause), the\nexpanded code both tests the value of the first subexpression\nand returns the value if it is not false.\nTo avoid evaluating the expression twice, the transformer\nintroduces a binding for the temporary variable t.\n\n" "\nThe expansion algorithm maintains lexical scoping automatically\nby renaming local identifiers as necessary.\nThus, the binding for t introduced by the transformer is visible\nonly within code introduced by the transformer and not within\nsubforms of the input.\nSimilarly, the references to the identifiers let and if are\nunaffected by any bindings present in the context of the input.\n\n" "\n\n" "(let ([if #f])\n\n  (let ([t 'okay])\n\n    (or if t))) --> okay\n" "This expression is transformed during expansion to the equivalent of\nthe expression below.\n\n" "\n\n" "((lambda (if1)\n\n   ((lambda (t1)\n\n      ((lambda (t2)\n\n         (if t2 t2 t1))\n\n       if1))\n\n    'okay))\n\n #f) --> okay\n" "In this sample expansion, if1, t1, and t2\nrepresent identifiers to which if and t in the\noriginal expression and t in the expansion of or have\nbeen renamed.\n\n" "\nThe definition of a simplified version of cond below\n(simplified because it requires\nat least one output expression per clause and \ndoes not support the auxiliary keyword =>)\ndemonstrates how auxiliary keywords such as else are recognized\nin the input to a transformer, via inclusion in the list of\nliterals.\n\n" "\n\n" "(define-syntax cond\n\n  (syntax-rules (else)\n\n    [(_ (else e1 e2 ...)) (begin e1 e2 ...)]\n\n    [(_ (e0 e1 e2 ...)) (if e0 (begin e1 e2 ...))]\n\n    [(_ (e0 e1 e2 ...) c1 c2 ...)\n\n     (if e0 (begin e1 e2 ...) (cond c1 c2 ...))]))\n") ("syntax:s26" "\n\nsyntax: _\n\n\n\nsyntax: ...\n\nlibraries: (rnrs base), (rnrs syntax-case), (rnrs)\n\n" "These identifiers are auxiliary keywords for syntax-rules,\nidentifier-syntax, and syntax-case.\nThe second ( ... ) is also an auxiliary keyword for\nsyntax and quasisyntax.\nIt is a syntax violation to reference these identifiers except in\ncontexts where they are recognized as auxiliary keywords.\n\n\n") ("syntax:s27" "\n\n\nsyntax: (identifier-syntax tmpl)\n\n\n\nsyntax: (identifier-syntax (id1 tmpl1) ((set! id2 e2) tmpl2))\n\nreturns: a transformer\n\nlibraries: (rnrs base), (rnrs)\n\n" "When a keyword is bound to a transformer produced by the first form of\nidentifier-syntax, references to the keyword within the scope\nof the binding are replaced by tmpl.\n\n" "\n\n" "(let ()\n\n  (define-syntax a (identifier-syntax car))\n\n  (list (a '(1 2 3)) a)) --> (1 #<procedure>)\n" "With the first form of identifier-syntax, an apparent assignment\nof the associated keyword with set! is a syntax violation.\nThe second, more general, form of identifier-syntax permits\nthe transformer to specify what happens when set! is used.\n\n" "\n\n" "(let ([ls (list 0)])\n\n  (define-syntax a\n\n    (identifier-syntax\n\n      [id (car ls)]\n\n      [(set! id e) (set-car! ls e)]))\n\n  (let ([before a])\n\n    (set! a 1)\n\n    (list before a ls))) --> (0 1 (1))\n" "A definition of identifier-syntax in terms of\nmake-variable-transformer is shown on\npage 307.\n\n") ("syntax:s30" "\n\n\nsyntax: (syntax-case expr (literal ...) clause ...)\n\nreturns: see below\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "Each literal must be an identifier.\nEach clause must take one of the following two forms.\n\n" "\n\n" "(pattern output-expression)\n\n(pattern fender output-expression)\n" "syntax-case patterns may be in any of the forms described\nin Section 8.2.\n\n" "\nsyntax-case first evaluates expr, then attempts\nto match the resulting value against the pattern from the first\nclause.\nThis value may be any Scheme object.\nIf the value matches the pattern and no\nfender is present,\noutput-expression is evaluated and its values returned as the\nvalues of the syntax-case expression.\nIf the value does not match the pattern, the value is compared against\nthe next clause, and so on.\nIt is a syntax violation if the value does not match any of the patterns.\n\n" "\nIf the optional fender is present, it serves as an additional\nconstraint on acceptance of a clause.\nIf the value of the syntax-case expr matches the pattern for a given\nclause, the corresponding fender is evaluated.\nIf fender evaluates to a true value, the clause is accepted;\notherwise, the clause is rejected as if the input had failed to match\nthe pattern.\nFenders are logically a part of the matching process, i.e., they\nspecify additional matching constraints beyond the basic structure of\nan expression.\n\n" "\nPattern variables contained within a clause's\npattern are bound to the corresponding pieces of the input\nvalue within the clause's fender (if present) and\noutput-expression.\nPattern variables occupy the same namespace as program variables and\nkeywords; pattern variable bindings created by syntax-case\ncan shadow (and be shadowed by) program variable and keyword bindings as\nwell as other pattern variable bindings.\nPattern variables, however, can be referenced only within syntax\nexpressions.\n\n" "\nSee the examples following the description of syntax.\n\n") ("syntax:s33" "\n\n\nsyntax: (syntax template)\n\n\n\nsyntax: #'template\n\nreturns: see below\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "#'template is equivalent to (syntax template).\nThe abbreviated form is converted into the longer form when a program\nis read, prior to macro expansion.\n\n" "\nA syntax expression is like a quote expression except that the\nvalues of pattern variables appearing within template are\ninserted into template, and\ncontextual information associated both with the input and with the template is\nretained in the output to support lexical scoping.\nA syntax template is identical to a syntax-rules\ntemplate and is treated similarly.\n\n" "\nList and vector structures within the template become true lists or\nvectors (suitable for direct application of list or vector operations,\nlike map or vector-ref) to the extent that the\nlist or vector structures must be copied to insert the values of\npattern variables, and empty lists are never wrapped.\nFor example, #'(x ...), #'(a b c), #'() are\nall lists if x, a, b, and c are\npattern variables.\n\n" "\nThe definition of or below is equivalent to the one given in\nSection 8.2 except that it employs syntax-case and\nsyntax in place of syntax-rules.\n\n" "\n\n" "(define-syntax or\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_) #'#f]\n\n      [(_ e) #'e]\n\n      [(_ e1 e2 e3 ...)\n\n       #'(let ([t e1]) (if t t (or e2 e3 ...)))])))\n" "In this version, the lambda expression that produces the\ntransformer is explicit, as are the syntax forms in the output\npart of each clause.\nAny syntax-rules form can be expressed with\nsyntax-case by making the lambda expression and\nsyntax expressions explicit.\nThis observation leads to the following definition of\nsyntax-rules in terms of\nsyntax-case.\n\n" "\n\n" "(define-syntax syntax-rules\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ (i ...) ((keyword . pattern) template) ...)\n\n       #'(lambda (x)\n\n           (syntax-case x (i ...)\n\n             [(_ . pattern) #'template] ...))])))\n" "An underscore is used in place of\neach keyword since the first position\nof each syntax-rules pattern is always ignored.\n\n" "\nSince the lambda and syntax expressions are\nimplicit in a syntax-rules form, definitions expressed with\nsyntax-rules are often shorter than the equivalent definitions\nexpressed with syntax-case.\nThe choice of which to use when either suffices is a matter of\ntaste, but many transformers that can be written easily with\nsyntax-case cannot be written easily or at all with syntax-rules\n(see Section 8.4).\n\n") ("syntax:s35" "\n\n\nprocedure: (identifier? obj)\n\nreturns: #t if obj is an identifier, #f otherwise\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "identifier? is often used within fenders to verify\nthat certain subforms of an input form are identifiers, as in the\ndefinition of unnamed let below.\n\n" "\n\n" "(define-syntax let\n\n  (lambda (x)\n\n    (define ids?\n\n      (lambda (ls)\n\n        (or (null? ls)\n\n            (and (identifier? (car ls))\n\n                 (ids? (cdr ls))))))\n\n    (syntax-case x ()\n\n      [(_ ((i e) ...) b1 b2 ...)\n\n       (ids? #'(i ...))\n\n       #'((lambda (i ...) b1 b2 ...) e ...)])))\n" "Syntactic extensions ordinarily take the form\n(keyword subform ...), but the\nsyntax-case system permits them to take the form of singleton\nidentifiers as well.\nFor example, the keyword pcar in the expression below may be used\nboth as an identifier (in which case it expands into a call to car)\nor as a structured form (in which case it expands\ninto a call to set-car!).\n\n" "\n\n" "(let ([p (cons 0 #f)])\n\n  (define-syntax pcar\n\n    (lambda (x)\n\n      (syntax-case x ()\n\n        [_ (identifier? x) #'(car p)]\n\n        [(_ e) #'(set-car! p e)])))\n\n  (let ([a pcar])\n\n    (pcar 1)\n\n    (list a pcar))) --> (0 1)\n" "The fender (identifier? x) is used to recognize the singleton\nidentifier case.\n\n\n") ("syntax:s37" "\n\n\nprocedure: (free-identifier=? identifier1 identifier2)\n\n\n\nprocedure: (bound-identifier=? identifier1 identifier2)\n\nreturns: see below\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "Symbolic names alone do not distinguish identifiers unless the\nidentifiers are to be used only as symbolic data.\nThe predicates free-identifier=? and bound-identifier=?\nare used to compare identifiers according to their intended use\nas free references or bound identifiers in a given context.\n\n" "\nfree-identifier=? is used to determine whether two\nidentifiers would be equivalent if they were to appear as free identifiers\nin the output of a transformer.\nBecause identifier references are lexically scoped, this means\n(free-identifier=? id1 id2) is true if and only if the\nidentifiers id1 and id2 refer to the same\nbinding.\n(For this comparison, two like-named identifiers are assumed to have the\nsame binding if neither is bound.)\nLiteral identifiers (auxiliary keywords) appearing in\nsyntax-case patterns (such as else in case\nand cond)\nare matched with free-identifier=?.\n\n" "\nSimilarly, bound-identifier=? is used to\ndetermine whether two identifiers would be equivalent if they were to appear as\nbound identifiers in the output of a transformer.\nIn other words, if bound-identifier=? returns true for two\nidentifiers, a binding for one will capture references to the\nother within its scope.\nIn general, two identifiers are bound-identifier=? only if\nboth are present in the original program or both are introduced by the\nsame transformer application\n(perhaps implicitly---see datum->syntax).\nbound-identifier=? can be used for detecting\nduplicate identifiers in a binding construct or for other\npreprocessing of a binding construct that requires detecting instances\nof the bound identifiers.\n\n" "\nThe definition below is equivalent to the earlier definition\nof a simplified version of cond with syntax-rules, except that\nelse is recognized via an explicit call to free-identifier? within\na fender rather than via inclusion in the literals list.\n\n" "\n\n" "(define-syntax cond\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ (e0 e1 e2 ...))\n\n       (and (identifier? #'e0) (free-identifier=? #'e0 #'else))\n\n       #'(begin e1 e2 ...)]\n\n      [(_ (e0 e1 e2 ...)) #'(if e0 (begin e1 e2 ...))]\n\n      [(_ (e0 e1 e2 ...) c1 c2 ...)\n\n       #'(if e0 (begin e1 e2 ...) (cond c1 c2 ...))])))\n" "With either definition of cond, else is not\nrecognized as an auxiliary\nkeyword if an enclosing lexical binding for else exists.\nFor example,\n\n" "\n\n" "(let ([else #f])\n\n  (cond [else (write \"oops\")]))\n" "does not write \"oops\", since else is bound\nlexically and is\ntherefore not the same else that appears in the definition of\ncond.\n\n" "\nThe following definition of unnamed let\nuses bound-identifier=? to detect duplicate identifiers.\n\n" "\n\n" "(define-syntax let\n\n  (lambda (x)\n\n    (define ids?\n\n      (lambda (ls)\n\n        (or (null? ls)\n\n            (and (identifier? (car ls)) (ids? (cdr ls))))))\n\n    (define unique-ids?\n\n      (lambda (ls)\n\n        (or (null? ls)\n\n            (and (not (memp\n\n                        (lambda (x) (bound-identifier=? x (car ls)))\n\n                        (cdr ls)))\n\n                 (unique-ids? (cdr ls))))))\n\n    (syntax-case x ()\n\n      [(_ ((i e) ...) b1 b2 ...)\n\n       (and (ids? #'(i ...)) (unique-ids? #'(i ...)))\n\n       #'((lambda (i ...) b1 b2 ...) e ...)])))\n" "With the definition of let above, the expression\n\n" "\n\n" "(let ([a 3] [a 4]) (+ a a))\n" "is a syntax violation, whereas\n\n" "\n\n" "(let ([a 0])\n\n  (let-syntax ([dolet (lambda (x)\n\n                        (syntax-case x ()\n\n                          [(_ b)\n\n                           #'(let ([a 3] [b 4]) (+ a b))]))])\n\n    (dolet a)))\n" "evaluates to 7 since the identifier a introduced by dolet\nand the identifier a extracted from the input form are not\nbound-identifier=?.\nSince both occurrences of a, however, if left as free references,\nwould refer to the same binding for a, free-identifier=?\nwould not distinguish them.\n\n" "\nTwo identifiers that are free-identifier=? may not be\nbound-identifier=?.\nAn identifier introduced by a transformer may refer to the same\nenclosing binding as an identifier not introduced by the transformer,\nbut an introduced binding for one will not capture references to the other.\nOn the other hand, identifiers that are bound-identifier=? are\nfree-identifier=?, as long as the identifiers have valid\nbindings in the context where they are compared.\n\n\n") ("syntax:s38" "\n\n\nsyntax: (with-syntax ((pattern expr) ...) body1 body2 ...)\n\nreturns: the values of the final body expression\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "It is sometimes useful to construct a transformer's output in separate\npieces, then put the pieces together.\nwith-syntax facilitates this by allowing the creation of local\npattern bindings.\n\n" "\npattern is identical in form to a syntax-case pattern.\nThe value of each expr is computed and destructured according\nto the corresponding pattern, and pattern variables within\nthe pattern are bound as with syntax-case to appropriate\nportions of the value within the body body1 body2 ...,\nwhich is processed and evaluated like a lambda body.\n\n" "\nwith-syntax may be defined as a syntactic extension in terms of\nsyntax-case.\n\n" "\n\n" "(define-syntax with-syntax\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ ((p e) ...) b1 b2 ...)\n\n       #'(syntax-case (list e ...) ()\n\n           [(p ...) (let () b1 b2 ...)])])))\n" "The following definition of full cond\ndemonstrates the use of with-syntax to support transformers\nthat employ recursion internally to construct their output.\n\n" "\n\n" "(define-syntax conddefn:cond\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ c1 c2 ...)\n\n       (let f ([c1 #'c1] [cmore #'(c2 ...)])\n\n         (if (null? cmore)\n\n             (syntax-case c1 (else =>)\n\n               [(else e1 e2 ...) #'(begin e1 e2 ...)]\n\n               [(e0) #'(let ([t e0]) (if t t))]\n\n               [(e0 => e1) #'(let ([t e0]) (if t (e1 t)))]\n\n               [(e0 e1 e2 ...) #'(if e0 (begin e1 e2 ...))])\n\n             (with-syntax ([rest (f (car cmore) (cdr cmore))])\n\n               (syntax-case c1 (=>)\n\n                 [(e0) #'(let ([t e0]) (if t t rest))]\n\n                 [(e0 => e1) #'(let ([t e0]) (if t (e1 t) rest))]\n\n                 [(e0 e1 e2 ...)\n\n                  #'(if e0 (begin e1 e2 ...) rest)]))))])))\n") ("syntax:s40" "\n\nsyntax: (quasisyntax template ...)\n\n\n\nsyntax: #`template\n\n\n\nsyntax: (unsyntax template ...)\n\n\n\nsyntax: #,template\n\n\n\nsyntax: (unsyntax-splicing template ...)\n\n\n\nsyntax: #,@template\n\nreturns: see below\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "#`template is equivalent to (quasisyntax template),\nwhile\n#,template is equivalent to (unsyntax template), and\n#,@template to (unsyntax-splicing template).\nThe abbreviated forms are converted into the longer forms when the program\nis read, prior to macro expansion.\n\n" "\nquasisyntax is similar to syntax, but it allows parts\nof the quoted text to be evaluated, in a manner similar to\nquasiquote (Section 6.1).\n\n" "\nWithin a quasisyntax template, subforms of\nunsyntax and unsyntax-splicing forms are evaluated,\nand everything else is treated as ordinary template material, as\nwith syntax.\nThe value of each unsyntax subform is inserted into the output\nin place of the unsyntax form, while the value of each\nunsyntax-splicing subform is spliced into the surrounding list\nor vector structure.\nunsyntax and unsyntax-splicing are valid only within\nquasisyntax expressions.\n\n" "\nquasisyntax expressions may be nested, with each quasisyntax\nintroducing a new level of syntax quotation and each unsyntax or\nunsyntax-splicing taking away a level of quotation.\nAn expression nested within n quasisyntax expressions must\nbe within n unsyntax or unsyntax-splicing expressions to\nbe evaluated.\n\n" "\nquasisyntax can be used in place of with-syntax in many\ncases.\nFor example, the following definition of\ncase employs quasisyntax to\nconstruct its output, using internal recursion in a manner similar to the\ndefinition of cond given under the description of\nwith-syntax above.\n\n" "\n\n" "(define-syntax casedefn:case\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ e c1 c2 ...)\n\n       #`(let ([t e])\n\n           #,(let f ([c1 #'c1] [cmore #'(c2 ...)])\n\n               (if (null? cmore)\n\n                   (syntax-case c1 (else)\n\n                     [(else e1 e2 ...) #'(begin e1 e2 ...)]\n\n                     [((k ...) e1 e2 ...)\n\n                      #'(if (memv t '(k ...)) (begin e1 e2 ...))])\n\n                   (syntax-case c1 ()\n\n                     [((k ...) e1 e2 ...)\n\n                      #`(if (memv t '(k ...))\n\n                            (begin e1 e2 ...)\n\n                            #,(f (car cmore) (cdr cmore)))]))))])))\n" "unsyntax and unsyntax-splicing forms that contain\nzero or more than\none subform are valid only in splicing (list or vector) contexts.\n(unsyntax template ...) is equivalent to\n(unsyntax template) ..., and\n(unsyntax-splicing template ...) is equivalent to\n(unsyntax-splicing template) ....\nThese forms are primarily useful as intermediate forms in the output\nof the quasisyntax expander.\nThey support certain useful nested quasiquotation (quasisyntax)\nidioms [citation3], such as #,@#,@, which has the\neffect of a doubly indirect splicing when used within a doubly nested\nand doubly evaluated quasisyntax expression, as with the\nnested quasiquote examples shown in Section 6.1.\n\n" "\nunsyntax and unsyntax-splicing are auxiliary keywords for\nquasisyntax.\nIt is a syntax violation to reference these identifiers except in contexts\nwhere they are recognized as auxiliary keywords.\n\n") ("syntax:s42" "\ndesc:make-variable-transformer\n\n\nprocedure: (make-variable-transformer procedure)\n\nreturns: a variable transformer\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "As described in the lead-in to this section, transformers may simply be\nprocedures that accept one argument,\na syntax object representing the input form, and return a new syntax object\nrepresenting the output form.\nThe form passed to a transformer usually represents a parenthesized form whose\nfirst subform is the keyword bound to the transformer or just the keyword\nitself.\nmake-variable-transformer may be used to convert a procedure into\na special kind of transformer to which the expander also passes set!\nforms in which the keyword appears just after the set! keyword, as\nif it were a variable to be assigned.\nThis allows the programmer to control what happens when the keyword appears\nin such contexts.\nThe argument, procedure, should accept one argument.\n\n" "\n\n" "(let ([ls (list 0)])\n\n  (define-syntax a\n\n    (make-variable-transformer\n\n      (lambda (x)\n\n        (syntax-case x ()\n\n          [id (identifier? #'id) #'(car ls)]\n\n          [(set! _ e) #'(set-car! ls e)]\n\n          [(_ e ...) #'((car ls) e ...)]))))\n\n  (let ([before a])\n\n    (set! a 1)\n\n    (list before a ls))) --> (0 1 (1))\n" "This syntactic abstraction can be defined more succinctly using\nidentifier-syntax, as shown in Section 8.2,\nbut make-variable-transformer can be used to create\ntransformers that perform arbitrary computations, while\nidentifier-syntax is limited to simple term rewriting,\nlike syntax-rules.\nidentifier-syntax can be defined\nin terms of make-variable-transformer, as shown below.\n\n" "\n\n" "(define-syntax identifier-syntaxdefn:identifier-syntax\n\n  (lambda (x)\n\n    (syntax-case x (set!)\n\n      [(_ e)\n\n       #'(lambda (x)\n\n           (syntax-case x ()\n\n             [id (identifier? #'id) #'e]\n\n             [(_ x (... ...)) #'(e x (... ...))]))]\n\n      [(_ (id exp1) ((set! var val) exp2))\n\n       (and (identifier? #'id) (identifier? #'var))\n\n       #'(make-variable-transformer\n\n           (lambda (x)\n\n             (syntax-case x (set!)\n\n               [(set! var val) #'exp2]\n\n               [(id x (... ...)) #'(exp1 x (... ...))]\n\n               [id (identifier? #'id) #'exp1])))])))\n") ("syntax:s44" "\n\nprocedure: (syntax->datum obj)\n\nreturns: obj stripped of syntactic information\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "The procedure syntax->datum\nstrips all syntactic information from a syntax\nobject and returns the corresponding Scheme \"datum.\"\nIdentifiers stripped in this manner are converted to their symbolic\nnames, which can then be compared with eq?.\nThus, a predicate symbolic-identifier=? might be defined as follows.\n\n" "\n\n" "(define symbolic-identifier=?\n\n  (lambda (x y)\n\n    (eq? (syntax->datum x)\n\n         (syntax->datum y))))\n" "Two identifiers that are free-identifier=? need not be\nsymbolic-identifier=?: two identifiers that refer to the\nsame binding usually have the same name, but the rename and\nprefix subforms of the library's import form\n(page 345) may\nresult in two identifiers with different names but the same binding.\n\n") ("syntax:s45" "\n\n\nprocedure: (datum->syntax template-identifier obj)\n\nreturns: a syntax object\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "datum->syntax constructs a syntax object from obj that\ncontains the same contextual information as\ntemplate-identifier, with the effect that the\nsyntax object behaves\nas if it were introduced into the code when\ntemplate-identifier was introduced.\nThe template identifier is often the keyword of an input form,\nextracted from the form, and the object is often a symbol naming an\nidentifier to be constructed.\n\n" "\ndatum->syntax allows a transformer to \"bend\" lexical\nscoping rules by creating implicit identifiers\nthat behave as if they were present in the input form,\nthus permitting the definition of syntactic\nextensions that introduce visible bindings for or references to\nidentifiers that do not appear explicitly in the input form.\nFor example, we can define a loop expression that\nbinds the variable break to an escape procedure\nwithin the loop body.\n\n" "\n\n" "(define-syntax loop\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(k e ...)\n\n       (with-syntax ([break (datum->syntax #'k 'break)])\n\n         #'(call/cc\n\n             (lambda (break)\n\n               (let f () e ... (f)))))])))\n\n\n(let ([n 3] [ls '()])\n\n  (loop\n\n    (if (= n 0) (break ls))\n\n    (set! ls (cons 'a ls))\n\n    (set! n (- n 1)))) --> (a a a)\n" "Were we to define loop as\n\n" "\n\n" "(define-syntax loop\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ e ...)\n\n       #'(call/cc\n\n           (lambda (break)\n\n             (let f () e ... (f))))])))\n" "the variable break would not be visible in e ....\n\n" "\nIt is also useful for obj to represent an arbitrary\nScheme form, as demonstrated by the following definition of\ninclude.\n\n" "\n\n" "(define-syntax include\n\n  (lambda (x)\n\n    (define read-file\n\n      (lambda (fn k)\n\n        (let ([p (open-input-file fn)])\n\n          (let f ([x (read p)])\n\n            (if (eof-object? x)\n\n                (begin (close-port p) '())\n\n                (cons (datum->syntax k x) (f (read p))))))))\n\n    (syntax-case x ()\n\n      [(k filename)\n\n       (let ([fn (syntax->datum #'filename)])\n\n         (with-syntax ([(expr ...) (read-file fn #'k)])\n\n           #'(begin expr ...)))])))\n" "(include \"filename\") expands into a begin expression\ncontaining the forms found in the file named by\n\"filename\".\nFor example, if the file f-def.ss contains the expression\n(define f (lambda () x)), the expression\n\n" "\n\n" "(let ([x \"okay\"])\n\n  (include \"f-def.ss\")\n\n  (f))\n" "evaluates to \"okay\".\n\n" "\nThe definition of include uses datum->syntax to convert\nthe objects read from the file into syntax objects in the proper\nlexical context, so that identifier references and definitions within\nthose expressions are scoped where the include form appears.\n\n") ("syntax:s49" "\n\n\nprocedure: (generate-temporaries list)\n\nreturns: a list of distinct generated identifiers\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "Transformers can introduce a fixed number of identifiers into their\noutput by naming each identifier.\nIn some cases, however, the number of identifiers to be introduced depends\nupon some characteristic of the input expression.\nA straightforward definition of letrec, for example,\nrequires as many\ntemporary identifiers as there are binding pairs in the\ninput expression.\nThe procedure generate-temporaries is used to construct\nlists of temporary identifiers.\n\n" "\nlist may be any list; its contents are not important.\nThe number of temporaries generated is the number of elements\nin list.\nEach temporary is guaranteed to be different from all other\nidentifiers.\n\n" "\nA definition of letrec that\nuses generate-temporaries is shown below.\n\n" "\n\n" "(define-syntax letrecdefn:letrec\n\n  (lambda (x)\n\n    (syntax-case x ()\n\n      [(_ ((i e) ...) b1 b2 ...)\n\n       (with-syntax ([(t ...) (generate-temporaries #'(i ...))])\n\n         #'(let ([i #f] ...)\n\n             (let ([t e] ...)\n\n               (set! i t)\n\n               ...\n\n               (let () b1 b2 ...))))])))\n" "Any transformer that uses generate-temporaries in this fashion can\nbe rewritten to avoid using it, albeit with a loss of clarity.\nThe trick is to use a recursively defined intermediate form that\ngenerates one temporary per expansion step and completes the\nexpansion after enough temporaries have been generated.\nfullletvaluesHere is a definition of let-values\n(page 99) that uses this technique to support\nmultiple sets of bindings.\n\n" "\n\n" "(define-syntax let-values\n\n  (syntax-rules ()\n\n    [(_ () f1 f2 ...) (let () f1 f2 ...)]\n\n    [(_ ((fmls1 expr1) (fmls2 expr2) ...) f1 f2 ...)\n\n     (lvhelp fmls1 () () expr1 ((fmls2 expr2) ...) (f1 f2 ...))]))\n\n\n(define-syntax lvhelp\n\n  (syntax-rules ()\n\n    [(_ (x1 . fmls) (x ...) (t ...) e m b)\n\n     (lvhelp fmls (x ... x1) (t ... tmp) e m b)]\n\n    [(_ () (x ...) (t ...) e m b)\n\n     (call-with-values\n\n       (lambda () e)\n\n       (lambda (t ...)\n\n         (let-values m (let ([x t] ...) . b))))]\n\n    [(_ xr (x ...) (t ...) e m b)\n\n     (call-with-values\n\n       (lambda () e)\n\n       (lambda (t ... . tmpr)\n\n         (let-values m (let ([x t] ... [xr tmpr]) . b))))]))\n" "The implementation of lvhelp is complicated by the need\nto evaluate all of the right-hand-side expressions before creating\nany of the bindings and by the need to support improper formals\nlists.\n\n") ("libraries:s17" "\n\n\nprocedure: (command-line)\n\nreturns: a list of strings representing command-line arguments\n\nlibraries: (rnrs programs), (rnrs)\n\n" "This procedure may be used within a top-level program to obtain a list\nof the command-line arguments passed to the program.\n\n") ("libraries:s18" "\n\n\nprocedure: (exit)\n\n\n\nprocedure: (exit obj)\n\nreturns: does not return\n\nlibraries: (rnrs programs), (rnrs)\n\n" "This procedure may be used to exit from a top-level program to the\noperating system.\nIf no obj is given, the exit value returned to the operating\nsystem should indicate a normal exit.\nIf obj is false, the exit value returned to the operating\nsystem should indicate an abnormal exit.\nOtherwise, obj is translated into an exit value as\nappropriate for the operating system.\n\n\n\n") ("records:s13" "\n\n\nsyntax: (define-record-type record-name clause ...)\n\n\n\nsyntax: (define-record-type (record-name constructor pred) clause ...)\n\nlibraries: (rnrs records syntactic), (rnrs)\n\n" "A define-record-type form, or record definition, is a definition\nand may appear anywhere other definitions may appear.\nIt defines a record\ntype identified by record-name, plus a predicate, constructor, accessors,\nand mutators for the record type.\nIf the record definition takes the first form above, the names of the constructor\nand predicate are derived from record-name: make-record-name\nfor the constructor and record-name? for the predicate.\nIf the record definition takes the second form above, the name of the constructor\nis constructor and the name of the predicate is pred.\nAll names defined by a record definition are scoped where the record definition\nappears.\n\n" "\nThe clauses clause ... of the record definition determine\nthe fields of the record type and the names of their accessors\nand mutators; its parent type, if any; its construction protocol; whether\nit is nongenerative and, if so, whether its uid is specified; whether\nit is sealed; and whether it is opaque.\nThe syntax and impact of each clause is described below.\n\n" "\nNone of the clauses is required; thus, the simplest record definition is\n\n" "\n\n" "(define-record-type record-name)\n" "which defines a new, generative, non-sealed, non-opaque record type with no parent\nand no fields, plus a constructor of no arguments and a predicate.\n\n" "\nAt most one of each kind of clause may be present in the set of clauses, and\nif a parent clause is present, a parent-rtd clause must not\nbe present.\nThe clauses that appear may appear in any order.\n\n\n" "\n" "Fields clause.  A (fields field-spec ...) clause\ndeclares the fields of the record type.\nEach field-spec must take one of the following forms:\n\n" "\n\n" "field-name\n\n(immmutable field-name)\n\n(mutable field-name)\n\n(immmutable field-name accessor-name)\n\n(mutable field-name accessor-name mutator-name)\n" "where field-name, accessor-name, and mutator-name are identifiers.\nThe first form, field-name, is equivalent to (immutable field-name).\nThe value of a field declared immutable may not be changed, and no mutator is\ncreated for it.\nWith the first three forms, the name of the accessor is\nrname-fname, where rname is the record\nname and fname is the field name.\nWith the third form, the name of the accessor is\nrname-fname-set!.\nThe fourth and fifth forms explicitly declare the accessor and mutator names.\n\n" "\nIf no fields clause is present or the list field-spec ...\nis empty, the record type has no fields (other than parent fields, if any).\n\n\n" "\n" "Parent clause.  A (parent parent-name) clause declares the parent record type;\nparent-name must be the name of a non-sealed record type previously\ndefined via define-record-type.\nInstances of a record type are also considered instances of its parent record\ntype and have all the fields of its parent record type in addition to those\ndeclared via the fields clause.\n\n" "\n" "Nongenerative clause.  A nongenerative clause may take one of two forms:\n\n" "\n\n" "(nongenerative)\n\n(nongenerative uid)\n" "where uid is a symbol.\nThe first form is equivalent to the second, with a uid generated by the\nimplementation at macro-expansion time.\nWhen a define-record-type form with a nongenerative clause is\nevaluated, a new type is created if and only if the uid is not the uid\nof an existing record type.\n\n" "\nIf it is the uid of an existing record type, the parent, field-names,\nsealed property, and opaque property must match as follows.\n\n" "\n\nIf a parent is specified, the existing record type must have the same\nparent rtd (by eqv?).\nIf a parent is not specified, the existing record type must not have\na parent.\n\n\nThe same number of fields must be provided, with the same names and in\nthe same order, and the mutability of each field must be the same.\n\n\nIf a (sealed #t) clause is present, the existing record type\nmust be sealed.\nOtherwise, the existing record type must not be sealed.\n\n\nIf an (opaque #t) clause is present, the existing record type\nmust be opaque.\nOtherwise, the existing record type must be opaque if and only if\nan opaque parent type is specified.\n\n" "\n\n" "\nIf these constraints are met, no new record type is created, and the\nother products of the record-type definition (constructor, predicate,\naccessors, and mutators) operate on records of the existing type.\nIf these constraints are not met, the implementation may treat it as a\nsyntax violation, or it may raise a run-time exception with condition type\n&assertion.\n\n" "\nWith the first form of nongenerative clause, the generated\nuid can be the uid of an existing record type only if the\nsame definition is executed multiple times, e.g., if it appears in\nthe body of a procedure that is invoked multiple times.\n\n" "\nIf uid is not the uid of an existing record type, or if no\nnongenerative clause is present, a new record type is created.\n\n" "\n" "Protocol clause.  A (protocol expression) determines the protocol that\nthe generated constructor uses to construct instances of the record\ntype.\nIt must evaluate to a procedure, and this procedure should be an\nappropriate protocol for the record type, as described on\npage 326.\n\n" "\n" "Sealed clause.  page:sealedA sealed clause of the form (sealed #t) declares that the\nrecord type is sealed.\nThis means that it cannot be extended, i.e., cannot be used as the\nparent for another record definition or make-record-type-descriptor\ncall.\nIf no sealed clause is present or if one of the form\n(sealed #f) is present, the record type is not sealed.\n\n" "\n" "Opaque clause.  page:opaqueAn opaque clause of the form (opaque #t) declares that the\nrecord type is opaque.\nInstances of an opaque record type are not considered records by the\nrecord? predicate or, more importantly, the rtd-extraction\nprocedure record-rtd, which are both described in\nSection 9.3.\nThus, it is not possible for code that does not have access to the\nrecord-name, accessors, or mutators to access or modify any\nof the fields of an opaque record type.\nA record type is also opaque if its parent is opaque.\nIf no opaque clause is present or if one of the form\n(opaque #f) is present, and the parent, if any, is not\nopaque, the record type is not opaque.\n\n" "\n" "Parent-rtd clause.  A (parent-rtd parent-rtd parent-rcd) clause is an alternative\nto the parent clause for specifying the parent record type, along\nwith a parent record constructor descriptor.\nIt is primarily useful when the parent rtd and rcd were obtained via calls to\nmake-record-type-descriptor and make-record-constructor-descriptor.\n\n" "\nparent-rtd must evaluate to an rtd or #f.\nIf parent-rtd evaluates to #f, parent-rcd must\nalso evaluate to #f.\nOtherwise, parent-rcd must evaluate to an rcd or #f.\nIf parent-rcd evaluates to an rcd, it must encapsulate an rtd\nequivalent (by eqv?) to the value of parent-rtd.\nIf the value of parent-rcd is #f, it is treated as an rcd\nfor the value of parent-rtd with a default protocol.\n\n" "\nThe define-record-type form is designed in such a way that it is\nnormally possible for a compiler to determine the shapes of the record\ntypes it defines, including the offsets for all fields.\nThis guarantee does not hold, however, when the parent-rtd clause\nis used, since the parent rtd might not be determinable until run time.\nThus, the parent clause is preferred over the parent-rtd\nclause whenever the parent clause suffices.\n\n\n") ("records:s16" "\n\n\nsyntax: fields\n\n\n\nsyntax: mutable\n\n\n\nsyntax: immutable\n\n\n\nsyntax: parent\n\n\n\nsyntax: protocol\n\n\n\nsyntax: sealed\n\n\n\nsyntax: opaque\n\n\n\nsyntax: nongenerative\n\n\n\nsyntax: parent-rtd\n\nlibraries: (rnrs records syntactic), (rnrs)\n\n" "These identifiers are auxiliary keywords for define-record-type.\nIt is a syntax violation to reference these identifiers except in\ncontexts where they are recognized as auxiliary keywords.\n\n\n") ("records:s20" "\n\n\nprocedure: (make-record-type-descriptor name parent uid s? o? fields)\n\nreturns: a record-type descriptor (rtd) for a new or existing record type\n\nlibraries: (rnrs records procedural), (rnrs)\n\n" "name must be a symbol, parent must be #f or the\nrtd of a non-sealed record type, uid must be #f or\na symbol, and fields must be a vector, each element of which\nis a two-element list of the form (mutable field-name)\nor (immutable field-name).\nThe field names field-name ... must be symbols and need\nnot be distinct from each other.\n\n" "\nIf uid is #f or is not the uid of an existing record\ntype, this procedure creates a new record type and returns a record-type\ndescriptor (rtd) for the new type. \nThe type has the parent type (page 325) described by\nparent, if nonfalse; the uid specified by uid, if nonfalse;\nand the fields specified by fields.\nIt is sealed (page 330) if s? is nonfalse.\nIt is opaque (page 330) if opaque is nonfalse or\nthe parent (if specified) is opaque.\nThe name of the new record type is name and the names of the fields are\nfield-name ....\n\n" "\nIf uid is nonfalse and is the uid (page 325)\nof an existing record type, the parent, fields, s?,\nand o? arguments must match the corresponding characteristics\nof the existing record type.\nThat is, parent must be the same (by eqv?); the number\nof fields must be the same; the fields must\nhave the same names, be in the same order, and have the same mutability;\ns? must be false if and only\nif the existing record type is sealed; and, if a parent is not specified\nor is not opaque, o? must be false if and only if the existing\nrecord type is opaque.\nIf this is the case, make-record-type-descriptor\nreturns the rtd for the existing record type.\nOtherwise, an exception with condition type &assertion is raised.\n\n" "\nUsing the rtd returned by make-record-type-descriptor, programs\ncan generate constructors,\ntype predicates, field accessors, and field mutators dynamically.\nThe following code demonstrates how the procedural interface might\nbe used to create a point record type and associated\ndefinitions similar to those of the second point record\ndefinition in Section 9.1, with a mutable\nx field and an immutable y field.\n\n" "\n\n" "(define point-rtd (make-record-type-descriptor 'point #f #f #f #f\n\n                '#((mutable x) (immutable y))))\n\n(define point-rcd (make-record-constructor-descriptor point-rtd\n\n                    #f #f))\n\n(define make-point (record-constructor point-rcd))\n\n(define point? (record-predicate point-rtd))\n\n(define point-x (record-accessor point-rtd 0))\n\n(define point-y (record-accessor point-rtd 1))\n\n(define point-x-set! (record-mutator point-rtd 0))\n" "See the additional examples given at the end of this section.\n\n\n") ("records:s23" "\n\n\nprocedure: (record-type-descriptor? obj)\n\nreturns: #f if obj is a record-type descriptor, otherwise #f\n\nlibraries: (rnrs records procedural), (rnrs)\n\n" "See the examples given at the end of this section.\n\n\n") ("records:s24" "\n\n\nprocedure: (make-record-constructor-descriptor rtd parent-rcd protocol)\n\nreturns: a record-constructor descriptor (rcd)\n\nlibraries: (rnrs records procedural), (rnrs)\n\n" "An rtd alone is sufficient to create predicates, accessors, and mutators.\nTo create a constructor, however, it is first necessary to create a record-constructor\ndescriptor (rcd) for the record type.\nAn rcd encapsulates three pieces of information: the rtd of the record type\nfor which the rcd has been created, the parent rcd (if any), and the\nprotocol.\n\n" "\nThe parent-rcd argument must be an rcd or #f.\nIf it is an rcd, rtd must have a parent rtd, and the parent rtd must be\nthe same as the rtd encapsulated within parent-rcd.\nIf parent-rcd is false, either rtd has no parent or an rcd with a default\nprotocol is assumed for the parent.\n\n" "\nThe protocol argument must be a procedure or #f.\nIf it is #f, a default protocol is assumed.\nProtocols are discussed on page 326.\n\n" "\nSee the examples given at the end of this section.\n\n\n") ("records:s28" "\n\n\nsyntax: (record-type-descriptor record-name)\n\nreturns: the rtd for the record type identified by record-name\n\n\n\nsyntax: (record-constructor-descriptor record-name)\n\nreturns: the rcd for the record type identified by record-name\n\nlibraries: (rnrs records syntactic), (rnrs)\n\n" "Each record definition creates, behind the scenes, an rtd and rcd for the\ndefined record type.\nThese procedures allow the rtd and rcd to be obtained and used like any\nother rtd or rcd.\nrecord-name must be the name of a record previously defined via\ndefine-record-type.\n\n\n") ("records:s29" "\n\n\nprocedure: (record-constructor rcd)\n\nreturns: a record constructor for the record type encapsulated within rcd\n\nlibraries: (rnrs records procedural), (rnrs)\n\n" "The behavior of the record constructor is determined by the protocol\nand parent rcd (if any) also encapsulated within rcd.\n\n" "\nSee the examples given at the end of this section.\n\n\n") ("records:s30" "\n\n\nprocedure: (record-predicate rtd)\n\nreturns: a predicate for rtd\n\nlibraries: (rnrs records procedural), (rnrs)\n\n" "This procedure returns a predicate that accepts one argument and returns\n#t if the argument is an instance of the record-type described by\nrtd, #f otherwise.\n\n" "\nSee the examples given at the end of this section.\n\n\n") ("records:s31" "\n\n\nprocedure: (record-accessor rtd idx)\n\nreturns: an accessor for the field of rtd specified by idx\n\nlibraries: (rnrs records procedural), (rnrs)\n\n" "idx must be a nonnegative integer less than the number of fields of\nrtd, not counting parent fields.\nAn idx value of 0 specifies the first field given in the\ndefine-record-type form or make-record-type-descriptor\ncall that created the record type, 1 specifies the second, and so on.\n\n" "\nA child rtd cannot be used directly to create accessors for parent fields.\nTo create an accessor for a parent field, the record-type descriptor of\nthe parent must be used instead.\n\n" "\nSee the examples given at the end of this section.\n\n\n") ("records:s32" "\n\n\nprocedure: (record-mutator rtd idx)\n\nreturns: a mutator for the field of rtd specified by idx\n\nlibraries: (rnrs records procedural), (rnrs)\n\n" "idx must be a nonnegative integer less than the number of fields of\nrtd, not counting parent fields.\nAn idx value of 0 specifies the first field given in the\ndefine-record-type form or make-record-type-descriptor\ncall that created the record type, 1 specifies the second, and so on.\nThe indicated field must be mutable; otherwise, an exception with condition\ntype &assertion is raised.\n\n" "\nA child rtd cannot be used directly to create mutators for parent fields.\nTo create a mutator for a parent field, the record-type descriptor of\nthe parent must be used instead.\n\n\n" "\n" "The following example illustrates the creation of parent and child record\ntypes, predicates, accessors, mutators, and constructors using the procedures\ndescribed in this section.\n\n" "\n\n" "(define rtd/parent\n\n  (make-record-type-descriptor 'parent #f #f #f #f\n\n    '#((mutable x))))\n\n\n(record-type-descriptor? rtd/parent) --> #t\n\n(define parent? (record-predicate rtd/parent))\n\n(define parent-x (record-accessor rtd/parent 0))\n\n(define set-parent-x! (record-mutator rtd/parent 0))\n\n\n(define rtd/child\n\n  (make-record-type-descriptor 'child rtd/parent #f #f #f\n\n    '#((mutable x) (immutable y))))\n\n\n(define child? (record-predicate rtd/child))\n\n(define child-x (record-accessor rtd/child 0))\n\n(define set-child-x! (record-mutator rtd/child 0))\n\n(define child-y (record-accessor rtd/child 1))\n\n\n(record-mutator rtd/child 1) --> exception: immutable field\n\n\n(define rcd/parent\n\n  (make-record-constructor-descriptor rtd/parent #f\n\n    (lambda (new) (lambda (x) (new (* x x))))))\n\n\n(record-type-descriptor? rcd/parent) --> #f\n\n\n(define make-parent (record-constructor rcd/parent))\n\n\n(define p (make-parent 10))\n\n(parent? p) --> #t\n\n(parent-x p) --> 100\n\n(set-parent-x! p 150)\n\n(parent-x p) --> 150\n\n\n(define rcd/child\n\n  (make-record-constructor-descriptor rtd/child rcd/parent\n\n    (lambda (pargs->new)\n\n      (lambda (x y)\n\n        ((pargs->new x) (+ x 5) y)))))\n\n\n(define make-child (record-constructor rcd/child))\n\n(define c (make-child 10 'cc))\n\n(parent? c) --> #t\n\n(child? c) --> #t\n\n(child? p) --> #f\n\n\n(parent-x c) --> 100\n\n(child-x c) --> 15\n\n(child-y c) --> cc\n\n\n(child-x p) --> exception: invalid argument type\n") ("records:s34" "\n\n\nprocedure: (record-type-name rtd)\n\nreturns: the name associated with rtd\n\nlibraries: (rnrs records inspection), (rnrs)\n\n" "\n" "\n(define record->name\n\n  (lambda (x)\n\n    (and (record? x) (record-type-name (record-rtd x)))))\n\n\n(define-record-type dim (fields w l h))\n\n(record->name (make-dim 10 15 6)) --> dim\n\n\n(define-record-type dim (fields w l h) (opaque #t))\n\n(record->name (make-dim 10 15 6)) --> #f\n") ("records:s35" "\n\nprocedure: (record-type-parent rtd)\n\nreturns: the parent of rtd, or #f if it has no parent\n\nlibraries: (rnrs records inspection), (rnrs)\n\n" "\n" "\n(define-record-type point (fields x y))\n\n(define-record-type cpoint (parent point) (fields color))\n\n(record-type-parent (record-type-descriptor point)) --> #f\n\n(record-type-parent (record-type-descriptor cpoint)) --> #<rtd>\n") ("records:s36" "\n\nprocedure: (record-type-uid rtd)\n\nreturns: the uid of rtd, or #f if it has no uid\n\nlibraries: (rnrs records inspection), (rnrs)\n\n" "Whether a record type created without a programmer-supplied uid\nactually has one anyway is left up to the implementation, so this\nprocedure is never guaranteed to return #f.\n\n" "\n\n" "(define-record-type point (fields x y))\n\n(define-record-type cpoint\n\n  (parent point)\n\n  (fields color)\n\n  (nongenerative e40cc926-8cf4-4559-a47c-cac636630314))\n\n(record-type-uid (record-type-descriptor point)) --> unspecified\n\n(record-type-uid (record-type-descriptor cpoint)) -->\n\n                             e40cc926-8cf4-4559-a47c-cac636630314\n") ("records:s37" "\n\nprocedure: (record-type-generative? rtd)\n\nreturns: #t if the record type described by rtd is generative, #f otherwise\n\n\n\nprocedure: (record-type-sealed? rtd)\n\nreturns: #t if the record type described by rtd is sealed, #f otherwise\n\n\n\nprocedure: (record-type-opaque? rtd)\n\nreturns: #t if the record type described by rtd is opaque, #f otherwise\n\nlibraries: (rnrs records inspection), (rnrs)\n\n" "\n" "\n(define-record-type table\n\n  (fields keys vals)\n\n  (opaque #t))\n\n(define rtd (record-type-descriptor table))\n\n(record-type-generative? rtd) --> #t\n\n(record-type-sealed? rtd) --> #f\n\n(record-type-opaque? rtd) --> #t\n\n\n(define-record-type cache-table\n\n  (parent table)\n\n  (fields key val)\n\n  (nongenerative))\n\n(define rtd (record-type-descriptor cache-table))\n\n(record-type-generative? rtd) --> #f\n\n(record-type-sealed? rtd) --> #f\n\n(record-type-opaque? rtd) --> #t\n") ("records:s38" "\n\nprocedure: (record-type-field-names rtd)\n\nreturns: a vector containing the names of the fields of the type described by rtd\n\nlibraries: (rnrs records inspection), (rnrs)\n\n" "The vector returned by this procedure is immutable: the effect on rtd\nof modifying it is unspecified.\nThe vector does not include parent field names.\nThe order of the names in the vector is the same as the order in which the\nfields were specified in the define-record-type form or\nmake-record-type-descriptor call that created the record type.\n\n" "\n\n" "(define-record-type point (fields x y))\n\n(define-record-type cpoint (parent point) (fields color))\n\n(record-type-field-names\n\n  (record-type-descriptor point)) --> #(x y)\n\n(record-type-field-names\n\n  (record-type-descriptor cpoint)) --> #(color)\n") ("records:s39" "\n\nprocedure: (record-field-mutable? rtd idx)\n\nreturns: #t if the specified field of rtd is mutable, #f otherwise\n\nlibraries: (rnrs records inspection), (rnrs)\n\n" "idx must be a nonnegative integer less than the number of fields of\nrtd, not counting parent fields.\nAn idx value of 0 specifies the first field given in the\ndefine-record-type form or make-record-type-descriptor\ncall that created the record type, 1 specifies the second, and so on.\n\n" "\n\n" "(define-record-type point (fields (mutable x) (mutable y)))\n\n(define-record-type cpoint (parent point) (fields color))\n\n\n(record-field-mutable? (record-type-descriptor point) 0) --> #t\n\n(record-field-mutable? (record-type-descriptor cpoint) 0) --> #f\n") ("records:s40" "\n\nprocedure: (record? obj)\n\nreturns: #t if obj is a non-opaque record instance, #f otherwise\n\nlibraries: (rnrs records inspection), (rnrs)\n\n" "When passed an instance of an opaque record type, record? returns\n#f.\nWhile an instance of an opaque record type is, in essence, a record,\nthe point of opacity is to hide all representation information from the\nparts of a program that should not have access to the information,\nand this includes whether an object is a record.\nFurthermore, the primary purpose of this predicate is to allow programs to\ncheck whether it is possible to obtain from the argument an rtd via the\nrecord-rtd procedure described below.\n\n" "\n\n" "(define-record-type statement (fields str))\n\n(define q (make-statement \"He's dead, Jim\"))\n\n(statement? q) --> #t\n\n(record? q) --> #t\n\n\n(define-record-type opaque-statement (fields str) (opaque #t))\n\n(define q (make-opaque-statement \"He's moved on, Jim\"))\n\n(opaque-statement? q) --> #t\n\n(record? q) --> #f\n") ("records:s41" "\n\nprocedure: (record-rtd record)\n\nreturns: the record-type descriptor (rtd) of record\n\nlibraries: (rnrs records inspection), (rnrs)\n\n" "The argument must be an instance of a non-opaque record type.\nIn combination with some of the other procedures described in this\nsection and Section 9.2,\nrecord-rtd allows the inspection or mutation\nof record instances, even if the type of the instance is unknown\nto the inspector.\nThis capability is illustrated by the procedure print-fields\nbelow, which accepts a record argument and writes the name and value of\neach field of the record.\n\n" "\n\n" "(define print-fields\n\n  (lambda (r)\n\n    (unless (record? r)\n\n      (assertion-violation 'print-fields \"not a record\" r))\n\n    (let loop ([rtd (record-rtd r)])\n\n      (let ([prtd (record-type-parent rtd)])\n\n        (when prtd (loop prtd)))\n\n      (let* ([v (record-type-field-names rtd)]\n\n             [n (vector-length v)])\n\n        (do ([i 0 (+ i 1)])\n\n            ((= i n))\n\n          (write (vector-ref v i))\n\n          (display \"=\")\n\n          (write ((record-accessor rtd i) r))\n\n          (newline))))))\n" "With the familiar definitions of point and cpoint:\n\n" "\n\n" "(define-record-type point (fields x y))\n\n(define-record-type cpoint (parent point) (fields color))\n" "the expression (print-fields (make-cpoint -3 7 'blue)) displays\nthe following three lines.\n\n" "\n\n" "x=-3\n\ny=7\n\ncolor=blue\n") ("binding:s2" "\n\n\nsyntax: variable\n\nreturns: the value of variable\n\n" "Any identifier appearing as an expression in a program is a variable\nif a visible variable binding for the identifier exists, e.g., the\nidentifier appears within the scope of a binding created by define,\nlambda, let, or some other variable-binding construct.\n\n" "\n\n" "list --> #<procedure>\n\n(define x 'a)\n\n(list x x) --> (a a)\n\n(let ([x 'b])\n\n  (list x x)) --> (b b)\n\n(let ([let 'let]) let) --> let\n" "It is a syntax violation for an identifier reference to appear within a\nlibrary form or top-level program if it is not bound as a variable,\nkeyword, record name, or other entity.\nSince the scope of the definitions in a library, top-level\nprogram, lambda, or other local body is the entire body, it\nis not necessary for the definition of a variable to appear before\nits first reference appears, as long as the reference is not actually\nevaluated until the definition has been completed.\nSo, for example, the reference to g within the definition of\nf below\n\n" "\n\n" "(define f\n\n  (lambda (x)\n\n    (g x)))\n\n(define g\n\n  (lambda (x)\n\n    (+ x x)))\n" "is okay, but the reference to g in the definition of\nq below is not.\n\n" "\n\n" "(define q (g 3))\n\n(define g\n\n  (lambda (x)\n\n    (+ x x)))\n") ("binding:s3" "\n\n\nsyntax: (lambda formals body1 body2 ...)\n\nreturns: a procedure\n\nlibraries: (rnrs base), (rnrs)\n\n" "The lambda syntactic form is used to create procedures.\nAny operation that creates a procedure or establishes local variable\nbindings is ultimately defined in terms of lambda or\ncase-lambda.\n\n" "\nThe variables in formals are the formal parameters of the\nprocedure, and the sequence of subforms\nbody1 body2 ... is its body.\n\n" "\nThe body may begin with a sequence of\ndefinitions, in which case the bindings created by the definitions are\nlocal to the body.\nIf definitions are present, the keyword bindings are used and discarded\nwhile expanding the body, and the body is expanded into a\nletrec* expression formed from the variable definitions and the\nremaining expressions, as described on page 292.\nThe remainder of this description of lambda assumes that this\ntransformation has taken place, if necessary, so that the body is a\nsequence of expressions without definitions.\n\n" "\nWhen the procedure is created, the bindings of all variables occurring\nfree within the body, excluding the formal parameters, are retained with\nthe procedure.\nSubsequently, whenever the procedure is applied to a sequence of\nactual parameters, the formal parameters are bound to the actual\nparameters, the retained bindings are restored, and the body is\nevaluated.\n\n" "\nUpon application, the formal parameters defined by formals are\nbound to the actual parameters as follows.\n\n" "\n\nIf formals is a proper list of variables, e.g., (x y z), each\nvariable is bound to the corresponding actual parameter.\nAn exception with condition type &assertion is raised\nif too few or too many actual parameters are supplied.\n\n\nIf formals is a single variable (not in a list), e.g., z, it\nis bound to a list of the actual parameters.\n\n\nIf formals is an improper list of variables terminated by a\nvariable, e.g., (x y . z), each variable but the last is bound\nto the corresponding actual parameter.\nThe last variable is bound to a list of the remaining actual parameters.\nAn exception with condition type &assertion is raised\nif too few actual parameters are supplied.\n\n" "\n\n" "\nWhen the body is evaluated, the expressions in the body are evaluated in sequence,\nand the procedure returns the values of the last expression.\n\n" "\nProcedures do not have a printed representation in the usual sense.\nScheme systems print procedures in different ways; this book uses the\nnotation #<procedure>.\n\n" "\n\n" "(lambda (x) (+ x 3)) --> #<procedure>\n\n((lambda (x) (+ x 3)) 7) --> 10\n\n((lambda (x y) (* x (+ x y))) 7 13) --> 140\n\n((lambda (f x) (f x x)) + 11) --> 22\n\n((lambda () (+ 3 4))) --> 7\n\n\n((lambda (x . y) (list x y))\n\n 28 37) --> (28 (37))\n\n((lambda (x . y) (list x y))\n\n 28 37 47 28) --> (28 (37 47 28))\n\n((lambda (x y . z) (list x y z))\n\n 1 2 3 4) --> (1 2 (3 4))\n\n((lambda x x) 7 13) --> (7 13)\n") ("binding:s13" "\n\n\nsyntax: (case-lambda clause ...)\n\nreturns: a procedure\n\nlibraries: (rnrs control), (rnrs)\n\n" "A case-lambda expression consists of a set of clauses, each\nresembling a lambda expression.\nEach clause has the form below.\n\n" "\n\n" "[formals body1 body2 ...]\n" "The formal parameters of a clause are defined by formals in the\nsame manner as for a lambda expression.\nThe number of arguments accepted by the procedure value of a\ncase-lambda expression is\ndetermined by the numbers of arguments accepted by the individual\nclauses.\n\n" "\nWhen a procedure created with case-lambda is invoked, the clauses\nare considered in order.\nThe first clause that accepts the given number of actual parameters is\nselected, the formal parameters defined by its formals are\nbound to the corresponding actual parameters, and the body is\nevaluated as described for lambda above.\nIf formals in a clause is a proper list of identifiers, then\nthe clause accepts exactly as many actual parameters as there are\nformal parameters (identifiers) in formals.\nAs with a lambda formals, a case-lambda clause\nformals\nmay be a single identifier, in which case the clause accepts any\nnumber of arguments, or an improper list of identifiers terminated\nby an identifier, in which\ncase the clause accepts any number of arguments greater than or\nequal to the number of formal parameters excluding the terminating\nidentifier.\nIf no clause accepts the number of actual parameters supplied, an\nexception with condition type &assertion is raised.\n\n" "\nThe following definition for make-list uses case-lambda to\nsupport an optional fill parameter.\n\n" "\n\n" "(define make-list\n\n  (case-lambda\n\n    [(n) (make-list n #f)]\n\n    [(n x)\n\n     (do ([n n (- n 1)] [ls '() (cons x ls)])\n\n         ((zero? n) ls))]))\n" "The substring procedure may be extended with case-lambda to\naccept either no end index, in which case it defaults to the\nend of the string, or no start and end indices, in which\ncase substring is equivalent to string-copy:\n\n" "\n\n" "(define substring1\n\n  (case-lambda\n\n    [(s) (substring1 s 0 (string-length s))]\n\n    [(s start) (substring1 s start (string-length s))]\n\n    [(s start end) (substring s start end)]))\n" "It is also possible to default the start index rather than\nthe end index when only one index is supplied:\n\n" "\n\n" "(define substring2\n\n  (case-lambda\n\n    [(s) (substring2 s 0 (string-length s))]\n\n    [(s end) (substring2 s 0 end)]\n\n    [(s start end) (substring s start end)]))\n" "It is even possible to require that both or neither of the start\nand end indices be supplied, simply by leaving out the middle\nclause:\n\n" "\n\n" "(define substring3\n\n  (case-lambda\n\n    [(s) (substring3 s 0 (string-length s))]\n\n    [(s start end) (substring s start end)]))\n") ("binding:s16" "\n\n\nsyntax: (let ((var expr) ...) body1 body2 ...)\n\nreturns: the values of the final body expression\n\nlibraries: (rnrs base), (rnrs)\n\n" "let establishes local variable bindings.\nEach variable var is bound to the value of the corresponding\nexpression expr.\nThe body of the let, in which the variables are bound, is\nthe sequence of subforms body1 body2 ... and is\nprocessed and evaluated like a lambda body.\n\n" "\nThe forms let, let*, letrec, and letrec*\n(the others are described after let) are similar but serve\nslightly different purposes.\nWith let, in contrast with let*, letrec, and letrec*,\nthe expressions expr ... are all outside the scope of\nthe variables var ....\nAlso, in contrast with let* and letrec*, no ordering is implied for the\nevaluation of the expressions expr ....\nThey may be evaluated from left to right, from right to left, or\nin any other order at the discretion of the implementation.\nUse let whenever the values are independent of the variables\nand the order of evaluation is unimportant.\n\n" "\n\n" "(let ([x (* 3.0 3.0)] [y (* 4.0 4.0)])\n\n  (sqrt (+ x y))) --> 5.0\n\n\n(let ([x 'a] [y '(b c)])\n\n  (cons x y)) --> (a b c)\n\n\n(let ([x 0] [y 1])\n\n  (let ([x y] [y x])\n\n    (list x y))) --> (1 0)\n" "The following definition of let shows the\ntypical derivation of let from lambda.\n\n" "\n\n" "(define-syntax let\n\n  (syntax-rules ()\n\n    [(_ ((x e) ...) b1 b2 ...)\n\n     ((lambda (x ...) b1 b2 ...) e ...)]))\n" "Another form of let, named let, is described in\nSection 5.4, and a definition of the full\nlet can be found on page 312.\n\n\n") ("binding:s18" "\n\n\nsyntax: (let* ((var expr) ...) body1 body2 ...)\n\nreturns: the values of the final body expression\n\nlibraries: (rnrs base), (rnrs)\n\n" "let* is similar to let except that the\nexpressions expr ... are evaluated in sequence\nfrom left to right, and\neach of these expressions is within the scope of the variables to the\nleft.\nUse let* when there is a linear dependency among the values or\nwhen the order of evaluation is important.\n\n" "\n\n" "(let* ([x (* 5.0 5.0)]\n\n       [y (- x (* 4.0 4.0))])\n\n  (sqrt y)) --> 3.0\n\n\n(let ([x 0] [y 1])\n\n  (let* ([x y] [y x])\n\n    (list x y))) --> (1 1)\n" "Any let* expression may be converted to a set of\nnested let expressions.\nThe following definition of let* demonstrates\nthe typical transformation.\n\n" "\n\n" "(define-syntax let*defn:let*\n\n  (syntax-rules ()\n\n    [(_ () e1 e2 ...)\n\n     (let () e1 e2 ...)]\n\n    [(_ ((x1 v1) (x2 v2) ...) e1 e2 ...)\n\n     (let ((x1 v1))\n\n       (let* ((x2 v2) ...) e1 e2 ...))]))\n") ("binding:s20" "\n\nsyntax: (letrec ((var expr) ...) body1 body2 ...)\n\nreturns: the values of the final body expression\n\nlibraries: (rnrs base), (rnrs)\n\n" "letrec is similar to let and let*, except\nthat all of the expressions expr ...\nare within the scope of all of the variables var ....\nletrec allows the definition of\nmutually recursive procedures.\n\n" "\n\n" "(letrec ([sum (lambda (x)\n\n                (if (zero? x)\n\n                    0\n\n                    (+ x (sum (- x 1)))))])\n\n  (sum 5)) --> 15\n" "The order of evaluation of the expressions\nexpr ... is unspecified, so a program must not\nevaluate a reference\nto any of the variables bound by the letrec expression before\nall of the values have been computed.\n(Occurrence of a variable within a lambda expression does\nnot count as a reference, unless the resulting procedure is applied\nbefore all of the values have been computed.)\nIf this restriction is violated, an exception with condition type\n&assertion is raised.\n\n" "\nAn expr should not return more than once.\nThat is, it should not return both normally and via the invocation of a\ncontinuation obtained during its evaluation, and it should not return\ntwice via two invocations of such a continuation.\nImplementations are not required to detect a violation of this restriction,\nbut if they do, an exception with condition type &assertion is\nraised.\n\n" "\nChoose letrec over let or let* when there is a\ncircular dependency among the variables and their values and\nwhen the order of evaluation is unimportant.\nChoose letrec* over letrec when there is a circular\ndependency and the bindings need to be evaluated from left to right.\n\n" "\nA letrec expression of the form\n\n" "\n\n" "(letrec ((var expr) ...) body1 body2 ...)\n" "may be expressed in terms of let and set! as\n\n" "\n\n" "(let ((var #f) ...)\n\n  (let ((temp expr) ...)\n\n    (set! var temp) ...\n\n    (let () body1 body2 ...)))\n" "where temp ... are fresh variables, i.e., ones\nthat do not already appear in the letrec expression,\none for each (var expr) pair.\nThe outer let expression establishes the variable bindings.\nThe initial value given each variable is unimportant, so any value\nsuffices in place of #f.\nThe bindings are established first so that expr ...\nmay contain\noccurrences of the variables, i.e., so that the expressions are computed\nwithin the scope of the variables.\nThe middle let evaluates the values and binds them to the temporary\nvariables, and the set! expressions assign each variable\nto the corresponding value.\nThe inner let is present in case the body contains internal\ndefinitions.\n\n" "\nA definition of letrec that uses this transformation is shown\non page 310.\n\n" "\nThis transformation does not enforce the restriction that\nthe expr expressions must not evaluate any references of or\nassignments to the variables.\nMore elaborate transformations that enforce this restriction and\nactually produce more efficient code are\npossible [citation31].\n\n") ("binding:s22" "\ndesc:letrec*\n\n\nsyntax: (letrec* ((var expr) ...) body1 body2 ...)\n\nreturns: the values of the final body expression\n\nlibraries: (rnrs base), (rnrs)\n\n" "letrec* is similar to letrec, except that\nletrec* evaluates expr ... in sequence from left to right.\nWhile programs must still not evaluate a reference to any var\nbefore the corresponding expr has been evaluated, references to\nvar may be evaluated any time thereafter, including during\nthe evaluation of the expr of any subsequent binding.\n\n" "\nA letrec* expression of the form\n\n" "\n\n" "(letrec* ((var expr) ...) body1 body2 ...)\n" "may be expressed in terms of let and set! as\n\n" "\n\n" "(let ((var #f) ...)\n\n  (set! var expr) ...\n\n  (let () body1 body2 ...))\n" "The outer let expression creates the bindings, each assignment\nevaluates an expression and immediately sets the corresponding variable\nto its value, in sequence, and the inner let evaluates the body.\nlet is used in the latter case rather than begin\nsince the body may include internal definitions as well as expressions.\n\n" "\n\n" "(letrec* ([sum (lambda (x)\n\n                 (if (zero? x)\n\n                     0\n\n                     (+ x (sum (- x 1)))))]\n\n          [f (lambda () (cons n n-sum))]\n\n          [n 15]\n\n          [n-sum (sum n)])\n\n  (f)) --> (15 . 120)\n\n\n(letrec* ([f (lambda () (lambda () g))]\n\n          [g (f)])\n\n  (eq? (g) g)) --> #t\n\n\n(letrec* ([g (f)]\n\n          [f (lambda () (lambda () g))])\n\n  (eq? (g) g)) --> exception: attempt to reference undefined variable f\n") ("binding:s23" "\ndesc:let-values\n\n\nsyntax: (let-values ((formals expr) ...) body1 body2 ...)\n\n\n\nsyntax: (let*-values ((formals expr) ...) body1 body2 ...)\n\nreturns: the values of the final body expression\n\nlibraries: (rnrs base), (rnrs)\n\n" "let-values is a convenient way to receive multiple\nvalues and bind them to variables.\nIt is structured like let but permits an arbitrary\nformals list (like lambda) on each left-hand\nside.\nlet*-values is similar but performs the bindings in\nleft-to-right order, as with let*.\nAn exception with condition type &assertion is raised\nif the number of values returned by an expr is not appropriate\nfor the corresponding formals, as described in the entry\nfor lambda above.\nA definition of let-values is given on page 310.\n\n" "\n\n" "(let-values ([(a b) (values 1 2)] [c (values 1 2 3)])\n\n  (list a b c)) --> (1 2 (1 2 3))\n\n\n(let*-values ([(a b) (values 1 2)] [(a b) (values b a)])\n\n  (list a b)) --> (2 1)\n") ("binding:s24" "\n\n\nsyntax: (define var expr)\n\n\n\nsyntax: (define var)\n\n\n\nsyntax: (define (var0 var1 ...) body1 body2 ...)\n\n\n\nsyntax: (define (var0 . varr) body1 body2 ...)\n\n\n\nsyntax: (define (var0 var1 var2 ... . varr) body1 body2 ...)\n\nlibraries: (rnrs base), (rnrs)\n\n" "In the first form, define creates a new binding of var to\nthe value of expr.\nThe expr should not return more than once.\nThat is, it should not return both normally and via the invocation of a\ncontinuation obtained during its evaluation, and it should not return\ntwice via two invocations of such a continuation.\nImplementations are not required to detect a violation of this restriction,\nbut if they do, an exception with condition type &assertion is\nraised.\n\n" "\nThe second form is equivalent to (define var unspecified),\nwhere unspecified is some unspecified value.\nThe remaining are shorthand forms for\nbinding variables to\nprocedures; they are identical to the following definition in terms of\nlambda.\n\n" "\n\n" "(define var\n\n  (lambda formals\n\n    body1 body2 ...))\n" "where formals is (var1 ...), varr,\nor (var1 var2 ... . varr) for the third,\nfourth, and fifth define formats.\n\n" "\nDefinitions may appear at the front of a library body, anywhere\namong the forms of a top-level-program body, and at the front of a\nlambda or case-lambda body or the body of any form\nderived from lambda, e.g., let, or letrec*.\nAny body that begins with a sequence of definitions is transformed\nduring macro expansion into a letrec* expression as described\non page 292.\n\n" "\nSyntax definitions may appear along with variable definitions wherever\nvariable definitions may appear; see Chapter 8.\n\n" "\n\n" "(define x 3)\n\nx --> 3\n\n\n(define f\n\n  (lambda (x y)\n\n    (* (+ x y) 2)))\n\n(f 5 4) --> 18\n\n\n(define (sum-of-squares x y)\n\n  (+ (* x x) (* y y)))\n\n(sum-of-squares 3 4) --> 25\n\n\n(define f\n\n  (lambda (x)\n\n    (+ x 1)))\n\n(let ([x 2])\n\n  (define f\n\n    (lambda (y)\n\n      (+ y x)))\n\n  (f 3)) --> 5\n\n(f 3) --> 4\n" "A set of definitions may be grouped by enclosing them in a\nbegin form.\nDefinitions grouped in this manner may appear wherever ordinary\nvariable and syntax definitions may appear.\nThey are treated as if written separately, i.e., without the\nenclosing begin form.\nmulti-define-syntaxThis feature allows syntactic extensions to\nexpand into groups of definitions.\n\n" "\n\n" "(define-syntax multi-define-syntax\n\n  (syntax-rules ()\n\n    [(_ (var expr) ...)\n\n     (begin\n\n       (define-syntax var expr)\n\n       ...)]))\n\n(let ()\n\n  (define plus\n\n    (lambda (x y)\n\n        (if (zero? x)\n\n            y\n\n            (plus (sub1 x) (add1 y)))))\n\n  (multi-define-syntax\n\n    (add1 (syntax-rules () [(_ e) (+ e 1)]))\n\n    (sub1 (syntax-rules () [(_ e) (- e 1)])))\n\n  (plus 7 8)) --> 15\n" "Many implementations support an interactive \"top level\" in which variable\nand other definitions may be entered interactively or loaded from files.\nThe behavior of these top-level definitions is outside the scope of the\nRevised6 Report, but as long as top-level variables are defined before\nany references or assignments to them are evaluated, the behavior is\nconsistent across most implementations.\nSo, for example, the reference to g in the top-level definition\nof f below is okay if g is not already defined, and g\nis assumed to name a variable to be defined at some later point.\n\n" "\n\n" "(define f\n\n  (lambda (x)\n\n    (g x)))\n" "If this is then followed by a definition of g before f is\nevaluated, the assumption that g would be defined as a variable is\nproven correct, and a call to f works as expected.\n\n" "\n\n" "(define g\n\n  (lambda (x)\n\n    (+ x x)))\n\n(f 3) --> 6\n" "If g were defined instead as the keyword for a syntactic extension,\nthe assumption that g would be bound as a variable is\nproven false, and if f is not redefined before it is invoked,\nthe implementation is likely to raise an exception.\n\n\n") ("binding:s28" "\n\n\nsyntax: (set! var expr)\n\nreturns: unspecified\n\nlibraries: (rnrs base), (rnrs)\n\n" "set! does not establish a new binding for\nvar but rather alters the value of an existing binding.\nIt first evaluates expr, then assigns\nvar to the value of expr.\nAny subsequent reference to var within the scope of the altered\nbinding evaluates to the new value.\n\n" "\nAssignments are not employed as frequently in Scheme as in most other\nlanguages, but they are useful for implementing state changes.\n\n" "\n\n" "(define flip-flop\n\n  (let ([state #f])\n\n    (lambda ()\n\n      (set! state (not state))\n\n      state)))\n\n\n(flip-flop) --> #t\n\n(flip-flop) --> #f\n\n(flip-flop) --> #t\n" "Assignments are also useful for caching values.\nThe example below uses a technique called memoization,\nin which a procedure records the values associated with old\ninput values so it need not recompute them, to implement a fast\nversion of the otherwise exponential doubly recursive definition\nof the Fibonacci function (see\npage 69).\n\n" "\n\n" "(define memoize\n\n  (lambda (proc)\n\n    (let ([cache '()])\n\n      (lambda (x)\n\n        (cond\n\n          [(assq x cache) => cdr]\n\n          [else\n\n           (let ([ans (proc x)])\n\n             (set! cache (cons (cons x ans) cache))\n\n             ans)])))))\n\n\n(define fibonacci\n\n  (memoize\n\n    (lambda (n)\n\n      (if (< n 2)\n\n          1\n\n          (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))))\n\n\n(fibonacci 100) --> 573147844013817084101\n") ("exceptions:s3" "\n\n\nprocedure: (raise obj)\n\n\n\nprocedure: (raise-continuable obj)\n\nreturns: see below\n\nlibraries: (rnrs exceptions), (rnrs)\n\n" "Both of these procedures raise an exception, effectively invoking the\ncurrent exception handler, passing obj as the only argument.\nFor raise, the exception is non-continuable, while\nfor raise-continuable, the exception is continuable.\nAn exception handler may return (with zero or more values) to the\ncontinuation of a continuable exception.\nIf an exception handler attempts to return to the continuation of a\nnon-continuable exception, however, a new exception with condition type\n&non-continuable is raised.\nThus, raise never returns, while raise-continuable\nmay return zero or more values, depending upon the exception handler.\n\n" "\nIf the current exception handler, p, was established via a\nguard form or call to with-exception-handler, the\ncurrent exception handler is reset to the handler that was current when\np was established before raise or\nraise-continuable invokes p.\nThis allows p to defer to the preexisting exception handler simply\nby reraising the exception, and it helps prevent infinite regression when\nan exception handler inadvertently causes a different exception to be raised.\nIf p returns and the exception is continuable, p is\nreinstated as the current exception handler.\n\n" "\n\n" "(raise\n\n  (condition\n\n    (make-error)\n\n    (make-message-condition \"no go\"))) --> error: no go\n\n(raise-continuable\n\n  (condition\n\n    (make-violation)\n\n    (make-message-condition \"oops\"))) --> violation: oops\n\n(list\n\n  (call/cc\n\n    (lambda (k)\n\n      (vector\n\n        (with-exception-handler\n\n          (lambda (x) (k (+ x 5)))\n\n          (lambda () (+ (raise 17) 8))))))) --> (22)\n\n(list\n\n  (vector\n\n    (with-exception-handler\n\n      (lambda (x) (+ x 5))\n\n      (lambda () (+ (raise-continuable 17) 8))))) --> (#(30))\n\n(list\n\n  (vector\n\n    (with-exception-handler\n\n      (lambda (x) (+ x 5))\n\n      (lambda () (+ (raise 17) 8))))) --> violation: non-continuable\n") ("exceptions:s4" "\n\nprocedure: (error who msg irritant ...)\n\n\n\nprocedure: (assertion-violation who msg irritant ...)\n\nlibraries: (rnrs base), (rnrs)\n\n" "error raises a non-continuable exception with condition type\n&error and should be used to describe situations for which the\n&error condition type is appropriate, typically a situation\ninvolving the program's interaction with something outside of the program.\nassertion-violation raises a non-continuable exception with\ncondition type &assertion and should be used to describe\nsituations for which the &assertion condition type is\nappropriate, typically an invalid argument to a procedure or invalid value\nof a subexpression of a syntactic form.\n\n" "\nThe continuation object with which the exception is raised also includes\na &who condition whose who field is who if who is\nnot #f, a &message condition whose message field is\nmsg, and an &irritants condition whose irritants field\nis (irritant ...).\n\n" "\nwho must be a string, a symbol, or #f identifying the procedure\nor syntactic form reporting the error upon whose behalf the error is being\nreported.\nIt is usually best to identify a procedure the programmer has called rather\nthan some other procedure the programmer may not be aware is involved in\ncarrying out the operation.\nmsg must be a string and should describe the exceptional situation.\nThe irritants may be any Scheme objects and should include values that may\nhave caused or been materially involved in the exceptional situation.\n\n") ("exceptions:s5" "\n\n\nsyntax: (assert expression)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "assert evaluates expression and returns the value of\nexpression if the value is not #f.\nIf the value of expression is #f, assert raises a\nnon-continuable exception with condition types &assertion and\n&message, with an implementation-dependent value in its message\nfield.\nImplementations are encouraged to provide information about the location\nof the assert call within the condition whenever possible.\n\n\n") ("exceptions:s6" "\n\n\nprocedure: (syntax-violation who msg form)\n\n\n\nprocedure: (syntax-violation who msg form subform)\n\nreturns: does not return\n\nlibraries: (rnrs syntax-case), (rnrs)\n\n" "This procedure raises a non-continuable exception with a condition of type\n&syntax.\nIt should be used to report a syntax error detected by the transformer of\na syntactic extension.\nThe value of the condition's form field is form, and the value of\nits subform field is subform, or #f if subform is\nnot provided.\n\n" "\nThe continuation object with which the exception is raised also includes\na &who condition whose who field is who, if who is\nnot #f or is inferred from form, and a &message\ncondition whose message field is msg.\n\n" "\nwho must be a string, a symbol, or #f.\nIf who is #f, it is inferred to be the symbolic name of form\nif form is an identifier or the symbolic name of the first subform\nof form if form is a list-structured form whose first subform\nis an identifier.\nmessage must be a string.\nform should be the syntax object or datum representation of the\nsyntactic form within which the syntax violation occurred, and\nsubform, if not #f, should be a syntax object or datum\nrepresentation of a subform more specifically involved in the violation.\nFor example, if a duplicate formal parameter is found in a lambda expression,\nform might be the lambda expression and subform might be\nthe duplicated parameter.\n\n" "\nSome implementations attach source information to syntax objects, e.g.,\nline, character, and filename for forms originating in a file, in which case\nthis information might also be present as some implementation-dependent\ncondition type within the condition object.\n\n") ("exceptions:s7" "\n\n\nprocedure: (with-exception-handler procedure thunk)\n\nreturns: see below\n\nlibraries: (rnrs exceptions), (rnrs)\n\n" "This procedure establishes procedure, which should accept one argument,\nas the current exception handler in place of the old current exception handler,\nold-proc, and invokes thunk without arguments.\nIf the call to thunk returns, old-proc is reestablished as\nthe current exception handler and the values returned by thunk are\nreturned.\nIf control leaves or subsequently reenters the call to thunk via the\ninvocation of a continuation obtained via call/cc, the procedure\nthat was the current exception handler when the continuation was\ncaptured is reinstated.\n\n" "\n\n" "(define (try thunk)\n\n  (call/cc\n\n    (lambda (k)\n\n      (with-exception-handler\n\n        (lambda (x) (if (error? x) (k #f) (raise x)))\n\n        thunk))))\n\n(try (lambda () 17)) --> 17\n\n(try (lambda () (raise (make-error)))) --> #f\n\n(try (lambda () (raise (make-violation)))) --> violation\n\n(with-exception-handler\n\n  (lambda (x)\n\n    (raise\n\n      (apply condition\n\n        (make-message-condition \"oops\")\n\n        (simple-conditions x))))\n\n  (lambda ()\n\n    (try (lambda () (raise (make-violation)))))) --> violation: oops\n") ("exceptions:s8" "\n\nsyntax: (guard (var clause1 clause2 ...) b1 b2 ...)\n\nreturns: see below\n\nlibraries: (rnrs exceptions), (rnrs)\n\n" "A guard expression establishes a new current exception handler,\nprocedure (described below), in place of the old current exception handler, old-proc,\nand evaluates the body b1 b2 ....\nIf the body returns, guard reestablishes old-proc as the current\nexception handler.\nIf control leaves or subsequently reenters the body via the\ninvocation of a continuation obtained via call/cc, the procedure\nthat was the current exception handler when the continuation was\ncaptured is reinstated.\n\n" "\nThe procedure procedure established by guard binds var\nto the value it receives and, within the scope of that binding, processes\nthe clauses clause1 clause2 ... in turn, as\nif contained within an implicit cond expression.\nThis implicit cond expression is evaluated in the continuation\nof the guard expression, with old-proc as the current\nexception handler.\n\n" "\nIf no else clause is provided, guard supplies one\nthat reraises the exception with the same value, as if with\nraise-continuable, in the continuation of the call to procedure,\nwith old-proc as the current exception handler.\n\n" "\n\n" "(guard (x [else x]) (raise \"oops\")) --> \"oops\"\n\n(guard (x [#f #f]) (raise (make-error))) -->  error\n\n(define-syntax try\n\n  (syntax-rules ()\n\n    [(_ e1 e2 ...)\n\n     (guard (x [(error? x) #f]) e1 e2 ...)]))\n\n(define open-one\n\n  (lambda fn*\n\n    (let loop ([ls fn*])\n\n      (if (null? ls)\n\n          (error 'open-one \"all open attempts failed\" fn*)\n\n          (or (try (open-input-file (car ls)))\n\n              (loop (cdr ls)))))))\n\n; say bar.ss exists but not foo.ss:\n\n(open-one \"foo.ss\" \"bar.ss\") --> #<input port bar.ss>\n") ("exceptions:s13" "\n\n\nsyntax: &condition\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "&condition is a record-type name (Chapter 9) and\nthe root of the condition-type hierarchy.\nAll simple condition types are extensions of this type, and all\nconditions, whether simple or compound, are considered instances\nof this type.\n\n") ("exceptions:s14" "\n\n\nprocedure: (condition? obj)\n\nreturns: #t if obj is a condition object, otherwise #f\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "A condition object is an instance of a subtype of &condition\nor a compound condition, possibly created by user code with\ncondition.\n\n" "\n\n" "(condition? 'stable) --> #f\n\n(condition? (make-error)) --> #t\n\n(condition? (make-message-condition \"oops\")) --> #t\n\n(condition?\n\n  (condition\n\n    (make-error)\n\n    (make-message-condition \"no such element\"))) --> #t\n") ("exceptions:s15" "\n\nprocedure: (condition condition ...)\n\nreturns: a condition, possibly compound\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "condition is used to create condition objects that may consist\nof multiple simple conditions.\nEach argument condition may be simple or complex; if simple, it is\ntreated as a compound condition with itself as its only simple condition.\nThe simple conditions of the result condition are the simple conditions of\nthe condition arguments, flattened into a single list and appearing\nin order, with the simple conditions of the first condition followed\nby the simple conditions of the second, and so on.\n\n" "\nIf the list has exactly one element, the result condition may be simple or\ncompound; otherwise it is compound.\nThe distinction between simple and compound conditions is not usually\nimportant but can be detected, if define-record-type rather\nthan define-condition-type is used to extend an existing\ncondition type, via the predicate defined by define-record-type.\n\n" "\n\n" "(condition) --> #<condition>\n\n(condition\n\n  (make-error)\n\n  (make-message-condition \"oops\")) --> #<condition>\n\n\n(define-record-type (&xcond make-xcond xcond?) (parent &condition))\n\n(xcond? (make-xcond)) --> #t\n\n(xcond? (condition (make-xcond))) --> #t or #f\n\n(xcond? (condition)) --> #f\n\n(xcond? (condition (make-error) (make-xcond))) --> #f\n") ("exceptions:s16" "\n\nprocedure: (simple-conditions condition)\n\nreturns: a list of the simple conditions of condition\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n" "\n(simple-conditions (condition)) --> '()\n\n(simple-conditions (make-error)) --> (#<condition &error>)\n\n(simple-conditions (condition (make-error))) --> (#<condition &error>)\n\n(simple-conditions\n\n  (condition\n\n    (make-error)\n\n    (make-message-condition\n\n      \"oops\"))) --> (#<condition &error> #<condition &message>)\n\n\n(let ([c1 (make-error)]\n\n      [c2 (make-who-condition \"f\")]\n\n      [c3 (make-message-condition \"invalid argument\")]\n\n      [c4 (make-message-condition\n\n            \"error occurred while reading from file\")]\n\n      [c5 (make-irritants-condition '(\"a.ss\"))])\n\n  (equal?\n\n    (simple-conditions\n\n      (condition\n\n        (condition (condition c1 c2) c3)\n\n        (condition c4 (condition c5))))\n\n    (list c1 c2 c3 c4 c5))) --> #t\n") ("exceptions:s17" "\n\nsyntax: (define-condition-type name parent constructor pred field ...)\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "A define-condition-type form is a definition and may appear anywhere other\ndefinitions may appear.\nIt is used to define new simple condition types.\n\n" "\nThe subforms name, parent, constructor, and pred\nmust be identifiers.\nEach field must be of the form\n(field-name accessor-name),\nwhere field-name and accessor-name are identifiers.\n\n" "\ndefine-condition-type defines name as a new record type whose\nparent record type is parent, whose constructor name is\nconstructor, whose predicate name is pred, whose fields\nare field-name ..., and whose field accessors are named\nby accessor-name ....\n\n" "\nWith the exception of the predicate and field accessors,\ndefine-condition-type is essentially an ordinary record\ndefinition equivalent to\n\n" "\n\n" "(define-record-type (name constructor pred)\n\n  (parent parent)\n\n  (fields ((immutable field-name accessor-name) ...)))\n" "The predicate differs from one that would be generated by a\ndefine-record-type form in that it returns #t not only\nfor an instance of the new type but also for compound conditions whose simple\nconditions include an instance of the new type.\nSimilarly, field accessors accept instances of the new type as well as\ncompound conditions whose simple conditions include at least one\ninstance of the new record type.\nIf an accessor receives a compound condition whose simple conditions\nlist includes one or more instances of the new type, the accessor\noperates on the first instance in the list.\n\n" "\n\n" "(define-condition-type &mistake &condition make-mistake mistake?\n\n  (type mistake-type))\n\n\n(mistake? 'booboo) --> #f\n\n\n(define c1 (make-mistake 'spelling))\n\n(mistake? c1) --> #t\n\n(mistake-type c1) --> spelling\n\n\n(define c2 (condition c1 (make-irritants-condition '(eggregius))))\n\n(mistake? c2) --> #t\n\n(mistake-type c2) --> spelling\n\n(irritants-condition? c2) --> #t\n\n(condition-irritants c2) --> (eggregius)\n") ("exceptions:s18" "\n\nprocedure: (condition-predicate rtd)\n\nreturns: a condition predicate\n\n\n\nprocedure: (condition-accessor rtd procedure)\n\nreturns: a condition accessor\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "These procedures may be used to create the same kind of special predicates\nand accessors that are created by define-record-type from a\nrecord-type descriptor, rtd, of a simple condition type or other\ntype derived from a simple condition type.\n\n" "\nFor both procedures, rtd must be a record-type descriptor of a\nsubtype of &condition, and for condition-accessor,\nprocedure should accept one argument.\n\n" "\nThe predicate returned by condition-predicate accepts one\nargument, which may be any Scheme value.\nThe predicate returns #t if the value is a condition of the type\ndescribed by rtd, i.e., an instance of the type described by\nrtd (or one of its subtypes) or a compound condition whose simple\nconditions include an instance of the type described by rtd.\nOtherwise, the predicate returns #f.\n\n" "\nThe accessor returned by condition-accessor accepts one argument,\nc, which must be a condition of the type described by rtd.\nThe accessor applies procedure to a single argument, the first element\nof c's simple condition list that is an instance of the type\ndescribed by rtd (this is c itself if c is a simple\ncondition), and returns the result of this application.\nIn most situations, procedure is a record accessor for a field of the\ntype described by rtd.\n\n" "\n\n" "(define-record-type (&mistake make-mistake $mistake?)\n\n  (parent &condition)\n\n  (fields (immutable type $mistake-type)))\n\n\n; define predicate and accessor as if we'd used define-condition-type\n\n(define rtd (record-type-descriptor &mistake))\n\n(define mistake? (condition-predicate rtd))\n\n(define mistake-type (condition-accessor rtd $mistake-type))\n\n\n(define c1 (make-mistake 'spelling))\n\n(define c2 (condition c1 (make-irritants-condition '(eggregius))))\n\n(list (mistake? c1) (mistake? c2)) --> (#t #t)\n\n(list ($mistake? c1) ($mistake? c2)) --> (#t #f)\n\n(mistake-type c1) --> spelling\n\n($mistake-type c1) --> spelling\n\n(mistake-type c2) --> spelling\n\n($mistake-type c2) --> violation\n") ("exceptions:s19" "\n\n\nsyntax: &serious\n\n\n\nprocedure: (make-serious-condition)\n\nreturns: a condition of type &serious\n\n\n\nprocedure: (serious-condition? obj)\n\nreturns: #t if obj is a condition of type &serious, #f otherwise\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Conditions of this type indicate situations\nof a serious nature that, if uncaught, generally result in\ntermination of the program's execution.\nConditions of this type typically occur as one of the more\nspecific subtypes &error or &violation.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &serious &condition\n\n  make-serious-condition serious-condition?)\n") ("exceptions:s20" "\n\nsyntax: &violation\n\n\n\nprocedure: (make-violation)\n\nreturns: a condition of type &violation\n\n\n\nprocedure: (violation? obj)\n\nreturns: #t if obj is a condition of type &violation, #f otherwise\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Conditions of this type indicate that the program has violated\nsome requirement, usually due to a bug in the program.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &violation &serious\n\n  make-violation violation?)\n") ("exceptions:s21" "\n\nsyntax: &assertion\n\n\n\nprocedure: (make-assertion-violation)\n\nreturns: a condition of type &assertion\n\n\n\nprocedure: (assertion-violation? obj)\n\nreturns: #t if obj is a condition of type &assertion, #f otherwise\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "This condition type indicates a specific violation in which \nthe program has passed the wrong number or types of arguments to\na procedure.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &assertion &violation\n\n  make-assertion-violation assertion-violation?)\n") ("exceptions:s22" "\n\nsyntax: &error\n\n\n\nprocedure: (make-error)\n\nreturns: a condition of type &error\n\n\n\nprocedure: (error? obj)\n\nreturns: #t if obj is a condition of type &error, #f otherwise\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Conditions of this type indicate that an error has occurred with\nthe program's interaction with its operating environment, such as\nthe failure of an attempt to open a file.\nIt is not used to describe situations in which an error in the\nprogram has been detected.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &error &serious\n\n  make-error error?)\n") ("exceptions:s23" "\n\nsyntax: &warning\n\n\n\nprocedure: (make-warning)\n\nreturns: a condition of type &warning\n\n\n\nprocedure: (warning? obj)\n\nreturns: #t if obj is a condition of type &warning, #f otherwise\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Warning conditions indicate situations that do not prevent the program\nfrom continuing its execution but, in some cases, might result in a more\nserious problem at some later point.\nFor example, a compiler might use a condition of this type to indicate\nthat it has processed a call to a standard procedure with the wrong\nnumber of arguments; this will not become a serious problem unless the\ncall is actually evaluated at some later point.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &warning &condition\n\n  make-warning warning?)\n") ("exceptions:s24" "\n\nsyntax: &message\n\n\n\nprocedure: (make-message-condition message)\n\nreturns: a condition of type &message\n\n\n\nprocedure: (message-condition? obj)\n\nreturns: #t if obj is a condition of type &message, #f otherwise\n\n\n\nprocedure: (condition-message condition)\n\nreturns: the contents of condition's message field\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Conditions of this type are usually included with a &warning\ncondition or one of the &serious condition subtypes to provide a more\nspecific description of the exceptional situation.\nThe message argument to the constructor may be any\nScheme value but is typically a string.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &message &condition\n\n  make-message-condition message-condition?\n\n  (message condition-message))\n") ("exceptions:s25" "\n\nsyntax: &irritants\n\n\n\nprocedure: (make-irritants-condition irritants)\n\nreturns: a condition of type &irritants\n\n\n\nprocedure: (irritants-condition? obj)\n\nreturns: #t if obj is a condition of type &irritants, #f otherwise\n\n\n\nprocedure: (condition-irritants condition)\n\nreturns: the contents of condition's irritants field\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Conditions of this type are usually included with a &message\ncondition to provide information about Scheme values that may have caused\nor been materially involved in the exceptional situation.\nFor example, if a procedure receives the wrong type of argument, it\nmay raise an exception with a compound condition consisting of an\nassertion condition, a who condition naming the procedure,\na message condition stating that the wrong type\nof argument was received, and an irritants condition listing the\nargument.\nThe irritants argument to the constructor should\nbe a list.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &irritants &condition\n\n  make-irritants-condition irritants-condition?\n\n  (irritants condition-irritants))\n") ("exceptions:s26" "\n\nsyntax: &who\n\n\n\nprocedure: (make-who-condition who)\n\nreturns: a condition of type &who\n\n\n\nprocedure: (who-condition? obj)\n\nreturns: #t if obj is a condition of type &who, #f otherwise\n\n\n\nprocedure: (condition-who condition)\n\nreturns: the contents of condition's who field\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Conditions of this type are often included with a &message\ncondition to identify the syntactic form or procedure that detected\nthe error.\nThe who argument to the constructor should\nbe a symbol or string.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &who &condition\n\n  make-who-condition who-condition?\n\n  (who condition-who))\n") ("exceptions:s27" "\n\nsyntax: &non-continuable\n\n\n\nprocedure: (make-non-continuable-violation)\n\nreturns: a condition of type &non-continuable\n\n\n\nprocedure: (non-continuable-violation? obj)\n\nreturns: #t if obj is a condition of type &non-continuable, #f otherwise\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Conditions of this type indicate that a non-continuable violation has occurred.\nraise raises an exception with this type if the current exception\nhandler returns.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &non-continuable &violation\n\n  make-non-continuable-violation\n\n  non-continuable-violation?)\n") ("exceptions:s28" "\n\nsyntax: &implementation-restriction\n\n\n\nprocedure: (make-implementation-restriction-violation)\n\nreturns: a condition of type &implementation-restriction\n\n\n\nprocedure: (implementation-restriction-violation? obj)\n\nreturns: #t if obj is a condition of type &implementation-restriction, #f otherwise\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "An implementation-restriction condition indicates that the program has attempted\nto exceed some limitation in the implementation, such as when the value of a\nfixnum addition operation would result in a number that exceeds the implementation's\nfixnum range.\nIt does not normally indicate a deficiency in the implementation but rather a\nmismatch between what the program is attempting to do and what the implementation\ncan support.\nIn many cases, implementation restrictions are dictated by the underlying hardware.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &implementation-restriction &violation\n\n  make-implementation-restriction-violation\n\n  implementation-restriction-violation?)\n") ("exceptions:s29" "\n\nsyntax: &lexical\n\n\n\nprocedure: (make-lexical-violation)\n\nreturns: a condition of type &lexical\n\n\n\nprocedure: (lexical-violation? obj)\n\nreturns: #t if obj is a condition of type &lexical, #f otherwise\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Conditions of this type indicate that a lexical error has occurred in the parsing\nof a Scheme program or datum, such as mismatched parentheses or an invalid character\nappearing within a numeric constant.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &lexical &violation\n\n  make-lexical-violation lexical-violation?)\n") ("exceptions:s30" "\n\nsyntax: &syntax\n\n\n\nprocedure: (make-syntax-violation form subform)\n\nreturns: a condition of type &syntax\n\n\n\nprocedure: (syntax-violation? obj)\n\nreturns: #t if obj is a condition of type &syntax, #f otherwise\n\n\n\nprocedure: (syntax-violation-form condition)\n\nreturns: the contents of condition's form field\n\n\n\nprocedure: (syntax-violation-subform condition)\n\nreturns: the contents of condition's subform field\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "Conditions of this type indicate that a syntax error has occurred in the parsing\nof a Scheme program.\nIn most implementations, syntax errors are detected by the macro expander.\nEach of the form and subform arguments to\nmake-syntax-violation should be a syntax object\n(Section 8.3) or datum, the former indicating the containing\nform and the latter indicating the specific subform.\nFor example, if a duplicate formal parameter is found in a lambda expression,\nform might be the lambda expression and subform might be\nthe duplicated parameter.\nIf there is no need to identify a subform, subform should be #f.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &syntax &violation\n\n  make-syntax-violation syntax-violation?\n\n  (form syntax-violation-form)\n\n  (subform syntax-violation-subform))\n") ("exceptions:s31" "\n\nsyntax: &undefined\n\n\n\nprocedure: (make-undefined-violation)\n\nreturns: a condition of type &undefined\n\n\n\nprocedure: (undefined-violation? obj)\n\nreturns: #t if obj is a condition of type &undefined, #f otherwise\n\nlibraries: (rnrs conditions), (rnrs)\n\n" "\n\n" "An undefined condition indicates an attempt to reference an unbound variable.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &undefined &violation\n\n  make-undefined-violation undefined-violation?)\n" "" "The next several condition types describe conditions that occur when\ninput or output operations fail in some manner.\n\n") ("exceptions:s32" "\n\n\nsyntax: &i/o\n\n\n\nprocedure: (make-i/o-error)\n\nreturns: a condition of type &i/o\n\n\n\nprocedure: (i/o-error? obj)\n\nreturns: #t if obj is a condition of type &i/o, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "A condition of type &i/o indicates that an input/output error\nof some sort has occurred.\nConditions of this type typically occur as one of the more\nspecific subtypes described below.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o &error\n\n  make-i/o-error i/o-error?)\n") ("exceptions:s33" "\n\nsyntax: &i/o-read\n\n\n\nprocedure: (make-i/o-read-error)\n\nreturns: a condition of type &i/o-read\n\n\n\nprocedure: (i/o-read-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-read, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "This condition type indicates that an error has occurred while reading\nfrom a port.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-read &i/o\n\n  make-i/o-read-error i/o-read-error?)\n") ("exceptions:s34" "\n\nsyntax: &i/o-write\n\n\n\nprocedure: (make-i/o-write-error)\n\nreturns: a condition of type &i/o-write\n\n\n\nprocedure: (i/o-write-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-write, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "This condition type indicates that an error has occurred while writing\nto a port.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-write &i/o\n\n  make-i/o-write-error i/o-write-error?)\n") ("exceptions:s35" "\n\nsyntax: &i/o-invalid-position\n\n\n\nprocedure: (make-i/o-invalid-position-error position)\n\nreturns: a condition of type &i/o-invalid-position\n\n\n\nprocedure: (i/o-invalid-position-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-invalid-position, #f otherwise\n\n\n\nprocedure: (i/o-error-position condition)\n\nreturns: the contents of condition's position field\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "This condition type indicates an attempt to set a port's position to a\nposition that is out of range for the underlying file or other object.\nThe position argument to the constructor\nshould be the invalid position.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-invalid-position &i/o\n\n  make-i/o-invalid-position-error\n\n  i/o-invalid-position-error?\n\n  (position i/o-error-position))\n") ("exceptions:s36" "\n\nsyntax: &i/o-filename\n\n\n\nprocedure: (make-i/o-filename-error filename)\n\nreturns: a condition of type &i/o-filename\n\n\n\nprocedure: (i/o-filename-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-filename, #f otherwise\n\n\n\nprocedure: (i/o-error-filename condition)\n\nreturns: the contents of condition's filename field\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "This condition type indicates an input/output error that occurred\nwhile operating on a file.\nThe filename argument to the constructor should\nbe the name of the file.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-filename &i/o\n\n  make-i/o-filename-error i/o-filename-error?\n\n  (filename i/o-error-filename))\n") ("exceptions:s37" "\n\nsyntax: &i/o-file-protection\n\n\n\nprocedure: (make-i/o-file-protection-error filename)\n\nreturns: a condition of type &i/o-file-protection\n\n\n\nprocedure: (i/o-file-protection-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-file-protection, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "A condition of this type indicates that an attempt has been made to perform\nsome input/output operation on a file for which the program does not have the\nproper permission.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-file-protection &i/o-filename\n\n  make-i/o-file-protection-error\n\n  i/o-file-protection-error?)\n") ("exceptions:s38" "\n\nsyntax: &i/o-file-is-read-only\n\n\n\nprocedure: (make-i/o-file-is-read-only-error filename)\n\nreturns: a condition of type &i/o-file-is-read-only\n\n\n\nprocedure: (i/o-file-is-read-only-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-file-is-read-only, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "A condition of this type indicates an attempt to treat as writeable a read-only file.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-file-is-read-only &i/o-file-protection\n\n  make-i/o-file-is-read-only-error\n\n  i/o-file-is-read-only-error?)\n") ("exceptions:s39" "\n\nsyntax: &i/o-file-already-exists\n\n\n\nprocedure: (make-i/o-file-already-exists-error filename)\n\nreturns: a condition of type &i/o-file-already-exists\n\n\n\nprocedure: (i/o-file-already-exists-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-file-already-exists, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "A condition of this type indicates a situation in which an operation on a file\nfailed because the file already exists, e.g., an attempt is made to open an\nexisting file for output without the no-fail file option.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-file-already-exists &i/o-filename\n\n  make-i/o-file-already-exists-error\n\n  i/o-file-already-exists-error?)\n") ("exceptions:s40" "\n\nsyntax: &i/o-file-does-not-exist\n\n\n\nprocedure: (make-i/o-file-does-not-exist-error filename)\n\nreturns: a condition of type &i/o-file-does-not-exist\n\n\n\nprocedure: (i/o-file-does-not-exist-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-file-does-not-exist, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "A condition of this type indicates a situation in which an operation on a file\nfailed because the file does not exist, e.g., an attempt is made to open a\nnonexistent file for input only.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-file-does-not-exist &i/o-filename\n\n  make-i/o-file-does-not-exist-error\n\n  i/o-file-does-not-exist-error?)\n") ("exceptions:s41" "\n\nsyntax: &i/o-port\n\n\n\nprocedure: (make-i/o-port-error pobj)\n\nreturns: a condition of type &i/o-port\n\n\n\nprocedure: (i/o-port-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-port, #f otherwise\n\n\n\nprocedure: (i/o-error-port condition)\n\nreturns: the contents of condition's pobj field\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs files), (rnrs)\n\n" "\n\n" "A condition of this type is usually included with a condition of one of the other &i/o\nsubtypes to indicate the port involved in the exceptional situation, if a port\nis involved.\nThe pobj argument to the constructor should be the port.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-port &i/o\n\n  make-i/o-port-error i/o-port-error?\n\n  (pobj i/o-error-port))\n") ("exceptions:s42" "\n\nsyntax: &i/o-decoding\n\n\n\nprocedure: (make-i/o-decoding-error pobj)\n\nreturns: a condition of type &i/o-decoding\n\n\n\nprocedure: (i/o-decoding-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-decoding, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "\n\n" "A condition of this type indicates that a decoding error has occurred\nduring the transcoding of bytes to characters.\nThe pobj argument to the constructor should be the\nport involved, if any.\nThe port should be positioned past the invalid encoding.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-decoding &i/o-port\n\n  make-i/o-decoding-error i/o-decoding-error?)\n") ("exceptions:s43" "\n\nsyntax: &i/o-encoding\n\n\n\nprocedure: (make-i/o-encoding-error pobj cobj)\n\nreturns: a condition of type &i/o-encoding\n\n\n\nprocedure: (i/o-encoding-error? obj)\n\nreturns: #t if obj is a condition of type &i/o-encoding, #f otherwise\n\n\n\nprocedure: (i/o-encoding-error-char condition)\n\nreturns: the contents of condition's cobj field\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "\n\n" "A condition of this type indicates that an encoding error has occurred\nduring the transcoding of characters to bytes.\nThe pobj argument to the constructor should be the\nport involved, if any, and the cobj argument should be the character for\nwhich the encoding failed.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &i/o-encoding &i/o-port\n\n  make-i/o-encoding-error i/o-encoding-error?\n\n  (cobj i/o-encoding-error-char))\n" "" "The final two condition types describe conditions that occur when\nimplementations are required to produce a NaN or infinity but have\nno representations for these values.\n\n") ("exceptions:s44" "\n\n\nsyntax: &no-infinities\n\n\n\nprocedure: (make-no-infinities-violation)\n\nreturns: a condition of type &no-infinities\n\n\n\nprocedure: (no-infinities-violation? obj)\n\nreturns: #t if obj is a condition of type &no-infinities, #f otherwise\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "\n\n" "This condition indicates that the implementation has no representation for\ninfinity.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &no-infinities &implementation-restriction\n\n  make-no-infinities-violation\n\n  no-infinities-violation?)\n") ("exceptions:s45" "\n\nsyntax: &no-nans\n\n\n\nprocedure: (make-no-nans-violation)\n\nreturns: a condition of type &no-nans\n\n\n\nprocedure: (no-nans-violation? obj)\n\nreturns: #t if obj is a condition of type &no-nans, #f otherwise\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "\n\n" "This condition indicates that the implementation has no representation for\nNaN.\nThis condition type might be defined as follows.\n\n" "(define-condition-type &no-nans &implementation-restriction\n\n  make-no-nans-violation no-nans-violation?)\n") ("objects:s1" "\n\n\nsyntax: constant\n\nreturns: constant\n\n" "constant is any self-evaluating constant, i.e., a number,\nboolean, character, string, or bytevector.\nConstants are immutable; see the note in the description of\nquote below.\n\n" "\n\n" "3.2 --> 3.2\n\n#f --> #f\n\n#\\c --> #\\c\n\n\"hi\" --> \"hi\"\n\n#vu8(3 4 5) --> #vu8(3 4 5)\n") ("objects:s2" "\n\nsyntax: (quote obj)\n\n\n\nsyntax: 'obj\n\nreturns: obj\n\nlibraries: (rnrs base), (rnrs)\n\n" "'obj is equivalent to (quote obj).\nThe abbreviated form is converted into the longer form by the Scheme\nreader (see read).\n\n" "\nquote inhibits the normal evaluation rule for\nobj, allowing obj to be employed as data.\nAlthough any Scheme object may be quoted, quotation is not necessary\nfor self-evaluating constants, i.e., numbers, booleans,\ncharacters, strings, and bytevectors.\n\n" "\nQuoted and self-evaluating constants are immutable.\nThat is, programs should not alter a constant via set-car!,\nstring-set!, etc., and implementations are permitted to raise\nan exception with condition type &assertion if such an\nalteration is attempted.\nIf an attempt to alter an immutable object is undetected, the behavior of\nthe program is unspecified.\nAn implementation may choose to share storage among different\nconstants to save space.\n\n" "\n\n" "(+ 2 3) --> 5\n\n'(+ 2 3) --> (+ 2 3)\n\n(quote (+ 2 3)) --> (+ 2 3)\n\n'a --> a\n\n'cons --> cons\n\n'() --> ()\n\n'7 --> 7\n") ("objects:s5" "\n\nsyntax: (quasiquote obj ...)\n\n\n\nsyntax: `obj\n\n\n\nsyntax: (unquote obj ...)\n\n\n\nsyntax: ,obj\n\n\n\nsyntax: (unquote-splicing obj ...)\n\n\n\nsyntax: ,@obj\n\nreturns: see below\n \nlibraries: (rnrs base), (rnrs)\n\n" "`obj is equivalent to (quasiquote obj),\n,obj is equivalent to (unquote obj), and\n,@obj is equivalent to (unquote-splicing obj).\nThe abbreviated forms are converted into the longer forms by the\nScheme reader (see read).\n\n" "\nquasiquote is similar to quote, but it allows parts\nof the quoted text to be \"unquoted.\"\nWithin a quasiquote expression,\nunquote and unquote-splicing subforms are evaluated,\nand everything else is quoted, i.e., left unevaluated.\nThe value of each unquote subform is inserted into the output\nin place of the unquote form, while the value of each\nunquote-splicing subform is spliced into the surrounding list\nor vector structure.\nunquote and unquote-splicing are valid only within\nquasiquote expressions.\n\n" "\nquasiquote expressions may be nested, with each quasiquote\nintroducing a new level of quotation and each unquote or\nunquote-splicing taking away a level of quotation.\nAn expression nested within n quasiquote expressions must\nbe within n unquote or unquote-splicing expressions to\nbe evaluated.\n\n" "\n\n" "`(+ 2 3) --> (+ 2 3)\n\n\n`(+ 2 ,(* 3 4)) --> (+ 2 12)\n\n`(a b (,(+ 2 3) c) d) --> (a b (5 c) d)\n\n`(a b ,(reverse '(c d e)) f g) --> (a b (e d c) f g)\n\n(let ([a 1] [b 2])\n\n  `(,a . ,b)) --> (1 . 2)\n\n\n`(+ ,@(cdr '(* 2 3))) --> (+ 2 3)\n\n`(a b ,@(reverse '(c d e)) f g) --> (a b e d c f g)\n\n(let ([a 1] [b 2])\n\n  `(,a ,@b)) --> (1 . 2)\n\n`#(,@(list 1 2 3)) --> #(1 2 3)\n\n\n'`,(cons 'a 'b) --> `,(cons 'a 'b)\n\n`',(cons 'a 'b) --> '(a . b)\n" "unquote and unquote-splicing forms with zero or more than\none subform are valid only in splicing (list or\nvector) contexts.\n(unquote obj ...) is equivalent to\n(unquote obj) ..., and\n(unquote-splicing obj ...) is equivalent to\n(unquote-splicing obj) ....\nThese forms are primarily useful as intermediate forms in the output\nof the quasiquote expander.\nThey support certain useful nested quasiquotation\nidioms [citation3], such as ,@,@, which has the\neffect of a doubly indirect splicing when used within a doubly nested\nand doubly evaluated quasiquote expression.\n\n" "\n\n" "`(a (unquote) b) --> (a b)\n\n`(a (unquote (+ 3 3)) b) --> (a 6 b)\n\n`(a (unquote (+ 3 3) (* 3 3)) b) --> (a 6 9 b)\n\n\n(let ([x '(m n)]) ``(a ,@,@x f)) --> `(a (unquote-splicing m n) f)\n\n(let ([x '(m n)])\n\n  (eval `(let ([m '(b c)] [n '(d e)]) `(a ,@,@x f))\n\n        (environment '(rnrs)))) --> (a b c d e f)\n" "unquote and unquote-splicing are auxiliary keywords for\nquasiquote.\nIt is a syntax violation to reference these identifiers except in contexts\nwhere they are recognized as auxiliary keywords.\n\n\n") ("objects:s10" "\n\n\nprocedure: (eq? obj1 obj2)\n\nreturns: #t if obj1 and obj2 are identical, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "In most Scheme systems, two objects are considered identical if they\nare represented internally by the same pointer value and distinct\n(not identical) if they are represented internally by different pointer\nvalues, although other criteria, such as time-stamping, are possible.\n\n" "\nAlthough the particular rules for object identity\nvary somewhat from system to system, the following rules always hold.\n\n" "\n\nTwo objects of different types\n(booleans, the empty list, pairs, numbers, characters, strings,\nvectors, symbols, and procedures)\nare distinct.\n\n\nTwo objects of the same type with different contents or values are distinct.\n\n\nThe boolean object #t is identical to itself wherever it\nappears, and #f is identical to itself wherever it appears,\nbut #t and #f are distinct.\n\n\nThe empty list () is identical to itself wherever it appears.\n\n\nTwo symbols are identical if and only if they have the same name (by\nstring=?).\n\n\nA constant pair, vector, string, or bytevector is identical to itself, as is a\npair, vector, string, or bytevector created by an application of cons,\nvector, string, make-bytevector, etc.\nTwo pairs, vectors, strings, or bytevectors created by different applications\nof cons, vector, string, make-bytevector,\netc., are distinct.\nOne consequence is that cons, for example, may be used to create\na unique object distinct from all other objects.\n\n\nTwo procedures that may behave differently are distinct.\nA procedure created by an evaluation of a\nlambda expression is identical to itself.\nTwo procedures created by the same lambda expression at different\ntimes, or by similar lambda expressions, may or may not be\ndistinct.\n\n" "\n\n" "\neq? cannot be used to compare numbers and characters\nreliably.\nAlthough every inexact number is distinct from every exact number,\ntwo exact numbers, two inexact numbers, or two characters with the\nsame value may or may not be identical.\n\n" "\nSince constant objects are immutable, i.e., programs should not modify them via\nvector-set!, set-car!, or any other structure mutation\noperation,\nall or portions of different quoted constants or self-evaluating\nliterals may be represented internally by the same object.\nThus, eq? may return #t when applied to equal parts of different\nimmutable constants.\n\n" "\neq? is most often used to compare symbols or to check for\npointer equivalence of allocated objects, e.g., pairs, vectors,\nor record instances.\n\n" "\n\n" "(eq? 'a 3) --> #f\n\n(eq? #t 't) --> #f\n\n(eq? \"abc\" 'abc) --> #f\n\n(eq? \"hi\" '(hi)) --> #f\n\n(eq? #f '()) --> #f\n\n\n(eq? 9/2 7/2) --> #f\n\n(eq? 3.4 53344) --> #f\n\n(eq? 3 3.0) --> #f\n\n(eq? 1/3 #i1/3) --> #f\n\n\n(eq? 9/2 9/2) --> unspecified\n\n(eq? 3.4 (+ 3.0 .4)) --> unspecified\n\n(let ([x (* 12345678987654321 2)])\n\n  (eq? x x)) --> unspecified\n\n\n(eq? #\\a #\\b) --> #f\n\n(eq? #\\a #\\a) --> unspecified\n\n(let ([x (string-ref \"hi\" 0)])\n\n  (eq? x x)) --> unspecified\n\n\n(eq? #t #t) --> #t\n\n(eq? #f #f) --> #t\n\n(eq? #t #f) --> #f\n\n(eq? (null? '()) #t) --> #t\n\n(eq? (null? '(a)) #f) --> #t\n\n\n(eq? (cdr '(a)) '()) --> #t\n\n\n(eq? 'a 'a) --> #t\n\n(eq? 'a 'b) --> #f\n\n(eq? 'a (string->symbol \"a\")) --> #t\n\n\n(eq? '(a) '(b)) --> #f\n\n(eq? '(a) '(a)) --> unspecified\n\n(let ([x '(a . b)]) (eq? x x)) --> #t\n\n(let ([x (cons 'a 'b)])\n\n  (eq? x x)) --> #t\n\n(eq? (cons 'a 'b) (cons 'a 'b)) --> #f\n\n\n(eq? \"abc\" \"cba\") --> #f\n\n(eq? \"abc\" \"abc\") --> unspecified\n\n(let ([x \"hi\"]) (eq? x x)) --> #t\n\n(let ([x (string #\\h #\\i)]) (eq? x x)) --> #t\n\n(eq? (string #\\h #\\i)\n\n     (string #\\h #\\i)) --> #f\n\n\n(eq? '#vu8(1) '#vu8(1)) --> unspecified\n\n(eq? '#vu8(1) '#vu8(2)) --> #f\n\n(let ([x (make-bytevector 10 0)])\n\n  (eq? x x)) --> #t\n\n(let ([x (make-bytevector 10 0)])\n\n  (eq? x (make-bytevector 10 0))) --> #f\n\n\n(eq? '#(a) '#(b)) --> #f\n\n(eq? '#(a) '#(a)) --> unspecified\n\n(let ([x '#(a)]) (eq? x x)) --> #t\n\n(let ([x (vector 'a)])\n\n  (eq? x x)) --> #t\n\n(eq? (vector 'a) (vector 'a)) --> #f\n\n\n(eq? car car) --> #t\n\n(eq? car cdr) --> #f\n\n(let ([f (lambda (x) x)])\n\n  (eq? f f)) --> #t\n\n(let ([f (lambda () (lambda (x) x))])\n\n  (eq? (f) (f))) --> unspecified\n\n(eq? (lambda (x) x) (lambda (y) y)) --> unspecified\n\n\n(let ([f (lambda (x)\n\n           (lambda ()\n\n             (set! x (+ x 1))\n\n             x))])\n\n  (eq? (f 0) (f 0))) --> #f\n") ("objects:s12" "\n\nprocedure: (eqv? obj1 obj2)\n\nreturns: #t if obj1 and obj2 are equivalent, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "eqv? is similar to eq? except eqv?\nis guaranteed to return #t for two characters that are considered\nequal by char=? and two numbers that are (a) considered\nequal by = and (b) cannot be distinguished by any other\noperation besides eq? and eqv?.\nA consequence of (b) is that (eqv? -0.0 +0.0) is #f even\nthough (= -0.0 +0.0) is #t in systems that distinguish\n-0.0 and +0.0, such as those based on IEEE floating-point\narithmetic.\nThis is because operations such as / can expose the difference:\n\n" "\n\n" "(/ 1.0 -0.0) --> -inf.0\n\n(/ 1.0 +0.0) --> +inf.0\n" "Similarly, although 3.0 and 3.0+0.0i are considered numerically equal,\nthey are not considered equivalent by eqv? if -0.0 and\n0.0 have different representations.\n\n" "\n\n" "(= 3.0+0.0i 3.0) --> #t\n\n(eqv? 3.0+0.0i 3.0) --> #f\n" "The boolean value returned by eqv? is not specified when the\narguments are NaNs.\n\n" "\n\n" "(eqv? +nan.0 (/ 0.0 0.0)) --> unspecified\n" "eqv? is less implementation-dependent but generally more\nexpensive than eq?.\n\n" "\n\n" "(eqv? 'a 3) --> #f\n\n(eqv? #t 't) --> #f\n\n(eqv? \"abc\" 'abc) --> #f\n\n(eqv? \"hi\" '(hi)) --> #f\n\n(eqv? #f '()) --> #f\n\n\n(eqv? 9/2 7/2) --> #f\n\n(eqv? 3.4 53344) --> #f\n\n(eqv? 3 3.0) --> #f\n\n(eqv? 1/3 #i1/3) --> #f\n\n\n(eqv? 9/2 9/2) --> #t\n\n(eqv? 3.4 (+ 3.0 .4)) --> #t\n\n(let ([x (* 12345678987654321 2)])\n\n  (eqv? x x)) --> #t\n\n\n(eqv? #\\a #\\b) --> #f\n\n(eqv? #\\a #\\a) --> #t\n\n(let ([x (string-ref \"hi\" 0)])\n\n  (eqv? x x)) --> #t\n\n\n(eqv? #t #t) --> #t\n\n(eqv? #f #f) --> #t\n\n(eqv? #t #f) --> #f\n\n(eqv? (null? '()) #t) --> #t\n\n(eqv? (null? '(a)) #f) --> #t\n\n\n(eqv? (cdr '(a)) '()) --> #t\n\n\n(eqv? 'a 'a) --> #t\n\n(eqv? 'a 'b) --> #f\n\n(eqv? 'a (string->symbol \"a\")) --> #t\n\n\n(eqv? '(a) '(b)) --> #f\n\n(eqv? '(a) '(a)) --> unspecified\n\n(let ([x '(a . b)]) (eqv? x x)) --> #t\n\n(let ([x (cons 'a 'b)])\n\n  (eqv? x x)) --> #t\n\n(eqv? (cons 'a 'b) (cons 'a 'b)) --> #f\n\n\n(eqv? \"abc\" \"cba\") --> #f\n\n(eqv? \"abc\" \"abc\") --> unspecified\n\n(let ([x \"hi\"]) (eqv? x x)) --> #t\n\n(let ([x (string #\\h #\\i)]) (eqv? x x)) --> #t\n\n(eqv? (string #\\h #\\i)\n\n      (string #\\h #\\i)) --> #f\n\n\n(eqv? '#vu8(1) '#vu8(1)) --> unspecified\n\n(eqv? '#vu8(1) '#vu8(2)) --> #f\n\n(let ([x (make-bytevector 10 0)])\n\n  (eqv? x x)) --> #t\n\n(let ([x (make-bytevector 10 0)])\n\n  (eqv? x (make-bytevector 10 0))) --> #f\n\n\n(eqv? '#(a) '#(b)) --> #f\n\n(eqv? '#(a) '#(a)) --> unspecified\n\n(let ([x '#(a)]) (eqv? x x)) --> #t\n\n(let ([x (vector 'a)])\n\n  (eqv? x x)) --> #t\n\n(eqv? (vector 'a) (vector 'a)) --> #f\n\n\n(eqv? car car) --> #t\n\n(eqv? car cdr) --> #f\n\n(let ([f (lambda (x) x)])\n\n  (eqv? f f)) --> #t\n\n(let ([f (lambda () (lambda (x) x))])\n\n  (eqv? (f) (f))) --> unspecified\n\n(eqv? (lambda (x) x) (lambda (y) y)) --> unspecified\n\n\n(let ([f (lambda (x)\n\n           (lambda ()\n\n             (set! x (+ x 1))\n\n             x))])\n\n  (eqv? (f 0) (f 0))) --> #f\n") ("objects:s13" "\n\nprocedure: (equal? obj1 obj2)\n\nreturns: #t if obj1 and obj2 have the same\nstructure and contents, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "Two objects are equal if they are equivalent according to eqv?,\nstrings that are string=?, bytevectors that are bytevector=?,\npairs whose cars and cdrs are equal, or\nvectors of the same length whose corresponding elements are equal.\n\n" "\nequal? is required to terminate even for cyclic arguments and\nreturn #t \"if and only if the (possibly infinite) unfoldings of\nits arguments into regular trees are equal as ordered trees\" [citation24].\nIn essence, two values are equivalent, in the sense of equal?,\nif the structure of the two objects cannot be distinguished by any\ncomposition of pair and vector accessors along with the\neqv?, string=?, and bytevector=? procedures for\ncomparing data at the leaves.\n\n" "\nImplementing equal? efficiently is tricky [citation1], and\neven with a good implementation, it is likely to be more expensive than\neither eqv? or eq?.\n\n" "\n\n" "(equal? 'a 3) --> #f\n\n(equal? #t 't) --> #f\n\n(equal? \"abc\" 'abc) --> #f\n\n(equal? \"hi\" '(hi)) --> #f\n\n(equal? #f '()) --> #f\n\n\n(equal? 9/2 7/2) --> #f\n\n(equal? 3.4 53344) --> #f\n\n(equal? 3 3.0) --> #f\n\n(equal? 1/3 #i1/3) --> #f\n\n\n(equal? 9/2 9/2) --> #t\n\n(equal? 3.4 (+ 3.0 .4)) --> #t\n\n(let ([x (* 12345678987654321 2)])\n\n  (equal? x x)) --> #t\n\n\n(equal? #\\a #\\b) --> #f\n\n(equal? #\\a #\\a) --> #t\n\n(let ([x (string-ref \"hi\" 0)])\n\n  (equal? x x)) --> #t\n\n\n(equal? #t #t) --> #t\n\n(equal? #f #f) --> #t\n\n(equal? #t #f) --> #f\n\n(equal? (null? '()) #t) --> #t\n\n(equal? (null? '(a)) #f) --> #t\n\n\n(equal? (cdr '(a)) '()) --> #t\n\n\n(equal? 'a 'a) --> #t\n\n(equal? 'a 'b) --> #f\n\n(equal? 'a (string->symbol \"a\")) --> #t\n\n\n(equal? '(a) '(b)) --> #f\n\n(equal? '(a) '(a)) --> #t\n\n(let ([x '(a . b)]) (equal? x x)) --> #t\n\n(let ([x (cons 'a 'b)])\n\n  (equal? x x)) --> #t\n\n(equal? (cons 'a 'b) (cons 'a 'b)) --> #t\n\n\n(equal? \"abc\" \"cba\") --> #f\n\n(equal? \"abc\" \"abc\") --> #t\n\n(let ([x \"hi\"]) (equal? x x)) --> #t\n\n(let ([x (string #\\h #\\i)]) (equal? x x)) --> #t\n\n(equal? (string #\\h #\\i)\n\n        (string #\\h #\\i)) --> #t\n\n\n(equal? '#vu8(1) '#vu8(1)) --> #t\n\n(equal? '#vu8(1) '#vu8(2)) --> #f\n\n(let ([x (make-bytevector 10 0)])\n\n  (equal? x x)) --> #t\n\n(let ([x (make-bytevector 10 0)])\n\n  (equal? x (make-bytevector 10 0))) --> #t\n\n\n(equal? '#(a) '#(b)) --> #f\n\n(equal? '#(a) '#(a)) --> #t\n\n(let ([x '#(a)]) (equal? x x)) --> #t\n\n(let ([x (vector 'a)])\n\n  (equal? x x)) --> #t\n\n(equal? (vector 'a) (vector 'a)) --> #t\n\n\n(equal? car car) --> #t\n\n(equal? car cdr) --> #f\n\n(let ([f (lambda (x) x)])\n\n  (equal? f f)) --> #t\n\n(let ([f (lambda () (lambda (x) x))])\n\n  (equal? (f) (f))) --> unspecified\n\n(equal? (lambda (x) x) (lambda (y) y)) --> unspecified\n\n\n(let ([f (lambda (x)\n\n           (lambda ()\n\n             (set! x (+ x 1))\n\n             x))])\n\n  (equal? (f 0) (f 0))) --> #f\n\n\n(equal?\n\n  (let ([x (cons 'x 'x)])\n\n    (set-car! x x)\n\n    (set-cdr! x x)\n\n    x)\n\n  (let ([x (cons 'x 'x)])\n\n    (set-car! x x)\n\n    (set-cdr! x x)\n\n    (cons x x))) --> #t\n") ("objects:s14" "\n\nprocedure: (boolean? obj)\n\nreturns: #t if obj is either #t or #f, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "boolean? is equivalent to\n(lambda (x) (or (eq? x #t) (eq? x #f))).\n\n" "\n\n" "(boolean? #t) --> #t\n\n(boolean? #f) --> #t\n\n(or (boolean? 't) (boolean? '())) --> #f\n") ("objects:s15" "\n\nprocedure: (null? obj)\n\nreturns: #t if obj is the empty list, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "null? is equivalent to (lambda (x) (eq? x '())).\n\n" "\n\n" "(null? '()) --> #t\n\n(null? '(a)) --> #f\n\n(null? (cdr '(a))) --> #t\n\n(null? 3) --> #f\n\n(null? #f) --> #f\n") ("objects:s16" "\n\nprocedure: (pair? obj)\n\nreturns: #t if obj is a pair, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(pair? '(a b c)) --> #t\n\n(pair? '(3 . 4)) --> #t\n\n(pair? '()) --> #f\n\n(pair? '#(a b)) --> #f\n\n(pair? 3) --> #f\n") ("objects:s17" "\n\nprocedure: (number? obj)\n\nreturns: #t if obj is a number object, #f otherwise\n\n\n\nprocedure: (complex? obj)\n\nreturns: #t if obj is a complex number object, #f otherwise\n\n\n\nprocedure: (real? obj)\n\nreturns: #t if obj is a real number object, #f otherwise\n\n\n\nprocedure: (rational? obj)\n\nreturns: #t if obj is a rational number object, #f otherwise\n\n\n\nprocedure: (integer? obj)\n\nreturns: #t if obj is an integer object, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "These predicates form a hierarchy: any integer is rational, any\nrational is real, any real is complex, and any complex is numeric.\nMost implementations do not provide internal representations for\nirrational numbers, so all real numbers are typically rational\nas well.\n\n" "\nThe real?, rational?, and integer? predicates do\nnot recognize as real, rational, or integer complex numbers with inexact\nzero imaginary parts.\n\n" "\n\n" "(integer? 1901) --> #t\n\n(rational? 1901) --> #t\n\n(real? 1901) --> #t\n\n(complex? 1901) --> #t\n\n(number? 1901) --> #t\n\n\n(integer? -3.0) --> #t\n\n(rational? -3.0) --> #t\n\n(real? -3.0) --> #t\n\n(complex? -3.0) --> #t\n\n(number? -3.0) --> #t\n\n\n(integer? 7+0i) --> #t\n\n(rational? 7+0i) --> #t\n\n(real? 7+0i) --> #t\n\n(complex? 7+0i) --> #t\n\n(number? 7+0i) --> #t\n\n\n(integer? -2/3) --> #f\n\n(rational? -2/3) --> #t\n\n(real? -2/3) --> #t\n\n(complex? -2/3) --> #t\n\n(number? -2/3) --> #t\n\n\n(integer? -2.345) --> #f\n\n(rational? -2.345) --> #t\n\n(real? -2.345) --> #t\n\n(complex? -2.345) --> #t\n\n(number? -2.345) --> #t\n\n\n(integer? 7.0+0.0i) --> #f\n\n(rational? 7.0+0.0i) --> #f\n\n(real? 7.0+0.0i) --> #f\n\n(complex? 7.0+0.0i) --> #t\n\n(number? 7.0+0.0i) --> #t\n\n\n(integer? 3.2-2.01i) --> #f\n\n(rational? 3.2-2.01i) --> #f\n\n(real? 3.2-2.01i) --> #f\n\n(complex? 3.2-2.01i) --> #t\n\n(number? 3.2-2.01i) --> #t\n\n\n(integer? 'a) --> #f\n\n(rational? '(a b c)) --> #f\n\n(real? \"3\") --> #f\n\n(complex? '#(1 2)) --> #f\n\n(number? #\\a) --> #f\n") ("objects:s18" "\n\nprocedure: (real-valued? obj)\n\nreturns: #t if obj is a real number, #f otherwise\n\n\n\nprocedure: (rational-valued? obj)\n\nreturns: #t if obj is a rational number, #f otherwise\n\n\n\nprocedure: (integer-valued? obj)\n\nreturns: #t if obj is an integer, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "These predicates are similar to real?, rational?, and\ninteger?, but treat as real, rational, or integral complex numbers\nwith inexact zero imaginary parts.\n\n" "\n\n" "(integer-valued? 1901) --> #t\n\n(rational-valued? 1901) --> #t\n\n(real-valued? 1901) --> #t\n\n\n(integer-valued? -3.0) --> #t\n\n(rational-valued? -3.0) --> #t\n\n(real-valued? -3.0) --> #t\n\n\n(integer-valued? 7+0i) --> #t\n\n(rational-valued? 7+0i) --> #t\n\n(real-valued? 7+0i) --> #t\n\n\n(integer-valued? -2/3) --> #f\n\n(rational-valued? -2/3) --> #t\n\n(real-valued? -2/3) --> #t\n\n\n(integer-valued? -2.345) --> #f\n\n(rational-valued? -2.345) --> #t\n\n(real-valued? -2.345) --> #t\n\n\n(integer-valued? 7.0+0.0i) --> #t\n\n(rational-valued? 7.0+0.0i) --> #t\n\n(real-valued? 7.0+0.0i) --> #t\n\n\n(integer-valued? 3.2-2.01i) --> #f\n\n(rational-valued? 3.2-2.01i) --> #f\n\n(real-valued? 3.2-2.01i) --> #f\n" "As with real?, rational?, and integer?, these\npredicates return #f for all non-numeric values.\n\n" "\n\n" "(integer-valued? 'a) --> #f\n\n(rational-valued? '(a b c)) --> #f\n\n(real-valued? \"3\") --> #f\n") ("objects:s19" "\n\nprocedure: (char? obj)\n\nreturns: #t if obj is a character, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(char? 'a) --> #f\n\n(char? 97) --> #f\n\n(char? #\\a) --> #t\n\n(char? \"a\") --> #f\n\n(char? (string-ref (make-string 1) 0)) --> #t\n") ("objects:s20" "\n\nprocedure: (string? obj)\n\nreturns: #t if obj is a string, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(string? \"hi\") --> #t\n\n(string? 'hi) --> #f\n\n(string? #\\h) --> #f\n") ("objects:s21" "\n\nprocedure: (vector? obj)\n\nreturns: #t if obj is a vector, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(vector? '#()) --> #t\n\n(vector? '#(a b c)) --> #t\n\n(vector? (vector 'a 'b 'c)) --> #t\n\n(vector? '()) --> #f\n\n(vector? '(a b c)) --> #f\n\n(vector? \"abc\") --> #f\n") ("objects:s22" "\n\nprocedure: (symbol? obj)\n\nreturns: #t if obj is a symbol, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(symbol? 't) --> #t\n\n(symbol? \"t\") --> #f\n\n(symbol? '(t)) --> #f\n\n(symbol? #\\t) --> #f\n\n(symbol? 3) --> #f\n\n(symbol? #t) --> #f\n") ("objects:s23" "\n\nprocedure: (procedure? obj)\n\nreturns: #t if obj is a procedure, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(procedure? car) --> #t\n\n(procedure? 'car) --> #f\n\n(procedure? (lambda (x) x)) --> #t\n\n(procedure? '(lambda (x) x)) --> #f\n\n(call/cc procedure?) --> #t\n") ("objects:s24" "\n\nprocedure: (bytevector? obj)\n\nreturns: #t if obj is a bytevector, #f otherwise\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "\n" "\n(bytevector? #vu8()) --> #t\n\n(bytevector? '#()) --> #f\n\n(bytevector? \"abc\") --> #f\n") ("objects:s25" "\n\nprocedure: (hashtable? obj)\n\nreturns: #t if obj is a hashtable, #f otherwise\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "\n" "(hashtable? (make-eq-hashtable)) --> #t\n\n(hashtable? '(not a hash table)) --> #f\n") ("objects:s37" "\n\n\nprocedure: (cons obj1 obj2)\n\nreturns: a new pair whose car and cdr are obj1 and obj2\n\nlibraries: (rnrs base), (rnrs)\n\n" "cons is the pair constructor procedure.\nobj1 becomes the car and obj2 becomes the cdr of the\nnew pair.\n\n" "\n\n" "(cons 'a '()) --> (a)\n\n(cons 'a '(b c)) --> (a b c)\n\n(cons 3 4) --> (3 . 4)\n") ("objects:s38" "\n\nprocedure: (car pair)\n\nreturns: the car of pair\n\nlibraries: (rnrs base), (rnrs)\n\n" "The empty list is not a pair, so the argument must not be the empty list.\n\n" "\n\n" "(car '(a)) --> a\n\n(car '(a b c)) --> a\n\n(car (cons 3 4)) --> 3\n") ("objects:s39" "\n\nprocedure: (cdr pair)\n\nreturns: the cdr of pair\n\nlibraries: (rnrs base), (rnrs)\n\n" "The empty list is not a pair, so the argument must not be the empty list.\n\n" "\n\n" "(cdr '(a)) --> ()\n\n(cdr '(a b c)) --> (b c)\n\n(cdr (cons 3 4)) --> 4\n") ("objects:s40" "\n\nprocedure: (set-car! pair obj)\n\nreturns: unspecified\n\nlibraries: (rnrs mutable-pairs)\n\n" "set-car! changes the car of pair to obj.\n\n" "\n\n" "(let ([x (list 'a 'b 'c)])\n\n  (set-car! x 1)\n\n  x) --> (1 b c)\n") ("objects:s41" "\n\nprocedure: (set-cdr! pair obj)\n\nreturns: unspecified\n\nlibraries: (rnrs mutable-pairs)\n\n" "set-cdr! changes the cdr of pair to obj.\n\n" "\n\n" "(let ([x (list 'a 'b 'c)])\n\n  (set-cdr! x 1)\n\n  x) --> (a . 1)\n") ("objects:s42" "\n\nprocedure: (caar pair)\n\n\n\nprocedure: (cadr pair)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmath/tspl/3.gif \n\n\nprocedure: (cddddr pair)\n\nreturns: the caar, cadr, ..., or cddddr of pair\n\nlibraries: (rnrs base), (rnrs)\n\n" "These procedures are defined as the composition of up to four cars\nand cdrs.\nThe a's and d's between the c and r represent the\napplication of car or cdr in order from right to left.\nFor example, the procedure cadr applied to a pair yields the car\nof the cdr of the pair and is equivalent to\n(lambda (x) (car (cdr x))).\n\n" "\n\n" "(caar '((a))) --> a\n\n(cadr '(a b c)) --> b\n\n(cdddr '(a b c d)) --> (d)\n\n(cadadr '(a (b c))) --> c\n") ("objects:s43" "\n\nprocedure: (list obj ...)\n\nreturns: a list of obj ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "list is equivalent to (lambda x x).\n\n" "\n\n" "(list) --> ()\n\n(list 1 2 3) --> (1 2 3)\n\n(list 3 2 1) --> (3 2 1)\n") ("objects:s44" "\n\nprocedure: (cons* obj ... final-obj)\n\nreturns: a list of obj ... terminated by final-obj\n\nlibraries: (rnrs lists), (rnrs)\n\n" "If the objects obj ... are omitted, the result is simply\nfinal-obj.\nOtherwise, a list of obj ... is constructed, as with list, except\nthat the final cdr field is final-obj instead of ().\nIf final-obj is not a list, the result is an improper list.\n\n" "\n\n" "(cons* '()) --> ()\n\n(cons* '(a b)) --> (a b)\n\n(cons* 'a 'b 'c) --> (a b . c)\n\n(cons* 'a 'b '(c d)) --> (a b c d)\n") ("objects:s45" "\n\nprocedure: (list? obj)\n\nreturns: #t if obj is a proper list, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "list? must return #f for all improper lists, including cyclic\nlists.\nA definition of list? is shown on page 67.\n\n" "\n\n" "(list? '()) --> #t\n\n(list? '(a b c)) --> #t\n\n(list? 'a) --> #f\n\n(list? '(3 . 4)) --> #f\n\n(list? 3) --> #f\n\n(let ([x (list 'a 'b 'c)])\n\n  (set-cdr! (cddr x) x)\n\n  (list? x)) --> #f\n") ("objects:s46" "\n\nprocedure: (length list)\n\nreturns: the number of elements in list\n\nlibraries: (rnrs base), (rnrs)\n\n" "length may be defined as follows, using an adaptation of the\nhare and tortoise algorithm used for the definition of list?\non page 67.\n\n" "\n\n" "(define length\n\n  (lambda (x)\n\n    (define improper-list\n\n      (lambda ()\n\n        (assertion-violation 'length \"not a proper list\" x)))\n\n\n    (let f ([h x] [t x] [n 0])\n\n      (if (pair? h)\n\n          (let ([h (cdr h)])\n\n            (if (pair? h)\n\n                (if (eq? h t)\n\n                    (improper-list)\n\n                    (f (cdr h) (cdr t) (+ n 2)))\n\n                (if (null? h)\n\n                    (+ n 1)\n\n                    (improper-list))))\n\n          (if (null? h)\n\n              n\n\n              (improper-list))))))\n\n\n(length '()) --> 0\n\n(length '(a b c)) --> 3\n\n(length '(a b . c)) --> exception\n\n(length\n\n  (let ([ls (list 'a 'b)])\n\n    (set-cdr! (cdr ls) ls) --> exception\n\n    ls))\n\n(length\n\n  (let ([ls (list 'a 'b)])\n\n    (set-car! (cdr ls) ls) --> 2\n\n    ls))\n") ("objects:s47" "\n\nprocedure: (list-ref list n)\n\nreturns: the nth element (zero-based) of list\n\nlibraries: (rnrs base), (rnrs)\n\n" "n must be an exact nonnegative integer less than\nthe length of list.\nlist-ref may be defined without error checks as follows.\n\n" "\n\n" "(define list-refdefn:list-ref\n\n  (lambda (ls n)\n\n    (if (= n 0)\n\n        (car ls)\n\n        (list-ref (cdr ls) (- n 1)))))\n\n\n(list-ref '(a b c) 0) --> a\n\n(list-ref '(a b c) 1) --> b\n\n(list-ref '(a b c) 2) --> c\n") ("objects:s48" "\n\nprocedure: (list-tail list n)\n\nreturns: the nth tail (zero-based) of list\n\nlibraries: (rnrs base), (rnrs)\n\n" "n must be an exact nonnegative integer less than or equal to\nthe length of list.\nThe result is not a copy; the tail is eq? to the nth cdr of\nlist (or to list itself, if n is zero).\n\n" "\nlist-tail may be defined without error checks as follows.\n\n" "\n\n" "(define list-taildefn:list-tail\n\n  (lambda (ls n)\n\n    (if (= n 0)\n\n        ls\n\n        (list-tail (cdr ls) (- n 1)))))\n\n\n(list-tail '(a b c) 0) --> (a b c)\n\n(list-tail '(a b c) 2) --> (c)\n\n(list-tail '(a b c) 3) --> ()\n\n(list-tail '(a b c . d) 2) --> (c . d)\n\n(list-tail '(a b c . d) 3) --> d\n\n(let ([x (list 1 2 3)])\n\n  (eq? (list-tail x 2)\n\n       (cddr x))) --> #t\n") ("objects:s49" "\n\nprocedure: (append)\n\n\n\nprocedure: (append list ... obj)\n\nreturns: the concatenation of the input lists\n\nlibraries: (rnrs base), (rnrs)\n\n" "append returns a new list consisting of the elements of the first\nlist followed by the elements of the second list, the elements of the\nthird list, and so on.\nThe new list is made from new pairs for all arguments but the last; the\nlast (which need not be a list) is merely placed at the end of\nthe new structure.\nappend may be defined without error checks as follows.\n\n" "\n\n" "(define append\n\n  (lambda args\n\n    (let f ([ls '()] [args args])\n\n      (if (null? args)\n\n          ls\n\n          (let g ([ls ls])\n\n            (if (null? ls)\n\n                (f (car args) (cdr args))\n\n                (cons (car ls) (g (cdr ls)))))))))\n\n\n(append '(a b c) '()) --> (a b c)\n\n(append '() '(a b c)) --> (a b c)\n\n(append '(a b) '(c d)) --> (a b c d)\n\n(append '(a b) 'c) --> (a b . c)\n\n(let ([x (list 'b)])\n\n  (eq? x (cdr (append '(a) x)))) --> #t\n") ("objects:s50" "\n\nprocedure: (reverse list)\n\nreturns: a new list containing the elements of list in reverse order\n\nlibraries: (rnrs base), (rnrs)\n\n" "reverse may be defined without error checks as follows.\n\n" "\n\n" "(define reverse\n\n  (lambda (ls)\n\n    (let rev ([ls ls] [new '()])\n\n      (if (null? ls)\n\n          new\n\n          (rev (cdr ls) (cons (car ls) new))))))\n\n\n(reverse '()) --> ()\n\n(reverse '(a b c)) --> (c b a)\n") ("objects:s51" "\n\nprocedure: (memq obj list)\n\n\n\nprocedure: (memv obj list)\n\n\n\nprocedure: (member obj list)\n\nreturns: the first tail of list whose car is equivalent to obj, or #f\n\nlibraries: (rnrs lists), (rnrs)\n\n" "These procedures traverse the argument list in order, comparing the\nelements of list against obj.\nIf an object equivalent to obj is found, the tail of the list whose\nfirst element is that object is returned.\nIf the list contains more than one object equivalent to obj, the first\ntail whose first element is equivalent to obj is returned.\nIf no object equivalent to obj is found, #f is returned.\nThe equivalence test for memq is eq?, for memv is eqv?,\nand for member is equal?.\n\n" "\nThese procedures are most often used as predicates, but their names do not\nend with a question mark because they return a useful true value in place\nof #t.\nmemq may be defined without error checks as follows.\n\n" "\n\n" "(define memq\n\n  (lambda (x ls)\n\n    (cond\n\n      [(null? ls) #f]\n\n      [(eq? (car ls) x) ls]\n\n      [else (memq x (cdr ls))])))\n" "memv and member may be defined similarly, with eqv? and equal?\nin place of eq?.\n\n" "\n\n" "(memq 'a '(b c a d e)) --> (a d e)\n\n(memq 'a '(b c d e g)) --> #f\n\n(memq 'a '(b a c a d a)) --> (a c a d a)\n\n\n(memv 3.4 '(1.2 2.3 3.4 4.5)) --> (3.4 4.5)\n\n(memv 3.4 '(1.3 2.5 3.7 4.9)) --> #f\n\n(let ([ls (list 'a 'b 'c)])\n\n  (set-car! (memv 'b ls) 'z)\n\n  ls) --> (a z c)\n\n\n(member '(b) '((a) (b) (c))) --> ((b) (c))\n\n(member '(d) '((a) (b) (c))) --> #f\n\n(member \"b\" '(\"a\" \"b\" \"c\")) --> (\"b\" \"c\")\n\n\n(let ()\n\n  (define member?\n\n    (lambda (x ls)\n\n      (and (member x ls) #t)))\n\n  (member? '(b) '((a) (b) (c)))) --> #t\n\n\n(define count-occurrences\n\n  (lambda (x ls)\n\n    (cond\n\n      [(memq x ls) =>\n\n       (lambda (ls)\n\n         (+ (count-occurrences x (cdr ls)) 1))]\n\n      [else 0])))\n\n\n(count-occurrences 'a '(a b c d a)) --> 2\n") ("objects:s52" "\n\nprocedure: (memp procedure list)\n\nreturns: the first tail of list for whose car procedure returns true, or #f\n\nlibraries: (rnrs lists), (rnrs)\n\n" "procedure should accept one argument and return a single value.\nIt should not modify list.\n\n" "\n\n" "(memp odd? '(1 2 3 4)) --> (1 2 3 4)\n\n(memp even? '(1 2 3 4)) --> (2 3 4)\n\n(let ([ls (list 1 2 3 4)])\n\n  (eq? (memp odd? ls) ls)) --> #t\n\n(let ([ls (list 1 2 3 4)])\n\n  (eq? (memp even? ls) (cdr ls))) --> #t\n\n(memp odd? '(2 4 6 8)) --> #f\n") ("objects:s53" "\n\nprocedure: (remq obj list)\n\n\n\nprocedure: (remv obj list)\n\n\n\nprocedure: (remove obj list)\n\nreturns: a list containing the elements of list with all occurrences of obj removed\n\nlibraries: (rnrs lists), (rnrs)\n\n" "These procedures traverse the argument list, removing any objects\nthat are equivalent to obj.\nThe elements remaining in the output list are in the same order as they appear\nin the input list.\nIf a tail of list (including list itself) contains no occurrences of \nobj, the corresponding tail of the result list may be the same\n(by eq?) as the tail of the input list.\n\n" "\nThe equivalence test for remq is eq?,\nfor remv is eqv?,\nand for remove is equal?.\n\n" "\n\n" "(remq 'a '(a b a c a d)) --> (b c d)\n\n(remq 'a '(b c d)) --> (b c d)\n\n\n(remv 1/2 '(1.2 1/2 0.5 3/2 4)) --> (1.2 0.5 3/2 4)\n\n\n(remove '(b) '((a) (b) (c))) --> ((a) (c))\n") ("objects:s54" "\n\nprocedure: (remp procedure list)\n\nreturns: a list of the elements of list for which procedure returns #f\n\nlibraries: (rnrs lists), (rnrs)\n\n" "procedure should accept one argument and return a single value.\nIt should not modify list.\n\n" "\nremp applies procedure to each element of list\nand returns a list containing only the elements for which\nprocedure returns #f.\nThe elements of the returned list appear in the same order as they\nappeared in the original list.\n\n" "\n\n" "(remp odd? '(1 2 3 4)) --> (2 4)\n\n(remp\n\n  (lambda (x) (and (> x 0) (< x 10)))\n\n  '(-5 15 3 14 -20 6 0 -9)) --> (-5 15 14 -20 0 -9)\n") ("objects:s55" "\n\nprocedure: (filter procedure list)\n\nreturns: a list of the elements of list for which procedure returns true\n\nlibraries: (rnrs lists), (rnrs)\n\n" "procedure should accept one argument and return a single value.\nIt should not modify list.\n\n" "\nfilter applies procedure to each element of list\nand returns a new list containing only the elements for which\nprocedure returns true.\nThe elements of the returned list appear in the same order as they\nappeared in the original list.\n\n" "\n\n" "(filter odd? '(1 2 3 4)) --> (1 3)\n\n(filter\n\n  (lambda (x) (and (> x 0) (< x 10)))\n\n  '(-5 15 3 14 -20 6 0 -9)) --> (3 6)\n") ("objects:s56" "\n\nprocedure: (partition procedure list)\n\nreturns: see below\n\nlibraries: (rnrs lists), (rnrs)\n\n" "procedure should accept one argument and return a single value.\nIt should not modify list.\n\n" "\npartition applies procedure to each element of list\nand returns two values:\na new list containing only the elements for which\nprocedure returns true, and\na new list containing only the elements for which\nprocedure returns #f.\nThe elements of the returned lists appear in the same order as they\nappeared in the original list.\n\n" "\n\n" "(partition odd? '(1 2 3 4)) --> (1 3)\n\n                            gifs/ghostRightarrow.gif (2 4)\n\n(partition\n\n  (lambda (x) (and (> x 0) (< x 10)))\n\n  '(-5 15 3 14 -20 6 0 -9)) --> (3 6)\n\n                            gifs/ghostRightarrow.gif (-5 15 14 -20 0 -9)\n" "The values returned by partition can be obtained by calling\nfilter and remp separately, but this would require\ntwo calls to procedure for each element of list.\n\n") ("objects:s57" "\n\n\nprocedure: (find procedure list)\n\nreturns: the first element of list for which procedure returns true, or #f\n\nlibraries: (rnrs lists), (rnrs)\n\n" "procedure should accept one argument and return a single value.\nIt should not modify list.\n\n" "\nfind traverses the argument list in order, applying\nprocedure to each element in turn.\nIf procedure returns a true value for a given element, find\nreturns that element without applying procedure to the remaining elements.\nIf procedure returns #f for each element of list,\nfind returns #f.\n\n" "\nIf a program must distinguish between finding #f in the list\nand finding no element at all, memp should be used instead.\n\n" "\n\n" "(find odd? '(1 2 3 4)) --> 1\n\n(find even? '(1 2 3 4)) --> 2\n\n(find odd? '(2 4 6 8)) --> #f\n\n(find not '(1 a #f 55)) --> #f\n") ("objects:s58" "page:assq\n\n\nprocedure: (assq obj alist)\n\n\n\nprocedure: (assv obj alist)\n\n\n\nprocedure: (assoc obj alist)\n\nreturns: first element of alist whose car is equivalent to obj, or #f\n\nlibraries: (rnrs lists), (rnrs)\n\n" "The argument alist must be an association list.\nAn association list is a proper list whose elements are key-value pairs\nof the form (key . value).\nAssociations are useful for storing information (values) associated with\ncertain objects (keys).\n\n" "\nThese procedures traverse the association list, testing each key for equivalence\nwith obj.\nIf an equivalent key is found, the key-value pair is returned.\nOtherwise, #f is returned.\n\n" "\nThe equivalence test for assq is eq?,\nfor assv is eqv?,\nand for assoc is equal?.\nassq may be defined without error checks as follows.\n\n" "\n\n" "(define assq\n\n  (lambda (x ls)\n\n    (cond\n\n      [(null? ls) #f]\n\n      [(eq? (caar ls) x) (car ls)]\n\n      [else (assq x (cdr ls))])))\n" "assv and assoc may be defined similarly, with eqv? and equal?\nin place of eq?.\n\n" "\n\n" "(assq 'b '((a . 1) (b . 2))) --> (b . 2)\n\n(cdr (assq 'b '((a . 1) (b . 2)))) --> 2\n\n(assq 'c '((a . 1) (b . 2))) --> #f\n\n\n(assv 2/3 '((1/3 . 1) (2/3 . 2))) --> (2/3 . 2)\n\n(assv 2/3 '((1/3 . a) (3/4 . b))) --> #f\n\n\n(assoc '(a) '(((a) . a) (-1 . b))) --> ((a) . a)\n\n(assoc '(a) '(((b) . b) (a . c))) --> #f\n\n\n(let ([alist (list (cons 2 'a) (cons 3 'b))])\n\n  (set-cdr! (assv 3 alist) 'c)\n\n  alist) --> ((2 . a) (3 . c))\n" "The interpreter given in Section 12.7 represents\nenvironments as association lists and uses assq for both\nvariable lookup and assignment.\n\n") ("objects:s60" "\n\n\nprocedure: (assp procedure alist)\n\nreturns: first element of alist for whose car procedure returns true, or #f\n\nlibraries: (rnrs lists), (rnrs)\n\n" "alist must be an association list.\nAn association list is a proper list whose elements are key-value pairs\nof the form (key . value).\nprocedure should accept one argument and return a single value.\nIt should not modify list.\n\n" "\n\n" "(assp odd? '((1 . a) (2 . b))) --> (1 . a)\n\n(assp even? '((1 . a) (2 . b))) --> (2 . b)\n\n(let ([ls (list (cons 1 'a) (cons 2 'b))])\n\n  (eq? (assp odd? ls) (car ls))) --> #t\n\n(let ([ls (list (cons 1 'a) (cons 2 'b))])\n\n  (eq? (assp even? ls) (cadr ls))) --> #t\n\n(assp odd? '((2 . b))) --> #f\n") ("objects:s62" "\n\nprocedure: (list-sort predicate list)\n\nreturns: a list containing the elements of list sorted according to predicate\n\nlibraries: (rnrs sorting), (rnrs)\n\n" "predicate should be a procedure that expects two arguments and\nreturns #t if its first argument must precede its second in\nthe sorted list.\nThat is, if predicate is applied to two elements x and\ny, where x appears after y in the input list,\nit should return true only if x should appear before y\nin the output list.\nIf this constraint is met,\nlist-sort performs a stable sort, i.e., two elements are\nreordered only when necessary according to predicate.\nDuplicate elements are not removed.\nThis procedure may call predicate up to nlogn times, where n is\nthe length of list.\n\n" "\n\n" "(list-sort < '(3 4 2 1 2 5)) --> (1 2 2 3 4 5)\n\n(list-sort > '(0.5 1/2)) --> (0.5 1/2)\n\n(list-sort > '(1/2 0.5)) --> (1/2 0.5)\n\n(list->string\n\n  (list-sort char>?\n\n    (string->list \"hello\"))) --> \"ollhe\"\n") ("objects:s86" "\n\n\nprocedure: (exact? num)\n\nreturns: #t if num is exact, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(exact? 1) --> #t\n\n(exact? -15/16) --> #t\n\n(exact? 2.01) --> #f\n\n(exact? #i77) --> #f\n\n(exact? #i2/3) --> #f\n\n(exact? 1.0-2i) --> #f\n") ("objects:s87" "\n\nprocedure: (inexact? num)\n\nreturns: #t if num is inexact, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(inexact? -123) --> #f\n\n(inexact? #i123) --> #t\n\n(inexact? 1e23) --> #t\n\n(inexact? +i) --> #f\n") ("objects:s88" "\n\nprocedure: (= num1 num2 num3 ...)\n\n\n\nprocedure: (< real1 real2 real3 ...)\n\n\n\nprocedure: (> real1 real2 real3 ...)\n\n\n\nprocedure: (<= real1 real2 real3 ...)\n\n\n\nprocedure: (>= real1 real2 real3 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "The predicate = returns #t if its arguments are equal.\nThe predicate < returns #t if its arguments are monotonically\nincreasing, i.e., each argument is greater than the preceding ones,\nwhile > returns #t if its arguments are monotonically decreasing.\nThe predicate <= returns #t if its arguments are monotonically\nnondecreasing, i.e., each argument is not less than the preceding ones,\nwhile >= returns #t if its arguments are monotonically nonincreasing.\n\n" "\nAs implied by the names of the arguments, = is defined for complex\narguments while the other relational predicates are defined only for real\narguments.\nTwo complex numbers are considered equal if their real and imaginary parts\nare equal.\nComparisons involving NaNs always return #f.\n\n" "\n\n" "(= 7 7) --> #t\n\n(= 7 9) --> #f\n\n\n(< 2e3 3e2) --> #f\n\n(<= 1 2 3 3 4 5) --> #t\n\n(<= 1 2 3 4 5) --> #t\n\n\n(> 1 2 2 3 3 4) --> #f\n\n(>= 1 2 2 3 3 4) --> #f\n\n\n(= -1/2 -0.5) --> #t\n\n(= 2/3 .667) --> #f\n\n(= 7.2+0i 7.2) --> #t\n\n(= 7.2-3i 7) --> #f\n\n\n(< 1/2 2/3 3/4) --> #t\n\n(> 8 4.102 2/3 -5) --> #t\n\n\n(let ([x 0.218723452])\n\n  (< 0.210 x 0.220)) --> #t\n\n\n(let ([i 1] [v (vector 'a 'b 'c)])\n\n  (< -1 i (vector-length v))) --> #t\n\n\n(apply < '(1 2 3 4)) --> #t\n\n(apply > '(4 3 3 2)) --> #f\n\n\n(= +nan.0 +nan.0) --> #f\n\n(< +nan.0 +nan.0) --> #f\n\n(> +nan.0 +nan.0) --> #f\n\n(>= +inf.0 +nan.0) --> #f\n\n(>= +nan.0 -inf.0) --> #f\n\n(> +nan.0 0.0) --> #f\n") ("objects:s89" "\n\nprocedure: (+ num ...)\n\nreturns: the sum of the arguments num ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "When called with no arguments, + returns 0.\n\n" "\n\n" "(+) --> 0\n\n(+ 1 2) --> 3\n\n(+ 1/2 2/3) --> 7/6\n\n(+ 3 4 5) --> 12\n\n(+ 3.0 4) --> 7.0\n\n(+ 3+4i 4+3i) --> 7+7i\n\n(apply + '(1 2 3 4 5)) --> 15\n") ("objects:s90" "\n\nprocedure: (- num)\n\nreturns: the additive inverse of num\n\n\n\nprocedure: (- num1 num2 num3 ...)\n\nreturns: the difference between num1 and the sum of num2 num3 ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "(- 3) --> -3\n\n(- -2/3) --> 2/3\n\n(- 4 3.0) --> 1.0\n\n(- 3.25+4.25i 1/4+1/4i) --> 3.0+4.0i\n\n(- 4 3 2 1) --> -2\n") ("objects:s91" "\n\nprocedure: (* num ...)\n\nreturns: the product of the arguments num ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "When called with no arguments, * returns 1.\n\n" "\n\n" "(*) --> 1\n\n(* 3.4) --> 3.4\n\n(* 1 1/2) --> 1/2\n\n(* 3 4 5.5) --> 66.0\n\n(* 1+2i 3+4i) --> -5+10i\n\n(apply * '(1 2 3 4 5)) --> 120\n") ("objects:s92" "\n\nprocedure: (/ num)\n\nreturns: the multiplicative inverse of num\n\n\n\nprocedure: (/ num1 num2 num3 ...)\n\nreturns: the result of dividing num1 by the product of num2 num3 ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(/ -17) --> -1/17\n\n(/ 1/2) --> 2\n\n(/ .5) --> 2.0\n\n(/ 3 4) --> 3/4\n\n(/ 3.0 4) --> .75\n\n(/ -5+10i 3+4i) --> 1+2i\n\n(/ 60 5 4 3 2) --> 1/2\n") ("objects:s93" "\n\nprocedure: (zero? num)\n\nreturns: #t if num is zero, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "zero? is equivalent to (lambda (x) (= x 0)).\n\n" "\n\n" "(zero? 0) --> #t\n\n(zero? 1) --> #f\n\n(zero? (- 3.0 3.0)) --> #t\n\n(zero? (+ 1/2 1/2)) --> #f\n\n(zero? 0+0i) --> #t\n\n(zero? 0.0-0.0i) --> #t\n") ("objects:s94" "\n\nprocedure: (positive? real)\n\nreturns: #t if real is greater than zero, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "positive? is equivalent to (lambda (x) (> x 0)).\n\n" "\n\n" "(positive? 128) --> #t\n\n(positive? 0.0) --> #f\n\n(positive? 1.8e-15) --> #t\n\n(positive? -2/3) --> #f\n\n(positive? .001-0.0i) --> exception: not a real number\n") ("objects:s95" "\n\nprocedure: (negative? real)\n\nreturns: #t if real is less than zero, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "negative? is equivalent to (lambda (x) (< x 0)).\n\n" "\n\n" "(negative? -65) --> #t\n\n(negative? 0) --> #f\n\n(negative? -0.0121) --> #t\n\n(negative? 15/16) --> #f\n\n(negative? -7.0+0.0i) --> exception: not a real number\n") ("objects:s96" "\n\nprocedure: (even? int)\n\nreturns: #t if int is even, #f otherwise\n\n\n\nprocedure: (odd? int)\n\nreturns: #t if int is odd, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(even? 0) --> #t\n\n(even? 1) --> #f\n\n(even? 2.0) --> #t\n\n(even? -120762398465) --> #f\n\n(even? 2.0+0.0i) --> exception: not an integer\n\n\n(odd? 0) --> #f\n\n(odd? 1) --> #t\n\n(odd? 2.0) --> #f\n\n(odd? -120762398465) --> #t\n\n(odd? 2.0+0.0i) --> exception: not an integer\n") ("objects:s97" "\n\nprocedure: (finite? real)\n\nreturns: #t if real is finite, #f otherwise\n\n\n\nprocedure: (infinite? real)\n\nreturns: #t if real is infinite, #f otherwise\n\n\n\nprocedure: (nan? real)\n\nreturns: #t if real is a NaN, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(finite? 2/3) --> #t\n\n(infinite? 2/3) --> #f\n\n(nan? 2/3) --> #f\n\n\n(finite? 3.1415) --> #t\n\n(infinite? 3.1415) --> #f\n\n(nan? 3.1415) --> #f\n\n\n(finite? +inf.0) --> #f\n\n(infinite? -inf.0) --> #t\n\n(nan? -inf.0) --> #f\n\n\n(finite? +nan.0) --> #f\n\n(infinite? +nan.0) --> #f\n\n(nan? +nan.0) --> #t\n") ("objects:s98" "\n\nprocedure: (quotient int1 int2)\n\nreturns: the integer quotient of int1 and int2\n\n\n\nprocedure: (remainder int1 int2)\n\nreturns: the integer remainder of int1 and int2\n\n\n\nprocedure: (modulo int1 int2)\n\nreturns: the integer modulus of int1 and int2\n\nlibraries: (rnrs r5rs)\n\n" "The result of remainder has the same sign as int1,\nwhile the result of modulo has the same sign as int2.\n\n" "\n\n" "(quotient 45 6) --> 7\n\n(quotient 6.0 2.0) --> 3.0\n\n(quotient 3.0 -2) --> -1.0\n\n\n(remainder 16 4) --> 0\n\n(remainder 5 2) --> 1\n\n(remainder -45.0 7) --> -3.0\n\n(remainder 10.0 -3.0) --> 1.0\n\n(remainder -17 -9) --> -8\n\n\n(modulo 16 4) --> 0\n\n(modulo 5 2) --> 1\n\n(modulo -45.0 7) --> 4.0\n\n(modulo 10.0 -3.0) --> -2.0\n\n(modulo -17 -9) --> -8\n") ("objects:s99" "\n\nprocedure: (div x1 x2)\n\n\n\nprocedure: (mod x1 x2)\n\n\n\nprocedure: (div-and-mod x1 x2)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "If x1 and x2 are exact, x2 must not be zero.\nThese procedures implement number-theoretic integer division, with the\ndiv operation being related to quotient and the\nmod operation being related to remainder or\nmodulo, but in both cases extended to handle real numbers.\n\n" "\nThe value nd of (div x1 x2) is an integer,\nand the value xm of (mod x1 x2) is a real\nnumber such that x1 = nd  x2 + xm and\n0  xm < |x2|.\nIn situations where the implementation cannot represent the mathematical\nresults prescribed by these equations as a number object, div and\nmod return an unspecified number or raise an exception with\ncondition type &implementation-restriction.\n\n" "\nThe div-and-mod procedure behaves as if defined as follows.\n\n" "\n\n" "(define (div-and-mod x1 x2) (values (div x1 x2) (mod x1 x2)))\n" "That is, unless it raises an exception in the circumstance described\nabove, it returns two values: the result of calling div on the\ntwo arguments and the result of calling mod on the two\narguments.\n\n" "\n\n" "(div 17 3) --> 5\n\n(mod 17 3) --> 2\n\n(div -17 3) --> -6\n\n(mod -17 3) --> 1\n\n(div 17 -3) --> -5\n\n(mod 17 -3) --> 2\n\n(div -17 -3) --> 6\n\n(mod -17 -3) --> 1\n\n\n(div-and-mod 17.5 3) --> 5.0\n\n                     gifs/ghostRightarrow.gif 2.5\n") ("objects:s100" "\n\nprocedure: (div0 x1 x2)\n\n\n\nprocedure: (mod0 x1 x2)\n\n\n\nprocedure: (div0-and-mod0 x1 x2)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "If x1 and x2 are exact, x2 must not be zero.\nThese procedures are similar to div, mod, and\ndiv-and-mod, but constrain the \"mod\" value differently,\nwhich also affects the \"div\" value.\nThe value nd of (div0 x1 x2) is an integer,\nand the value xm of (mod0 x1 x2) is a real\nnumber such that x1 = nd  x2 + xm and\n-|x2/2|  xm < |x2/2|.\nIn situations where the implementation cannot represent the mathematical\nresults prescribed by these equations as a number object, div0 and\nmod0 return an unspecified number or raise an exception with\ncondition type &implementation-restriction.\n\n" "\nThe div0-and-mod0 procedure behaves as if defined as follows.\n\n" "\n\n" "(define (div0-and-mod0 x1 x2) (values (div0 x1 x2) (mod0 x1 x2)))\n" "That is, unless it raises an exception in the circumstance described\nabove, it returns two values: the result of calling div0 on the\ntwo arguments and the result of calling mod0 on the two\narguments.\n\n" "\n\n" "(div0 17 3) --> 6\n\n(mod0 17 3) --> -1\n\n(div0 -17 3) --> -6\n\n(mod0 -17 3) --> 1\n\n(div0 17 -3) --> -6\n\n(mod0 17 -3) --> -1\n\n(div0 -17 -3) --> 6\n\n(mod0 -17 -3) --> 1\n\n\n(div0-and-mod0 17.5 3) --> 6.0\n\n                       gifs/ghostRightarrow.gif -0.5\n") ("objects:s101" "\n\nprocedure: (truncate real)\n\nreturns: the integer closest to real toward zero\n\nlibraries: (rnrs base), (rnrs)\n\n" "If real is an infinity or NaN, truncate returns real.\n\n" "\n\n" "(truncate 19) --> 19\n\n(truncate 2/3) --> 0\n\n(truncate -2/3) --> 0\n\n(truncate 17.3) --> 17.0\n\n(truncate -17/2) --> -8\n") ("objects:s102" "\n\nprocedure: (floor real)\n\nreturns: the integer closest to real toward math/tspl/11.gif\n\nlibraries: (rnrs base), (rnrs)\n\n" "If real is an infinity or NaN, floor returns real.\n\n" "\n\n" "(floor 19) --> 19\n\n(floor 2/3) --> 0\n\n(floor -2/3) --> -1\n\n(floor 17.3) --> 17.0\n\n(floor -17/2) --> -9\n") ("objects:s103" "\n\nprocedure: (ceiling real)\n\nreturns: the integer closest to real toward math/tspl/12.gif\n\nlibraries: (rnrs base), (rnrs)\n\n" "If real is an infinity or NaN, ceiling returns real.\n\n" "\n\n" "(ceiling 19) --> 19\n\n(ceiling 2/3) --> 1\n\n(ceiling -2/3) --> 0\n\n(ceiling 17.3) --> 18.0\n\n(ceiling -17/2) --> -8\n") ("objects:s104" "\n\nprocedure: (round real)\n\nreturns: the integer closest to real\n\nlibraries: (rnrs base), (rnrs)\n\n" "If real is exactly between two integers, the closest even integer\nis returned.\nIf real is an infinity or NaN, round returns real.\n\n" "\n\n" "(round 19) --> 19\n\n(round 2/3) --> 1\n\n(round -2/3) --> -1\n\n(round 17.3) --> 17.0\n\n(round -17/2) --> -8\n\n(round 2.5) --> 2.0\n\n(round 3.5) --> 4.0\n") ("objects:s105" "page:abs\n\n\nprocedure: (abs real)\n\nreturns: the absolute value of real\n\nlibraries: (rnrs base), (rnrs)\n\n" "abs is equivalent to (lambda (x) (if (< x 0) (- x) x)).\nabs and magnitude\n(see page 183) are identical for real inputs.\n\n" "\n\n" "(abs 1) --> 1\n\n(abs -3/4) --> 3/4\n\n(abs 1.83) --> 1.83\n\n(abs -0.093) --> 0.093\n") ("objects:s107" "\n\nprocedure: (max real1 real2 ...)\n\nreturns: the maximum of real1 real2 ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(max 4 -7 2 0 -6) --> 4\n\n(max 1/2 3/4 4/5 5/6 6/7) --> 6/7\n\n(max 1.5 1.3 -0.3 0.4 2.0 1.8) --> 2.0\n\n(max 5 2.0) --> 5.0\n\n(max -5 -2.0) --> -2.0\n\n(let ([ls '(7 3 5 2 9 8)])\n\n  (apply max ls)) --> 9\n") ("objects:s108" "\n\nprocedure: (min real1 real2 ...)\n\nreturns: the minimum of real1 real2 ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(min 4 -7 2 0 -6) --> -7\n\n(min 1/2 3/4 4/5 5/6 6/7) --> 1/2\n\n(min 1.5 1.3 -0.3 0.4 2.0 1.8) --> -0.3\n\n(min 5 2.0) --> 2.0\n\n(min -5 -2.0) --> -5.0\n\n(let ([ls '(7 3 5 2 9 8)])\n\n  (apply min ls)) --> 2\n") ("objects:s109" "page:gcd\n\n\nprocedure: (gcd int ...)\n\nreturns: the greatest common divisor of its arguments int ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "The result is always nonnegative, i.e., factors of -1 are ignored.\nWhen called with no arguments, gcd returns 0.\n\n" "\n\n" "(gcd) --> 0\n\n(gcd 34) --> 34\n\n(gcd 33.0 15.0) --> 3.0\n\n(gcd 70 -42 28) --> 14\n") ("objects:s110" "\n\nprocedure: (lcm int ...)\n\nreturns: the least common multiple of its arguments int ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "The result is always nonnegative, i.e., common multiples of -1 are\nignored.\nAlthough lcm should probably return math/tspl/13.gif when called with no\narguments, it is defined to return 1.\nIf one or more of the arguments is 0, lcm returns 0.\n\n" "\n\n" "(lcm) --> 1\n\n(lcm 34) --> 34\n\n(lcm 33.0 15.0) --> 165.0\n\n(lcm 70 -42 28) --> 420\n\n(lcm 17.0 0) --> 0.0\n") ("objects:s111" "\n\nprocedure: (expt num1 num2)\n\nreturns: num1 raised to the num2 power\n\nlibraries: (rnrs base), (rnrs)\n\n" "If both arguments are 0, expt returns 1.\n\n" "\n\n" "(expt 2 10) --> 1024\n\n(expt 2 -10) --> 1/1024\n\n(expt 2 -10.0) --> 9.765625e-4\n\n(expt -1/2 5) --> -1/32\n\n(expt 3.0 3) --> 27.0\n\n(expt +i 2) --> -1\n") ("objects:s112" "\n\nprocedure: (inexact num)\n\nreturns: an inexact representation of num\n\nlibraries: (rnrs base), (rnrs)\n\n" "If num is already inexact, it is returned unchanged.\nIf no inexact representation for num is supported by the\nimplementation, an exception with condition type &implementation-violation\nmay be raised.\ninexact may also return +inf.0 or -inf.0 for inputs\nwhose magnitude exceeds the range of the implementation's inexact number\nrepresentations.\n\n" "\n\n" "(inexact 3) --> 3.0\n\n(inexact 3.0) --> 3.0\n\n(inexact -1/4) --> -.25\n\n(inexact 3+4i) --> 3.0+4.0i\n\n(inexact (expt 10 20)) --> 1e20\n") ("objects:s114" "\n\nprocedure: (exact num)\n\nreturns: an exact representation of num\n\nlibraries: (rnrs base), (rnrs)\n\n" "If num is already exact, it is returned unchanged.\nIf no exact representation for num is supported by the\nimplementation, an exception with condition type &implementation-violation\nmay be raised.\n\n" "\n\n" "(exact 3.0) --> 3\n\n(exact 3) --> 3\n\n(exact -.25) --> -1/4\n\n(exact 3.0+4.0i) --> 3+4i\n\n(exact 1e20) --> 100000000000000000000\n") ("objects:s116" "\n\nprocedure: (exact->inexact num)\n\nreturns: an inexact representation of num\n\n\n\nprocedure: (inexact->exact num)\n\nreturns: an exact representation of num\n\nlibraries: (rnrs r5rs)\n\n" "These are alternative names for inexact and exact,\nsupported for compatibility with the Revised5 Report.\n\n\n") ("objects:s117" "\n\n\nprocedure: (rationalize real1 real2)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "rationalize\nreturns the simplest rational number that differs from\nreal1 by no more than real2.\nA rational number q1 = n1/m1 is simpler than another rational\nnumber q2 = n2/m2 if |n1|  |n2| and |m1|  |m2|\nand either |n1| < |n2| or |m1| < |m2|.\n\n" "\n\n" "(rationalize 3/10 1/10) --> 1/3\n\n(rationalize .3 1/10) --> 0.3333333333333333\n\n(eqv? (rationalize .3 1/10) #i1/3) --> #t\n") ("objects:s118" "\n\nprocedure: (numerator rat)\n\nreturns: the numerator of rat\n\nlibraries: (rnrs base), (rnrs)\n\n" "If rat is an integer, the numerator is rat.\n\n" "\n\n" "(numerator 9) --> 9\n\n(numerator 9.0) --> 9.0\n\n(numerator 0.0) --> 0.0\n\n(numerator 2/3) --> 2\n\n(numerator -9/4) --> -9\n\n(numerator -2.25) --> -9.0\n") ("objects:s119" "\n\nprocedure: (denominator rat)\n\nreturns: the denominator of rat\n\nlibraries: (rnrs base), (rnrs)\n\n" "If rat is an integer, including zero, the denominator is one.\n\n" "\n\n" "(denominator 9) --> 1\n\n(denominator 9.0) --> 1.0\n\n(denominator 0) --> 1\n\n(denominator 0.0) --> 1.0\n\n(denominator 2/3) --> 3\n\n(denominator -9/4) --> 4\n\n(denominator -2.25) --> 4.0\n") ("objects:s120" "\n\nprocedure: (real-part num)\n\nreturns: the real component of num\n\nlibraries: (rnrs base), (rnrs)\n\n" "If num is real, real-part returns num.\n\n" "\n\n" "(real-part 3+4i) --> 3\n\n(real-part -2.3+0.7i) --> -2.3\n\n(real-part -i) --> 0\n\n(real-part 17.2) --> 17.2\n\n(real-part -17/100) --> -17/100\n") ("objects:s121" "\n\nprocedure: (imag-part num)\n\nreturns: the imaginary component of num\n\nlibraries: (rnrs base), (rnrs)\n\n" "If num is real, imag-part returns exact zero.\n\n\n" "\n\n" "(imag-part 3+4i) --> 4\n\n(imag-part -2.3+0.7i) --> 0.7\n\n(imag-part -i) --> -1\n\n(imag-part -2.5) --> 0\n\n(imag-part -17/100) --> 0\n") ("objects:s122" "\n\nprocedure: (make-rectangular real1 real2)\n\nreturns: a complex number with real component real1 and imaginary\n  component real2\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(make-rectangular -2 7) --> -2+7i\n\n(make-rectangular 2/3 -1/2) --> 2/3-1/2i\n\n(make-rectangular 3.2 5.3) --> 3.2+5.3i\n") ("objects:s123" "\n\nprocedure: (make-polar real1 real2)\n\nreturns: a complex number with magnitude real1 and angle\n    real2\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(make-polar 2 0) --> 2\n\n(make-polar 2.0 0.0) --> 2.0+0.0i\n\n(make-polar 1.0 (asin -1.0)) --> 0.0-1.0i\n\n(eqv? (make-polar 7.2 -0.588) 7.2@-0.588) --> #t\n") ("objects:s124" "\n\nprocedure: (angle num)\n\nreturns: the angle part of the polar representation of num\n\nlibraries: (rnrs base), (rnrs)\n\n" "The range of the result is math/tspl/14.gif (exclusive) to math/tspl/15.gif (inclusive).\n\n" "\n\n" "(angle 7.3@1.5708) --> 1.5708\n\n(angle 5.2) --> 0.0\n") ("objects:s125" "page:magnitude\n\n\nprocedure: (magnitude num)\n\nreturns: the magnitude of num\n\nlibraries: (rnrs base), (rnrs)\n\n" "magnitude and abs\n(see page 178) are identical for real arguments.\nThe magnitude of a complex number x + yi is\nmath/tspl/16.gif.\n\n" "\n\n" "(magnitude 1) --> 1\n\n(magnitude -3/4) --> 3/4\n\n(magnitude 1.83) --> 1.83\n\n(magnitude -0.093) --> 0.093\n\n(magnitude 3+4i) --> 5\n\n(magnitude 7.25@1.5708) --> 7.25\n") ("objects:s127" "\n\nprocedure: (sqrt num)\n\nreturns: the principal square root of num\n\nlibraries: (rnrs base), (rnrs)\n\n" "Implementations are encouraged, but not required, to return exact\nresults for exact inputs to sqrt whenever feasible.\n\n" "\n\n" "(sqrt 16) --> 4\n\n(sqrt 1/4) --> 1/2\n\n(sqrt 4.84) --> 2.2\n\n(sqrt -4.84) --> 0.0+2.2i\n\n(sqrt 3+4i) --> 2+1i\n\n(sqrt -3.0-4.0i) --> 1.0-2.0i\n") ("objects:s128" "\n\nprocedure: (exact-integer-sqrt n)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "This procedure returns two nonnegative exact integers s and r where\nn = s2 + r and n < (s + 1)2.\n\n" "\n\n" "(exact-integer-sqrt 0) --> 0\n\n                       gifs/ghostRightarrow.gif 0\n\n(exact-integer-sqrt 9) --> 3\n\n                       --> 0\n\n(exact-integer-sqrt 19) --> 4\n\n                        --> 3\n") ("objects:s129" "\n\nprocedure: (exp num)\n\nreturns: e to the num power\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(exp 0.0) --> 1.0\n\n(exp 1.0) --> 2.7182818284590455\n\n(exp -.5) --> 0.6065306597126334\n") ("objects:s130" "\n\nprocedure: (log num)\n\nreturns: the natural logarithm of num\n\n\n\nprocedure: (log num1 num2)\n\nreturns: the base-num2 logarithm of num1\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(log 1.0) --> 0.0\n\n(log (exp 1.0)) --> 1.0\n\n(/ (log 100) (log 10)) --> 2.0\n\n(log (make-polar (exp 2.0) 1.0)) --> 2.0+1.0i\n\n\n(log 100.0 10.0) --> 2.0\n\n(log .125 2.0) --> -3.0\n") ("objects:s131" "\n\nprocedure: (sin num)\n\n\n\nprocedure: (cos num)\n\n\n\nprocedure: (tan num)\n\nreturns: the sine, cosine, or tangent of num\n\nlibraries: (rnrs base), (rnrs)\n\n" "The argument is specified in radians.\n\n" "\n\n" "(sin 0.0) --> 0.0\n\n(cos 0.0) --> 1.0\n\n(tan 0.0) --> 0.0\n") ("objects:s132" "\n\nprocedure: (asin num)\n\n\n\nprocedure: (acos num)\n\nreturns: the arc sine or the arc cosine of num\n\nlibraries: (rnrs base), (rnrs)\n\n" "The result is in radians.\nThe arc sine and arc cosine of a complex number z are defined as follows.\n\n" "\n" "\nmath/tspl/17.gif" "\n\n" "\nmath/tspl/18.gif" "\n\n\n" "\n\n" "(define pi (* (asin 1) 2))\n\n(= (* (acos 0) 2) pi) --> #t\n") ("objects:s133" "\n\nprocedure: (atan num)\n\n\n\nprocedure: (atan real1 real2)\n\nreturns: see below\n\nlibraries: (rnrs base), (rnrs)\n\n" "When passed a single complex argument num (the first form), atan\nreturns the arc tangent of num.\nThe arc tangent of a complex number z is defined as follows.\n\n" "\n" "\nmath/tspl/19.gif" "\n\n\n" "\nWhen passed two real arguments (the second form), atan is equivalent\nto (lambda (y x) (angle (make-rectangular x y))).\n\n" "\n\n" "(define pi (* (atan 1) 4))\n\n(= (* (atan 1.0 0.0) 2) pi) --> #t\n") ("objects:s134" "\n\nprocedure: (bitwise-not exint)\n\nreturns: the bitwise not of exint\n\n\n\nprocedure: (bitwise-and exint ...)\n\nreturns: the bitwise and of exint ...\n\n\n\nprocedure: (bitwise-ior exint ...)\n\nreturns: the bitwise inclusive or of exint ...\n\n\n\nprocedure: (bitwise-xor exint ...)\n\nreturns: the bitwise exclusive or of exint ...\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "The inputs are treated as if represented in two's complement, even\nif they are not represented that way internally.\n\n" "\n\n" "(bitwise-not 0) --> -1\n\n(bitwise-not 3) --> -4\n\n\n(bitwise-and #b01101 #b00111) --> #b00101\n\n(bitwise-ior #b01101 #b00111) --> #b01111\n\n(bitwise-xor #b01101 #b00111) --> #b01010\n") ("objects:s135" "\n\nprocedure: (bitwise-if exint1 exint2 exint3)\n\nreturns: the bitwise \"if\" of its arguments\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "The inputs are treated as if represented in two's complement, even\nif they are not represented that way internally.\n\n" "\nFor each bit set in exint1, the corresponding bit of the result\nis taken from exint2, and for each bit not set in exint1,\nthe corresponding bit of the result is taken from x3.\n\n" "\n\n" "(bitwise-if #b101010 #b111000 #b001100) --> #b101100\n" "bitwise-if might be defined as follows:\n\n" "\n\n" "(define bitwise-if\n\n  (lambda (exint1 exint2 exint3)\n\n    (bitwise-ior\n\n      (bitwise-and exint1 exint2)\n\n      (bitwise-and (bitwise-not exint1) exint3))))\n") ("objects:s136" "\n\nprocedure: (bitwise-bit-count exint)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "For nonnegative inputs, bitwise-bit-count returns the number of bits\nset in the two's complement representation of exint.\nFor negative inputs, it returns a negative number whose magnitude is one\ngreater than the number of bits not set in the two's complement\nrepresentation of exint, which is equivalent to\n(bitwise-not (bitwise-bit-count (bitwise-not exint))).\n\n" "\n\n" "(bitwise-bit-count #b00000) --> 0\n\n(bitwise-bit-count #b00001) --> 1\n\n(bitwise-bit-count #b00100) --> 1\n\n(bitwise-bit-count #b10101) --> 3\n\n\n(bitwise-bit-count -1) --> -1\n\n(bitwise-bit-count -2) --> -2\n\n(bitwise-bit-count -4) --> -3\n") ("objects:s137" "\n\nprocedure: (bitwise-length exint)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "This procedure returns the number of bits of the smallest two's\ncomplement representation of exint, not including the sign\nbit for negative numbers.\nFor 0 bitwise-length returns 0.\n\n" "\n\n" "(bitwise-length #b00000) --> 0\n\n(bitwise-length #b00001) --> 1\n\n(bitwise-length #b00100) --> 3\n\n(bitwise-length #b00110) --> 3\n\n\n(bitwise-length -1) --> 0\n\n(bitwise-length -6) --> 3\n\n(bitwise-length -9) --> 4\n") ("objects:s138" "\n\nprocedure: (bitwise-first-bit-set exint)\n\nreturns: the index of the least significant bit set in exint\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "The input is treated as if represented in two's complement, even\nif it is not represented that way internally.\n\n" "\nIf exint is 0, bitwise-first-bit-set returns -1.\n\n" "\n\n" "(bitwise-first-bit-set #b00000) --> -1\n\n(bitwise-first-bit-set #b00001) --> 0\n\n(bitwise-first-bit-set #b01100) --> 2\n\n\n(bitwise-first-bit-set -1) --> 0\n\n(bitwise-first-bit-set -2) --> 1\n\n(bitwise-first-bit-set -3) --> 0\n") ("objects:s139" "\n\nprocedure: (bitwise-bit-set? exint1 exint2)\n\nreturns: #t if bit exint2 of exint1 is set, #f otherwise\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "exint2 is taken as a zero-based index for the bits\nin the two's complement representation of exint1.\nThe two's complement representation of a nonnegative number conceptually extends\nto the left (toward more significant bits) with an infinite number of zero bits, and\nthe two's complement representation of a negative number conceptually extends\nto the left with an infinite number of one bits.\nThus, exact integers can be used to represent arbitrarily large sets, where 0 is the\nempty set, -1 is the universe, and bitwise-bit-set? is used to test for\nmembership.\n\n" "\n\n" "(bitwise-bit-set? #b01011 0) --> #t\n\n(bitwise-bit-set? #b01011 2) --> #f\n\n\n(bitwise-bit-set? -1 0) --> #t\n\n(bitwise-bit-set? -1 20) --> #t\n\n(bitwise-bit-set? -3 1) --> #f\n\n\n(bitwise-bit-set? 0 5000) --> #f\n\n(bitwise-bit-set? -1 5000) --> #t\n") ("objects:s140" "\n\nprocedure: (bitwise-copy-bit exint1 exint2 exint3)\n\nreturns: exint1 with bit exint2 replaced by exint3\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "exint2 is taken as a zero-based index for the bits\nin the two's complement representation of exint1.\nexint3 must be 0 or 1.\nThis procedure effectively clears or sets the specified bit depending\non the value of exint3.\nexint1 is treated as if represented in two's complement, even\nif it is not represented that way internally.\n\n" "\n\n" "(bitwise-copy-bit #b01110 0 1) --> #b01111\n\n(bitwise-copy-bit #b01110 2 0) --> #b01010\n") ("objects:s141" "\n\nprocedure: (bitwise-bit-field exint1 exint2 exint3)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "exint2 and exint3 must be nonnegative,\nand exint2 must not be greater than exint3.\nThis procedure returns the number represented by extracting from exint1\nthe sequence of bits from exint2 (inclusive) to exint3 (exclusive).\nexint1 is treated as if represented in two's complement, even\nif it is not represented that way internally.\n\n" "\n\n" "(bitwise-bit-field #b10110 0 3) --> #b00110\n\n(bitwise-bit-field #b10110 1 3) --> #b00011\n\n(bitwise-bit-field #b10110 2 3) --> #b00001\n\n(bitwise-bit-field #b10110 3 3) --> #b00000\n") ("objects:s142" "\n\nprocedure: (bitwise-copy-bit-field exint1 exint2 exint3 exint4)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "exint2 and exint3 must be nonnegative, and exint2\nmust not be greater than exint3.\nThis procedure returns exint1 with the n bits from exint2 (inclusive) to\nexint3 (exclusive) replaced by the low-order n bits of exint4.\nexint1 and exint4 are treated as if represented in two's complement, even\nif they are not represented that way internally.\n\n" "\n\n" "(bitwise-copy-bit-field #b10000 0 3 #b10101) --> #b10101\n\n(bitwise-copy-bit-field #b10000 1 3 #b10101) --> #b10010\n\n(bitwise-copy-bit-field #b10000 2 3 #b10101) --> #b10100\n\n(bitwise-copy-bit-field #b10000 3 3 #b10101) --> #b10000\n") ("objects:s143" "\n\nprocedure: (bitwise-arithmetic-shift-right exint1 exint2)\n\nreturns: exint1 arithmetically shifted right by exint2 bits\n\n\n\nprocedure: (bitwise-arithmetic-shift-left exint1 exint2)\n\nreturns: exint1 shifted left by exint2 bits\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "exint2 must be nonnegative.\nexint1 is treated as if represented in two's complement, even\nif it is not represented that way internally.\n\n" "\n\n" "(bitwise-arithmetic-shift-right #b10000 3) --> #b00010\n\n(bitwise-arithmetic-shift-right -1 1) --> -1\n\n(bitwise-arithmetic-shift-right -64 3) --> -8\n\n\n(bitwise-arithmetic-shift-left #b00010 2) --> #b01000\n\n(bitwise-arithmetic-shift-left -1 2) --> -4\n") ("objects:s144" "\n\nprocedure: (bitwise-arithmetic-shift exint1 exint2)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "If exint2 is negative, bitwise-arithmetic-shift returns the\nresult of arithmetically shifting exint1 right by -exint2 bits.\nOtherwise, bitwise-arithmetic-shift returns the\nresult of shifting exint1 left by exint2 bits.\nexint1 is treated as if represented in two's complement, even\nif it is not represented that way internally.\n\n" "\n\n" "(bitwise-arithmetic-shift #b10000 -3) --> #b00010\n\n(bitwise-arithmetic-shift -1 -1) --> -1\n\n(bitwise-arithmetic-shift -64 -3) --> -8\n\n(bitwise-arithmetic-shift #b00010 2) --> #b01000\n\n(bitwise-arithmetic-shift -1 2) --> -4\n" "Thus, bitwise-arithmetic-shift behaves as if defined as follows.\n\n" "\n\n" "(define bitwise-arithmetic-shift\n\n  (lambda (exint1 exint2)\n\n    (if (< exint2 0)\n\n        (bitwise-arithmetic-shift-right exint1 (- exint2))\n\n        (bitwise-arithmetic-shift-left exint1 exint2))))\n") ("objects:s145" "\n\nprocedure: (bitwise-rotate-bit-field exint1 exint2 exint3 exint4)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "exint2, exint3, and exint4 must be nonnegative,\nand exint2 must not be greater than exint3.\nThis procedure returns the result of shifting the bits of\nexint1 from bit exint2 (inclusive) through bit exint3 (exclusive)\nleft by (mod exint4 (- exint3 exint2)) bits,\nwith the bits shifted out of the range inserted\nat the bottom end of the range.\nexint1 is treated as if represented in two's complement, even\nif it is not represented that way internally.\n\n" "\n\n" "(bitwise-rotate-bit-field #b00011010 0 5 3) --> #b00010110\n\n(bitwise-rotate-bit-field #b01101011 2 7 3) --> #b01011011\n") ("objects:s146" "\n\nprocedure: (bitwise-reverse-bit-field exint1 exint2 exint3)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic bitwise), (rnrs)\n\n" "exint2 and exint3 must be nonnegative, and exint2\nmust not be greater than exint3.\nThis procedure returns the result of reversing the bits of\nexint1 from bit exint2 (inclusive) through bit exint3 (exclusive).\nexint1 is treated as if represented in two's complement, even\nif it is not represented that way internally.\n\n" "\n\n" "(bitwise-reverse-bit-field #b00011010 0 5) --> #b00001011\n\n(bitwise-reverse-bit-field #b01101011 2 7) --> #b00101111\n") ("objects:s147" "\n\nprocedure: (string->number string)\n\n\n\nprocedure: (string->number string radix)\n\nreturns: the number represented by string, or #f\n\nlibraries: (rnrs base), (rnrs)\n\n" "If string is a valid representation of a number, that\nnumber is returned, otherwise #f is returned.\nThe number is interpreted in radix radix, which must be an\nexact integer in the set {2,8,10,16}.\nIf not specified, radix defaults to 10.\nAny radix specifier within string, e.g., #x, overrides the\nradix argument.\n\n" "\n\n" "(string->number \"0\") --> 0\n\n(string->number \"3.4e3\") --> 3400.0\n\n(string->number \"#x#e-2e2\") --> -738\n\n(string->number \"#e-2e2\" 16) --> -738\n\n(string->number \"#i15/16\") --> 0.9375\n\n(string->number \"10\" 16) --> 16\n") ("objects:s148" "\n\nprocedure: (number->string num)\n\n\n\nprocedure: (number->string num radix)\n\n\n\nprocedure: (number->string num radix precision)\n\nreturns: an external representation of num as a string\n\nlibraries: (rnrs base), (rnrs)\n\n" "The num is expressed in radix radix, which must be an\nexact integer in the set {2,8,10,16}.\nIf not specified, radix defaults to 10.\nIn any case, no radix specifier appears in the resulting string.\n\n" "\nThe external representation is such that, when converted back into\na number using string->number, the resulting numeric value is equivalent\nto num.\nThat is, for all inputs:\n\n" "\n\n" "(eqv? (string->number\n\n        (number->string num radix)\n\n        radix)\n\n      num)\n" "returns #t.\nAn exception with condition type\n&implementation-restriction is raised if this\nis not possible.\n\n" "\nIf precision is provided, it must be an exact positive integer,\nnum must be inexact, and radix must be 10.\nIn this case, the real part and, if present, the imaginary part of\nthe number are each printed with an explicit mantissa width m, where\nm is the least possible value greater than or equal to\nprecision that makes the expression above true.\n\n" "\nIf radix is 10, inexact values of num are expressed using the\nfewest number of significant digits possible [citation5]\nwithout violating the above restriction.\n\n" "\n\n" "(number->string 3.4) --> \"3.4\"\n\n(number->string 1e2) --> \"100.0\"\n\n(number->string 1e-23) --> \"1e-23\"\n\n(number->string -7/2) --> \"-7/2\"\n\n(number->string 220/9 16) --> \"DC/9\"\n") ("objects:s150" "\n\n\nprocedure: (fixnum? obj)\n\nreturns: #t if obj is a fixnum, #f otherwise\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "\n" "\n(fixnum? 0) --> #t\n\n(fixnum? -1) --> #t\n\n(fixnum? (- (expt 2 23))) --> #t\n\n(fixnum? (- (expt 2 23) 1)) --> #t\n") ("objects:s151" "\n\nprocedure: (least-fixnum)\n\nreturns: the least (most negative) fixnum supported by the implementation\n\n\n\nprocedure: (greatest-fixnum)\n\nreturns: the greatest (most positive) fixnum supported by the implementation\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "\n" "\n(fixnum? (- (least-fixnum) 1)) --> #f\n\n(fixnum? (least-fixnum)) --> #t\n\n(fixnum? (greatest-fixnum)) --> #t\n\n(fixnum? (+ (greatest-fixnum) 1)) --> #f\n") ("objects:s152" "\n\nprocedure: (fixnum-width)\n\nreturns: the implementation-dependent fixnum width\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "As described in the lead-in to this section, the fixnum width determines\nthe size of the fixnum range and must be at least 24.\n\n" "\n\n" "(define w (fixnum-width))\n\n(= (least-fixnum) (- (expt 2 (- w 1)))) --> #t\n\n(= (greatest-fixnum) (- (expt 2 (- w 1)) 1)) --> #t\n\n(>= w 24) --> #t\n") ("objects:s153" "\n\nprocedure: (fx=? fx1 fx2 fx3 ...)\n\n\n\nprocedure: (fx<? fx1 fx2 fx3 ...)\n\n\n\nprocedure: (fx>? fx1 fx2 fx3 ...)\n\n\n\nprocedure: (fx<=? fx1 fx2 fx3 ...)\n\n\n\nprocedure: (fx>=? fx1 fx2 fx3 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "The predicate fx=? returns #t if its arguments are equal.\nThe predicate fx<? returns #t if its arguments are monotonically\nincreasing, i.e., each argument is greater than the preceding ones,\nwhile fx>? returns #t if its arguments are monotonically decreasing.\nThe predicate fx<=? returns #t if its arguments are monotonically\nnondecreasing, i.e., each argument is not less than the preceding ones,\nwhile fx>=? returns #t if its arguments are monotonically nonincreasing.\n\n" "\n\n" "(fx=? 0 0) --> #t\n\n(fx=? -1 1) --> #f\n\n(fx<? (least-fixnum) 0 (greatest-fixnum)) --> #t\n\n(let ([x 3]) (fx<=? 0 x 9)) --> #t\n\n(fx>? 5 4 3 2 1) --> #t\n\n(fx<=? 1 3 2) --> #f\n\n(fx>=? 0 0 (least-fixnum)) --> #t\n") ("objects:s154" "\n\nprocedure: (fxzero? fx)\n\nreturns: #t if fx is zero, #f otherwise\n\n\n\nprocedure: (fxpositive? fx)\n\nreturns: #t if fx is greater than zero, #f otherwise\n\n\n\nprocedure: (fxnegative? fx)\n\nreturns: #t if fx is less than zero, #f otherwise\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fxzero? is equivalent to (lambda (x) (fx=? x 0)),\nfxpositive? is equivalent to (lambda (x) (fx>? x 0)), and\nfxnegative? to (lambda (x) (fx<? x 0)).\n\n\n" "\n\n" "(fxzero? 0) --> #t\n\n(fxzero? 1) --> #f\n\n\n(fxpositive? 128) --> #t\n\n(fxpositive? 0) --> #f\n\n(fxpositive? -1) --> #f\n\n\n(fxnegative? -65) --> #t\n\n(fxnegative? 0) --> #f\n\n(fxnegative? 1) --> #f\n") ("objects:s155" "\n\nprocedure: (fxeven? fx)\n\nreturns: #t if fx is even, #f otherwise\n\n\n\nprocedure: (fxodd? fx)\n\nreturns: #t if fx is odd, #f otherwise\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "\n" "\n(fxeven? 0) --> #t\n\n(fxeven? 1) --> #f\n\n(fxeven? -1) --> #f\n\n(fxeven? -10) --> #t\n\n\n(fxodd? 0) --> #f\n\n(fxodd? 1) --> #t\n\n(fxodd? -1) --> #t\n\n(fxodd? -10) --> #f\n") ("objects:s156" "\n\nprocedure: (fxmin fx1 fx2 ...)\n\nreturns: the minimum of fx1 fx2 ... \n\n\nprocedure: (fxmax fx1 fx2 ...)\n\nreturns: the maximum of fx1 fx2 ...\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "\n" "\n(fxmin 4 -7 2 0 -6) --> -7\n\n\n(let ([ls '(7 3 5 2 9 8)])\n\n  (apply fxmin ls)) --> 2\n\n\n(fxmax 4 -7 2 0 -6) --> 4\n\n\n(let ([ls '(7 3 5 2 9 8)])\n\n  (apply fxmax ls)) --> 9\n") ("objects:s157" "\n\nprocedure: (fx+ fx1 fx2)\n\nreturns: the sum of fx1 and fx2\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "\n" "\n(fx+ -3 4) --> 1\n") ("objects:s158" "\n\nprocedure: (fx- fx)\n\nreturns: the additive inverse of fx\n\n\n\nprocedure: (fx- fx1 fx2)\n\nreturns: the difference between fx1 and fx2\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "\n" "\n(fx- 3) --> -3\n\n(fx- -3 4) --> -7\n") ("objects:s159" "\n\nprocedure: (fx* fx1 fx2)\n\nreturns: the product of fx1 and fx2\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "\n" "\n(fx* -3 4) --> -12\n") ("objects:s160" "\n\nprocedure: (fxdiv fx1 fx2)\n\n\n\nprocedure: (fxmod fx1 fx2)\n\n\n\nprocedure: (fxdiv-and-mod fx1 fx2)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fx2 must not be zero.\nThese are fixnum-specific versions of the generic div,\nmod, and div-and-mod.\n\n" "\n\n" "(fxdiv 17 3) --> 5\n\n(fxmod 17 3) --> 2\n\n(fxdiv -17 3) --> -6\n\n(fxmod -17 3) --> 1\n\n(fxdiv 17 -3) --> -5\n\n(fxmod 17 -3) --> 2\n\n(fxdiv -17 -3) --> 6\n\n(fxmod -17 -3) --> 1\n\n\n(fxdiv-and-mod 17 3) --> 5\n\n                     gifs/ghostRightarrow.gif 2\n") ("objects:s161" "\n\nprocedure: (fxdiv0 fx1 fx2)\n\n\n\nprocedure: (fxmod0 fx1 fx2)\n\n\n\nprocedure: (fxdiv0-and-mod0 fx1 fx2)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fx2 must not be zero.\nThese are fixnum-specific versions of the generic div0,\nmod0, and div0-and-mod0.\n\n" "\n\n" "(fxdiv0 17 3) --> 6\n\n(fxmod0 17 3) --> -1\n\n(fxdiv0 -17 3) --> -6\n\n(fxmod0 -17 3) --> 1\n\n(fxdiv0 17 -3) --> -6\n\n(fxmod0 17 -3) --> -1\n\n(fxdiv0 -17 -3) --> 6\n\n(fxmod0 -17 -3) --> 1\n\n\n(fxdiv0-and-mod0 17 3) --> 6\n\n                       gifs/ghostRightarrow.gif -1\n") ("objects:s162" "\n\nprocedure: (fx+/carry fx1 fx2 fx3)\n\n\n\nprocedure: (fx-/carry fx1 fx2 fx3)\n\n\n\nprocedure: (fx*/carry fx1 fx2 fx3)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "When an ordinary fixnum addition, subtraction, or multiplication operation\noverflows, an exception is raised.\nThese alternative procedures instead return a carry and also allow the\ncarry to be propagated to the next operation.\nThey can be used to implement portable\ncode for multiple-precision arithmetic.\n\n" "\nThese procedures return the two\nfixnum values of the following computations.\nFor fx+/carry:\n\n" "\n\n" "(let* ([s (+ fx1 fx2 fx3)]\n\n       [s0 (mod0 s (expt 2 (fixnum-width)))]\n\n       [s1 (div0 s (expt 2 (fixnum-width)))])\n\n  (values s0 s1))\n" "for fx-/carry:\n\n" "\n\n" "(let* ([d (- fx1 fx2 fx3)]\n\n       [d0 (mod0 d (expt 2 (fixnum-width)))]\n\n       [d1 (div0 d (expt 2 (fixnum-width)))])\n\n  (values d0 d1))\n" "and for fx*/carry:\n\n" "\n\n" "(let* ([s (+ (* fx1 fx2) fx3)]\n\n       [s0 (mod0 s (expt 2 (fixnum-width)))]\n\n       [s1 (div0 s (expt 2 (fixnum-width)))])\n\n  (values s0 s1))\n") ("objects:s163" "\n\nprocedure: (fxnot fx)\n\nreturns: the bitwise not of fx\n\n\n\nprocedure: (fxand fx ...)\n\nreturns: the bitwise and of fx ...\n\n\n\nprocedure: (fxior fx ...)\n\nreturns: the bitwise inclusive or of fx ...\n\n\n\nprocedure: (fxxor fx ...)\n\nreturns: the bitwise exclusive or of fx ...\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "\n" "\n(fxnot 0) --> -1\n\n(fxnot 3) --> -4\n\n\n(fxand #b01101 #b00111) --> #b00101\n\n(fxior #b01101 #b00111) --> #b01111\n\n(fxxor #b01101 #b00111) --> #b01010\n") ("objects:s164" "\n\nprocedure: (fxif fx1 fx2 fx3)\n\nreturns: the bitwise \"if\" of its arguments\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "For each bit set in fx1, the corresponding bit of the result\nis taken from fx2, and for each bit not set in fx1,\nthe corresponding bit of the result is taken from x3.\n\n" "\n\n" "(fxif #b101010 #b111000 #b001100) --> #b101100\n" "fxif might be defined as follows:\n\n" "\n\n" "(define fxif\n\n  (lambda (fx1 fx2 fx3)\n\n    (fxior (fxand fx1 fx2)\n\n           (fxand (fxnot fx1) fx3))))\n") ("objects:s165" "\n\nprocedure: (fxbit-count fx)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "For nonnegative inputs, fxbit-count returns the number of bits\nset in the two's complement representation of fx.\nFor negative inputs, it returns a negative number whose magnitude is one\ngreater than the number of bits not set in fx, which is equivalent to\n(fxnot (fxbit-count (fxnot fx))).\n\n" "\n\n" "(fxbit-count #b00000) --> 0\n\n(fxbit-count #b00001) --> 1\n\n(fxbit-count #b00100) --> 1\n\n(fxbit-count #b10101) --> 3\n\n\n(fxbit-count -1) --> -1\n\n(fxbit-count -2) --> -2\n\n(fxbit-count -4) --> -3\n") ("objects:s166" "\n\nprocedure: (fxlength fx)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "This procedure returns the number of bits of the smallest two's\ncomplement representation of fx, not including the sign\nbit for negative numbers.\nFor 0 fxlength returns 0.\n\n" "\n\n" "(fxlength #b00000) --> 0\n\n(fxlength #b00001) --> 1\n\n(fxlength #b00100) --> 3\n\n(fxlength #b00110) --> 3\n\n\n(fxlength -1) --> 0\n\n(fxlength -6) --> 3\n\n(fxlength -9) --> 4\n") ("objects:s167" "\n\nprocedure: (fxfirst-bit-set fx)\n\nreturns: the index of the least significant bit set in fx\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "If fx is 0, fxfirst-bit-set returns -1.\n\n" "\n\n" "(fxfirst-bit-set #b00000) --> -1\n\n(fxfirst-bit-set #b00001) --> 0\n\n(fxfirst-bit-set #b01100) --> 2\n\n\n(fxfirst-bit-set -1) --> 0\n\n(fxfirst-bit-set -2) --> 1\n\n(fxfirst-bit-set -3) --> 0\n") ("objects:s168" "\n\nprocedure: (fxbit-set? fx1 fx2)\n\nreturns: #t if bit fx2 of fx1 is set, #f otherwise\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fx2 must be nonnegative.\nIt is taken as a zero-based index for the bits\nin the two's complement representation of fx1, with the sign\nbit virtually replicated an infinite number of positions to the left.\n\n" "\n\n" "(fxbit-set? #b01011 0) --> #t\n\n(fxbit-set? #b01011 2) --> #f\n\n\n(fxbit-set? -1 0) --> #t\n\n(fxbit-set? -1 20) --> #t\n\n(fxbit-set? -3 1) --> #f\n\n(fxbit-set? 0 (- (fixnum-width) 1)) --> #f\n\n(fxbit-set? -1 (- (fixnum-width) 1)) --> #t\n") ("objects:s169" "\n\nprocedure: (fxcopy-bit fx1 fx2 fx3)\n\nreturns: fx1 with bit fx2 replaced by fx3\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fx2 must be nonnegative and less than the value of\n(- (fixnum-width) 1).\nfx3 must be 0 or 1.\nThis procedure effectively clears or sets the specified bit depending\non the value of fx3.\n\n" "\n\n" "(fxcopy-bit #b01110 0 1) --> #b01111\n\n(fxcopy-bit #b01110 2 0) --> #b01010\n") ("objects:s170" "\n\nprocedure: (fxbit-field fx1 fx2 fx3)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fx2 and fx3 must be nonnegative and less than the value of\n(fixnum-width), and fx2 must not be greater than fx3.\nThis procedure returns the number represented by extracting from fx1\nthe sequence of bits from fx2 (inclusive) to fx3 (exclusive).\n\n" "\n\n" "(fxbit-field #b10110 0 3) --> #b00110\n\n(fxbit-field #b10110 1 3) --> #b00011\n\n(fxbit-field #b10110 2 3) --> #b00001\n\n(fxbit-field #b10110 3 3) --> #b00000\n") ("objects:s171" "\n\nprocedure: (fxcopy-bit-field fx1 fx2 fx3 fx4)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fx2 and fx3 must be nonnegative and less than the value of\n(fixnum-width), and fx2 must not be greater than fx3.\nThis procedure returns fx1 with n bits from fx2 (inclusive) to\nfx3 (exclusive) replaced by the low-order n bits of x4.\n\n" "\n\n" "(fxcopy-bit-field #b10000 0 3 #b10101) --> #b10101\n\n(fxcopy-bit-field #b10000 1 3 #b10101) --> #b10010\n\n(fxcopy-bit-field #b10000 2 3 #b10101) --> #b10100\n\n(fxcopy-bit-field #b10000 3 3 #b10101) --> #b10000\n") ("objects:s172" "\n\nprocedure: (fxarithmetic-shift-right fx1 fx2)\n\nreturns: fx1 arithmetically shifted right by fx2 bits\n\n\n\nprocedure: (fxarithmetic-shift-left fx1 fx2)\n\nreturns: fx1 shifted left by fx2 bits\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fx2 must be nonnegative and less than the value of\n(fixnum-width).\n\n" "\n\n" "(fxarithmetic-shift-right #b10000 3) --> #b00010\n\n(fxarithmetic-shift-right -1 1) --> -1\n\n(fxarithmetic-shift-right -64 3) --> -8\n\n\n(fxarithmetic-shift-left #b00010 2) --> #b01000\n\n(fxarithmetic-shift-left -1 2) --> -4\n") ("objects:s173" "\n\nprocedure: (fxarithmetic-shift fx1 fx2)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "The absolute value of fx2 must be less than the value of\n(fixnum-width).\nIf fx2 is negative, fxarithmetic-shift returns the\nresult of arithmetically shifting fx1 right by fx2 bits.\nOtherwise, fxarithmetic-shift returns the\nresult of shifting fx1 left by fx2 bits.\n\n" "\n\n" "(fxarithmetic-shift #b10000 -3) --> #b00010\n\n(fxarithmetic-shift -1 -1) --> -1\n\n(fxarithmetic-shift -64 -3) --> -8\n\n(fxarithmetic-shift #b00010 2) --> #b01000\n\n(fxarithmetic-shift -1 2) --> -4\n" "Thus, fxarithmetic-shift behaves as if defined as follows.\n\n" "\n\n" "(define fxarithmetic-shift\n\n  (lambda (fx1 fx2)\n\n    (if (fx<? fx2 0)\n\n        (fxarithmetic-shift-right fx1 (fx- fx2))\n\n        (fxarithmetic-shift-left fx1 fx2))))\n") ("objects:s174" "\n\nprocedure: (fxrotate-bit-field fx1 fx2 fx3 fx4)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fx2, fx3, and fx4 must be nonnegative and less than\nthe value of (fixnum-width), fx2 must not be greater\nthan fx3, and fx4 must not be greater than the difference between\nfx3 and fx2.\n\n" "\nThis procedure returns the result of shifting the bits of\nfx1 from bit fx2 (inclusive) through bit fx3 (exclusive)\nleft by fx4 bits, with the bits shifted out of the range inserted\nat the bottom end of the range.\n\n" "\n\n" "(fxrotate-bit-field #b00011010 0 5 3) --> #b00010110\n\n(fxrotate-bit-field #b01101011 2 7 3) --> #b01011011\n") ("objects:s175" "\n\nprocedure: (fxreverse-bit-field fx1 fx2 fx3)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic fixnums), (rnrs)\n\n" "fx2 and fx3 must be nonnegative and less than\nthe value of (fixnum-width), and fx2 must not be greater\nthan fx3.\nThis procedure returns the result of reversing the bits of\nfx1 from bit fx2 (inclusive) through bit fx3 (exclusive).\n\n" "\n\n" "(fxreverse-bit-field #b00011010 0 5) --> #b00001011\n\n(fxreverse-bit-field #b01101011 2 7) --> #b00101111\n") ("objects:s177" "\n\n\nprocedure: (flonum? obj)\n\nreturns: #t if obj is a flonum, otherwise #f\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "\n" "\n(flonum? 0) --> #f\n\n(flonum? 3/4) --> #f\n\n(flonum? 3.5) --> #t\n\n(flonum? .02) --> #t\n\n(flonum? 1e10) --> #t\n\n(flonum? 3.0+0.0i) --> #f\n") ("objects:s178" "\n\nprocedure: (fl=? fl1 fl2 fl3 ...)\n\n\n\nprocedure: (fl<? fl1 fl2 fl3 ...)\n\n\n\nprocedure: (fl>? fl1 fl2 fl3 ...)\n\n\n\nprocedure: (fl<=? fl1 fl2 fl3 ...)\n\n\n\nprocedure: (fl>=? fl1 fl2 fl3 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "The predicate fl=? returns #t if its arguments are equal.\nThe predicate fl<? returns #t if its arguments are monotonically\nincreasing, i.e., each argument is greater than the preceding ones,\nwhile fl>? returns #t if its arguments are monotonically decreasing.\nThe predicate fl<=? returns #t if its arguments are monotonically\nnondecreasing, i.e., each argument is not less than the preceding ones,\nwhile fl>=? returns #t if its arguments are monotonically nonincreasing.\nWhen passed only one argument, each of these predicates returns #t.\n\n" "\nComparisons involving NaNs always return #f.\n\n" "\n\n" "(fl=? 0.0 0.0) --> #t\n\n(fl<? -1.0 0.0 1.0) --> #t\n\n(fl>? -1.0 0.0 1.0) --> #f\n\n(fl<=? 0.0 3.0 3.0) --> #t\n\n(fl>=? 4.0 3.0 3.0) --> #t\n\n(fl<? 7.0 +inf.0) --> #t\n\n(fl=? +nan.0 0.0) --> #f\n\n(fl=? +nan.0 +nan.0) --> #f\n\n(fl<? +nan.0 +nan.0) --> #f\n\n(fl<=? +nan.0 +inf.0) --> #f\n\n(fl>=? +nan.0 +inf.0) --> #f\n") ("objects:s179" "\n\nprocedure: (flzero? fl)\n\nreturns: #t if fl is zero, #f otherwise\n\n\n\nprocedure: (flpositive? fl)\n\nreturns: #t if fl is greater than zero, #f otherwise\n\n\n\nprocedure: (flnegative? fl)\n\nreturns: #t if fl is less than zero, #f otherwise\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "flzero? is equivalent to (lambda (x) (fl=? x 0.0)),\nflpositive? is equivalent to (lambda (x) (fl>? x 0.0)), and\nflnegative? to (lambda (x) (fl<? x 0.0)).\n\n" "\nEven if the flonum representation distinguishes -0.0 from +0.0, -0.0 is\nconsidered both zero and nonnegative.\n\n" "\n\n" "(flzero? 0.0) --> #t\n\n(flzero? 1.0) --> #f\n\n\n(flpositive? 128.0) --> #t\n\n(flpositive? 0.0) --> #f\n\n(flpositive? -1.0) --> #f\n\n\n(flnegative? -65.0) --> #t\n\n(flnegative? 0.0) --> #f\n\n(flnegative? 1.0) --> #f\n\n\n(flzero? -0.0) --> #t\n\n(flnegative? -0.0) --> #f\n\n\n(flnegative? +nan.0) --> #f\n\n(flzero? +nan.0) --> #f\n\n(flpositive? +nan.0) --> #f\n\n\n(flnegative? +inf.0) --> #f\n\n(flnegative? -inf.0) --> #t\n") ("objects:s180" "\n\nprocedure: (flinteger? fl)\n\nreturns: #t if fl is integer, #f otherwise\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "\n" "\n(flinteger? 0.0) --> #t\n\n(flinteger? -17.0) --> #t\n\n(flinteger? +nan.0) --> #f\n\n(flinteger? +inf.0) --> #f\n") ("objects:s181" "\n\nprocedure: (flfinite? fl)\n\nreturns: #t if fl is finite, #f otherwise\n\n\n\nprocedure: (flinfinite? fl)\n\nreturns: #t if fl is infinite, #f otherwise\n\n\n\nprocedure: (flnan? fl)\n\nreturns: #t if fl is a NaN, #f otherwise\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "\n" "\n(flfinite? 3.1415) --> #t\n\n(flinfinite? 3.1415) --> #f\n\n(flnan? 3.1415) --> #f\n\n\n(flfinite? +inf.0) --> #f\n\n(flinfinite? -inf.0) --> #t\n\n(flnan? -inf.0) --> #f\n\n\n(flfinite? +nan.0) --> #f\n\n(flinfinite? +nan.0) --> #f\n\n(flnan? +nan.0) --> #t\n") ("objects:s182" "\n\nprocedure: (fleven? fl-int)\n\nreturns: #t if fl-int is even, #f otherwise\n\n\n\nprocedure: (flodd? fl-int)\n\nreturns: #t if fl-int is odd, #f otherwise\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "fl-int must be an integer-valued flonum.\n\n" "\n\n" "(fleven? 0.0) --> #t\n\n(fleven? 1.0) --> #f\n\n(fleven? -1.0) --> #f\n\n(fleven? -10.0) --> #t\n\n\n(flodd? 0.0) --> #f\n\n(flodd? 1.0) --> #t\n\n(flodd? -1.0) --> #t\n\n(flodd? -10.0) --> #f\n") ("objects:s183" "\n\nprocedure: (flmin fl1 fl2 ...)\n\nreturns: the minimum of fl1 fl2 ... \n\n\nprocedure: (flmax fl1 fl2 ...)\n\nreturns: the maximum of fl1 fl2 ...\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "\n" "\n(flmin 4.2 -7.5 2.0 0.0 -6.4) --> -7.5\n\n\n(let ([ls '(7.1 3.5 5.0 2.6 2.6 8.0)])\n\n  (apply flmin ls)) --> 2.6\n\n\n(flmax 4.2 -7.5 2.0 0.0 -6.4) --> 4.2\n\n\n(let ([ls '(7.1 3.5 5.0 2.6 2.6 8.0)])\n\n  (apply flmax ls)) --> 8.0\n") ("objects:s184" "\n\nprocedure: (fl+ fl ...)\n\nreturns: the sum of the arguments fl ...\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "When called with no arguments, fl+ returns 0.0.\n\n" "\n\n" "(fl+) --> 0.0\n\n(fl+ 1.0 2.5) --> 3.25\n\n(fl+ 3.0 4.25 5.0) --> 12.25\n\n(apply fl+ '(1.0 2.0 3.0 4.0 5.0)) --> 15.0\n") ("objects:s185" "\n\nprocedure: (fl- fl)\n\nreturns: the additive inverse of fl\n\n\n\nprocedure: (fl- fl1 fl2 fl3 ...)\n\nreturns: the difference between fl1 and the sum of fl2 fl3 ...\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "With an IEEE floating-point representation of flonums,\nthe single-argument fl- is equivalent to\n\n" "\n\n" "(lambda (x) (fl* -1.0 x))\n" "or\n\n" "\n\n" "(lambda (x) (fl- -0.0 x))\n" "but not\n\n" "\n\n" "(lambda (x) (fl- 0.0 x))\n" "since the latter returns 0.0 rather than -0.0 for 0.0.\n\n" "\n\n" "(fl- 0.0) --> -0.0\n\n(fl- 3.0) --> -3.0\n\n(fl- 4.0 3.0) --> 1.0\n\n(fl- 4.0 3.0 2.0 1.0) --> -2.0\n") ("objects:s186" "\n\nprocedure: (fl* fl ...)\n\nreturns: the product of the arguments fl ...\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "When called with no arguments, fl* returns 1.0.\n\n" "\n\n" "(fl*) --> 1.0\n\n(fl* 1.5 2.5) --> 3.75\n\n(fl* 3.0 -4.0 5.0) --> -60.0\n\n(apply fl* '(1.0 -2.0 3.0 -4.0 5.0)) --> 120.0\n") ("objects:s187" "\n\nprocedure: (fl/ fl)\n\nreturns: the multiplicative inverse of fl\n\n\n\nprocedure: (fl/ fl1 fl2 fl3 ...)\n\nreturns: the result of dividing fl1 by the product of fl2 fl3 ...\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "\n" "\n(fl/ -4.0) --> -0.25\n\n(fl/ 8.0 -2.0) --> -4.0\n\n(fl/ -9.0 2.0) --> -4.5\n\n(fl/ 60.0 5.0 3.0 2.0) --> 2.0\n") ("objects:s188" "\n\nprocedure: (fldiv fl1 fl2)\n\n\n\nprocedure: (flmod fl1 fl2)\n\n\n\nprocedure: (fldiv-and-mod fl1 fl2)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "These are flonum-specific versions of the generic div,\nmod, and div-and-mod.\n\n" "\n\n" "(fldiv 17.0 3.0) --> 5.0\n\n(flmod 17.0 3.0) --> 2.0\n\n(fldiv -17.0 3.0) --> -6.0\n\n(flmod -17.0 3.0) --> 1.0\n\n(fldiv 17.0 -3.0) --> -5.0\n\n(flmod 17.0 -3.0) --> 2.0\n\n(fldiv -17.0 -3.0) --> 6.0\n\n(flmod -17.0 -3.0) --> 1.0\n\n\n(fldiv-and-mod 17.5 3.75) --> 4.0\n\n                          gifs/ghostRightarrow.gif 2.5\n") ("objects:s189" "\n\nprocedure: (fldiv0 fl1 fl2)\n\n\n\nprocedure: (flmod0 fl1 fl2)\n\n\n\nprocedure: (fldiv0-and-mod0 fl1 fl2)\n\nreturns: see below\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "These are flonum-specific versions of the generic div0,\nmod0, and div0-and-mod0.\n\n" "\n\n" "(fldiv0 17.0 3.0) --> 6.0\n\n(flmod0 17.0 3.0) --> -1.0\n\n(fldiv0 -17.0 3.0) --> -6.0\n\n(flmod0 -17.0 3.0) --> 1.0\n\n(fldiv0 17.0 -3.0) --> -6.0\n\n(flmod0 17.0 -3.0) --> -1.0\n\n(fldiv0 -17.0 -3.0) --> 6.0\n\n(flmod0 -17.0 -3.0) --> 1.0\n\n\n(fldiv0-and-mod0 17.5 3.75) --> 5.0\n\n                            gifs/ghostRightarrow.gif -1.25\n") ("objects:s190" "\n\nprocedure: (flround fl)\n\nreturns: the integer closest to fl\n\n\n\nprocedure: (fltruncate fl)\n\nreturns: the integer closest to fl toward zero\n\n\n\nprocedure: (flfloor fl)\n\nreturns: the integer closest to fl toward math/tspl/11.gif\n\n\n\nprocedure: (flceiling fl)\n\nreturns: the integer closest to fl toward math/tspl/12.gif\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "If fl is an integer, NaN, or infinity, each of these procedures returns fl.\nIf fl is exactly between two integers, flround returns the closest\neven integer.\n\n" "\n\n" "(flround 17.3) --> 17.0\n\n(flround -17.3) --> -17.0\n\n(flround 2.5) --> 2.0\n\n(flround 3.5) --> 4.0\n\n\n(fltruncate 17.3) --> 17.0\n\n(fltruncate -17.3) --> -17.0\n\n\n(flfloor 17.3) --> 17.0\n\n(flfloor -17.3) --> -18.0\n\n\n(flceiling 17.3) --> 18.0\n\n(flceiling -17.3) --> -17.0\n") ("objects:s191" "\n\nprocedure: (flnumerator fl)\n\nreturns: the numerator of fl\n\n\n\nprocedure: (fldenominator fl)\n\nreturns: the denominator of fl\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "If fl is an integer, including 0.0, or infinity, the numerator is fl\nand the denominator is 1.0.\n\n" "\n\n" "(flnumerator -9.0) --> -9.0\n\n(fldenominator -9.0) --> 1.0\n\n(flnumerator 0.0) --> 0.0\n\n(fldenominator 0.0) --> 1.0\n\n(flnumerator -inf.0) --> -inf.0\n\n(fldenominator -inf.0) --> 1.0\n" "The following hold for IEEE floats, but not necessarily other\nflonum representations.\n\n" "\n\n" "(flnumerator 3.5) --> 7.0\n\n(fldenominator 3.5) --> 2.0\n") ("objects:s192" "\n\nprocedure: (flabs fl)\n\nreturns: absolute value of fl\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "\n" "\n(flabs 3.2) --> 3.2\n\n(flabs -2e-20) --> 2e-20\n") ("objects:s193" "\n\nprocedure: (flexp fl)\n\nreturns: e to the fl power\n\n\n\nprocedure: (fllog fl)\n\nreturns: the natural logarithm of fl\n\n\n\nprocedure: (fllog fl1 fl2)\n\nreturns: the base-fl2 logarithm of fl1\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "\n" "\n(flexp 0.0) --> 1.0\n\n(flexp 1.0) --> 2.7182818284590455\n\n\n(fllog 1.0) --> 0.0\n\n(fllog (exp 1.0)) --> 1.0\n\n(fl/ (fllog 100.0) (fllog 10.0)) --> 2.0\n\n\n(fllog 100.0 10.0) --> 2.0\n\n(fllog .125 2.0) --> -3.0\n") ("objects:s194" "\n\nprocedure: (flsin fl)\n\nreturns: the sine of fl\n\n\n\nprocedure: (flcos fl)\n\nreturns: the cosine of fl\n\n\n\nprocedure: (fltan fl)\n\nreturns: the tangent of fl\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n") ("objects:s195" "\n\nprocedure: (flasin fl)\n\nreturns: the arc sine of fl\n\n\n\nprocedure: (flacos fl)\n\nreturns: the arc cosine of fl\n\n\n\nprocedure: (flatan fl)\n\nreturns: the arc tangent of fl\n\n\n\nprocedure: (flatan fl1 fl2)\n\nreturns: the arc tangent of fl1/fl2\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n") ("objects:s196" "\n\nprocedure: (flsqrt fl)\n\nreturns: the principal square root of fl\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "Returns the principal square root of fl.\nThe square root of -0.0 should be -0.0.\nThe result for other negative numbers may be a NaN or some\nother unspecified flonum.\n\n" "\n\n" "(flsqrt 4.0) --> 2.0\n\n(flsqrt 0.0) --> 0.0\n\n(flsqrt -0.0) --> -0.0\n") ("objects:s197" "\n\nprocedure: (flexpt fl1 fl2)\n\nreturns: fl1 raised to the fl2 power\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "If fl1 is negative and fl2 is not an integer,\nthe result may be a NaN or some other unspecified flonum.\nIf fl1 and fl2 are both zero, the result\nis 1.0.  If fl1 is zero and fl2 is positive,\nthe result is zero.  In other cases where fl1 is\nzero, the result may be a NaN or some other unspecified\nflonum.\n\n" "\n\n" "(flexpt 3.0 2.0) --> 9.0\n\n(flexpt 0.0 +inf.0) --> 0.0\n") ("objects:s198" "\n\nprocedure: (fixnum->flonum fx)\n\nreturns: the flonum representation closest to fx\n\n\n\nprocedure: (real->flonum real)\n\nreturns: the flonum representation closest to real\n\nlibraries: (rnrs arithmetic flonums), (rnrs)\n\n" "fixnum->flonum is a restricted variant of inexact.\nreal->flonum is a restricted variant of inexact when\nthe input is an exact real; when it is an inexact non-flonum real,\nit coverts the inexact non-flonum real into the closest flonum.\n\n\n" "\n\n" "(fixnum->flonum 0) --> 0.0\n\n(fixnum->flonum 13) --> 13.0\n\n\n(real->flonum -1/2) --> -0.5\n\n(real->flonum 1s3) --> 1000.0\n") ("objects:s201" "\n\n\nprocedure: (char=? char1 char2 char3 ...)\n\n\n\nprocedure: (char<? char1 char2 char3 ...)\n\n\n\nprocedure: (char>? char1 char2 char3 ...)\n\n\n\nprocedure: (char<=? char1 char2 char3 ...)\n\n\n\nprocedure: (char>=? char1 char2 char3 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "These predicates behave in a similar manner to the numeric predicates\n=, <, >, <=, and >=.\nFor example, char=? returns #t when its arguments are\nequivalent characters, and char<? returns #t when its\narguments are monotonically increasing character (Unicode scalar) values.\n\n" "\n\n" "(char>? #\\a #\\b) --> #f\n\n(char<? #\\a #\\b) --> #t\n\n(char<? #\\a #\\b #\\c) --> #t\n\n(let ([c #\\r])\n\n  (char<=? #\\a c #\\z)) --> #t\n\n(char<=? #\\Z #\\W) --> #f\n\n(char=? #\\+ #\\+) --> #t\n") ("objects:s202" "\n\nprocedure: (char-ci=? char1 char2 char3 ...)\n\n\n\nprocedure: (char-ci<? char1 char2 char3 ...)\n\n\n\nprocedure: (char-ci>? char1 char2 char3 ...)\n\n\n\nprocedure: (char-ci<=? char1 char2 char3 ...)\n\n\n\nprocedure: (char-ci>=? char1 char2 char3 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "These predicates are identical to the predicates char=?, char<?,\nchar>?, char<=?, and char>=? except that they are\ncase-insensitive, i.e., compare the case-folded versions of their arguments.\nFor example, char=? considers #\\a and #\\A to be\ndistinct values; char-ci=? does not.\n\n" "\n\n" "(char-ci<? #\\a #\\B) --> #t\n\n(char-ci=? #\\W #\\w) --> #t\n\n(char-ci=? #\\= #\\+) --> #f\n\n(let ([c #\\R])\n\n  (list (char<=? #\\a c #\\z)\n\n        (char-ci<=? #\\a c #\\z))) --> (#f #t)\n") ("objects:s203" "\n\nprocedure: (char-alphabetic? char)\n\nreturns: #t if char is a letter, #f otherwise\n\n\n\nprocedure: (char-numeric? char)\n\nreturns: #t if char is a digit, #f otherwise\n\n\n\nprocedure: (char-whitespace? char)\n\nreturns: #t if char is whitespace, #f otherwise\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "A character is alphabetic if it has the Unicode \"Alphabetic\" property,\nnumeric if it has the Unicode \"Numeric\" property, and whitespace if has\nthe Unicode \"White_Space\" property.\n\n" "\n\n" "(char-alphabetic? #\\a) --> #t\n\n(char-alphabetic? #\\T) --> #t\n\n(char-alphabetic? #\\8) --> #f\n\n(char-alphabetic? #\\$) --> #f\n\n\n(char-numeric? #\\7) --> #t\n\n(char-numeric? #\\2) --> #t\n\n(char-numeric? #\\X) --> #f\n\n(char-numeric? #\\space) --> #f\n\n\n(char-whitespace? #\\space) --> #t\n\n(char-whitespace? #\\newline) --> #t\n\n(char-whitespace? #\\Z) --> #f\n") ("objects:s204" "\n\nprocedure: (char-lower-case? char)\n\nreturns: #t if char is lower case, #f otherwise\n\n\n\nprocedure: (char-upper-case? char)\n\nreturns: #t if char is upper case, #f otherwise\n\n\n\nprocedure: (char-title-case? char)\n\nreturns: #t if char is title case, #f otherwise\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "A character is upper-case if it has the Unicode \"Uppercase\" property,\nlower-case if it has the \"Lowercase\" property, and title-case if it is\nin the Lt general category.\n\n" "\n\n" "(char-lower-case? #\\r) --> #t\n\n(char-lower-case? #\\R) --> #f\n\n\n(char-upper-case? #\\r) --> #f\n\n(char-upper-case? #\\R) --> #t\n\n\n(char-title-case? #\\I) --> #f\n\n(char-title-case? #\\x01C5) --> #t\n") ("objects:s205" "\n\nprocedure: (char-general-category char)\n\nreturns: a symbol representing the Unicode general category of char\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "The return value is one of the symbols Lu, Ll,\nLt, Lm, Lo, Mn, Mc,\nMe, Nd, Nl, No, Ps,\nPe, Pi, Pf, Pd, Pc,\nPo, Sc, Sm, Sk, So,\nZs, Zp, Zl, Cc, Cf,\nCs, Co, or Cn.\n\n" "\n\n" "(char-general-category #\\a) --> Ll\n\n(char-general-category #\\space) --> Zs\n\n(char-general-category #\\x10FFFF) --> Cn  \n") ("objects:s206" "\n\nprocedure: (char-upcase char)\n\nreturns: the upper-case character counterpart of char\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "If char is a lower- or title-case character and has a single\nupper-case counterpart, char-upcase returns the upper-case\ncounterpart.\nOtherwise char-upcase returns char.\n\n" "\n\n" "(char-upcase #\\g) --> #\\G\n\n(char-upcase #\\G) --> #\\G\n\n(char-upcase #\\7) --> #\\7\n\n(char-upcase #\\math/tspl/20.gif) --> #\\math/tspl/21.gif\n") ("objects:s207" "\n\nprocedure: (char-downcase char)\n\nreturns: the lower-case character equivalent of char\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "If char is an upper- or title-case character and has a single\nlower-case counterpart, char-downcase returns the lower-case\ncounterpart.\nOtherwise char-downcase returns char.\n\n" "\n\n" "(char-downcase #\\g) --> #\\g\n\n(char-downcase #\\G) --> #\\g\n\n(char-downcase #\\7) --> #\\7\n\n(char-downcase #\\math/tspl/20.gif) --> #\\math/tspl/20.gif\n") ("objects:s208" "\n\nprocedure: (char-titlecase char)\n\nreturns: the title-case character equivalent of char\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "If char is an upper- or lower-case character and has a single\ntitle-case counterpart, char-titlecase returns the title-case\ncounterpart.\nOtherwise, if it is not a title-case character, has no single title-case\ncounterpart, but does have a single upper-case counterpart,\nchar-titlecase returns the upper-case counterpart.\nOtherwise char-titlecase returns char.\n\n" "\n\n" "(char-titlecase #\\g) --> #\\G\n\n(char-titlecase #\\G) --> #\\G\n\n(char-titlecase #\\7) --> #\\7\n\n(char-titlecase #\\math/tspl/20.gif) --> #\\math/tspl/21.gif\n") ("objects:s209" "\n\nprocedure: (char-foldcase char)\n\nreturns: the case-folded character equivalent of char\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "If char has a case-folded counterpart, char-foldcase\nreturns the case-folded counterpart.\nOtherwise, char-foldcase returns char.\nFor most characters, (char-foldcase char) is\nequivalent to (char-downcase (char-upcase char)),\nbut for Turkic  and ,\nchar-foldcase acts as the identity.\n\n" "\n\n" "(char-foldcase #\\g) --> #\\g\n\n(char-foldcase #\\G) --> #\\g\n\n(char-foldcase #\\7) --> #\\7\n\n(char-foldcase #\\math/tspl/20.gif) --> #\\math/tspl/22.gif\n") ("objects:s210" "\n\nprocedure: (char->integer char)\n\nreturns: the Unicode scalar value of char as an exact integer\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "(char->integer #\\newline) --> 10\n\n(char->integer #\\space) --> 32\n\n(- (char->integer #\\Z) (char->integer #\\A)) --> 25\n") ("objects:s211" "\n\nprocedure: (integer->char n)\n\nreturns: the character corresponding to the Unicode scalar value n\n\nlibraries: (rnrs base), (rnrs)\n\n" "n must be an exact integer and a valid Unicode\nscalar value, i.e., math/tspl/23.gif or\nmath/tspl/24.gif.\n\n" "\n\n" "(integer->char 48) --> #\\0\n\n(integer->char #x3BB) --> #\\math/tspl/25.gif\n") ("objects:s215" "\n\n\nprocedure: (string=? string1 string2 string3 ...)\n\n\n\nprocedure: (string<? string1 string2 string3 ...)\n\n\n\nprocedure: (string>? string1 string2 string3 ...)\n\n\n\nprocedure: (string<=? string1 string2 string3 ...)\n\n\n\nprocedure: (string>=? string1 string2 string3 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "As with =, <, >, <=, and >=, these predicates\nexpress relationships among all of the arguments.\nFor example, string>? determines if the lexicographic ordering\nof its arguments is monotonically decreasing.\n\n" "\nThe comparisons are based on the character predicates char=?\nand char<?.\nTwo strings are lexicographically equivalent if they are the same length\nand consist of the same sequence of characters according to char=?.\nIf two strings differ only in length, the shorter string is considered to\nbe lexicographically less than the longer string.\nOtherwise, the first character position at which the strings differ (by char=?)\ndetermines which string is lexicographically less than the other, according\nto char<?.\n\n" "\nTwo-argument string=? may be defined without error checks as follows.\n\n" "\n\n" "(define string=?\n\n  (lambda (s1 s2)\n\n    (let ([n (string-length s1)])\n\n      (and (= (string-length s2) n)\n\n           (let loop ([i 0])\n\n             (or (= i n)\n\n                 (and (char=? (string-ref s1 i) (string-ref s2 i))\n\n                      (loop (+ i 1)))))))))\n" "Two-argument string<? may be defined without error checks as follows.\n\n" "\n\n" "(define string<?\n\n  (lambda (s1 s2)\n\n    (let ([n1 (string-length s1)] [n2 (string-length s2)])\n\n      (let loop ([i 0])\n\n        (and (not (= i n2))\n\n             (or (= i n1)\n\n                 (let ([c1 (string-ref s1 i)] [c2 (string-ref s2 i)])\n\n                   (or (char<? c1 c2)\n\n                       (and (char=? c1 c2)\n\n                            (loop (+ i 1)))))))))))\n" "These definitions may be extended straightforwardly to support\nthree or more arguments.\nstring<=?, string>?, and string>=?\nmay be defined similarly.\n\n" "\n\n" "(string=? \"mom\" \"mom\") --> #t\n\n(string<? \"mom\" \"mommy\") --> #t\n\n(string>? \"Dad\" \"Dad\") --> #f\n\n(string=? \"Mom and Dad\" \"mom and dad\") --> #f\n\n(string<? \"a\" \"b\" \"c\") --> #t\n") ("objects:s216" "\n\nprocedure: (string-ci=? string1 string2 string3 ...)\n\n\n\nprocedure: (string-ci<? string1 string2 string3 ...)\n\n\n\nprocedure: (string-ci>? string1 string2 string3 ...)\n\n\n\nprocedure: (string-ci<=? string1 string2 string3 ...)\n\n\n\nprocedure: (string-ci>=? string1 string2 string3 ...)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "These predicates are identical to\nstring=?, string<?, string>?, string<=?, and\nstring>=? except that they are case-insensitive,\ni.e., compare the case-folded versions of their arguments.\n\n" "\n\n" "(string-ci=? \"Mom and Dad\" \"mom and dad\") --> #t\n\n(string-ci<=? \"say what\" \"Say What!?\") --> #t\n\n(string-ci>? \"N\" \"m\" \"L\" \"k\") --> #t\n\n(string-ci=? \"Strae\" \"Strasse\") --> #t\n") ("objects:s217" "\n\nprocedure: (string char ...)\n\nreturns: a string containing the characters char ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(string) --> \"\"\n\n(string #\\a #\\b #\\c) --> \"abc\"\n\n(string #\\H #\\E #\\Y #\\!) --> \"HEY!\"\n") ("objects:s218" "\n\nprocedure: (make-string n)\n\n\n\nprocedure: (make-string n char)\n\nreturns: a string of length n\n\nlibraries: (rnrs base), (rnrs)\n\n" "n must be an exact nonnegative integer.\nIf char is supplied, the string is filled with n\noccurrences of char,\notherwise the characters contained in the string are unspecified.\n\n" "\n\n" "(make-string 0) --> \"\"\n\n(make-string 0 #\\x) --> \"\"\n\n(make-string 5 #\\x) --> \"xxxxx\"\n") ("objects:s219" "\n\nprocedure: (string-length string)\n\nreturns: the number of characters in string\n\nlibraries: (rnrs base), (rnrs)\n\n" "The length of a string is always an exact nonnegative integer.\n\n" "\n\n" "(string-length \"abc\") --> 3\n\n(string-length \"\") --> 0\n\n(string-length \"hi there\") --> 8\n\n(string-length (make-string 1000000)) --> 1000000\n") ("objects:s220" "\n\nprocedure: (string-ref string n)\n\nreturns: the nth character (zero-based) of string\n\nlibraries: (rnrs base), (rnrs)\n\n" "n must be an exact nonnegative integer less than\nthe length of string.\n\n" "\n\n" "(string-ref \"hi there\" 0) --> #\\h\n\n(string-ref \"hi there\" 5) --> #\\e\n") ("objects:s221" "\n\nprocedure: (string-set! string n char)\n\nreturns: unspecified\n\nlibraries: (rnrs mutable-strings)\n\n" "n must be an exact nonnegative integer less than\nthe length of string.\nstring-set! changes the nth element of string to char.\n\n" "\n\n" "(let ([str (string-copy \"hi three\")])\n\n  (string-set! str 5 #\\e)\n\n  (string-set! str 6 #\\r)\n\n  str) --> \"hi there\"\n") ("objects:s222" "\n\nprocedure: (string-copy string)\n\nreturns: a new copy of string\n\nlibraries: (rnrs base), (rnrs)\n\n" "This procedure creates a new string with the same length and\ncontents as string.\n\n" "\n\n" "(string-copy \"abc\") --> \"abc\"\n\n\n(let ([str \"abc\"])\n\n  (eq? str (string-copy str))) --> #f\n") ("objects:s223" "\n\nprocedure: (string-append string ...)\n\nreturns: a new string formed by concatenating the strings string ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(string-append) --> \"\"\n\n(string-append \"abc\" \"def\") --> \"abcdef\"\n\n(string-append \"Hey \" \"you \" \"there!\") --> \"Hey you there!\"\n" "The following implementation of string-append recurs down the\nlist of strings to compute the total length, then allocates the new\nstring, then fills it up as it unwinds the recursion.\n\n" "\n\n" "(define string-append\n\n  (lambda args\n\n    (let f ([ls args] [n 0])\n\n      (if (null? ls)\n\n          (make-string n)\n\n          (let* ([s1 (car ls)]\n\n                 [m (string-length s1)]\n\n                 [s2 (f (cdr ls) (+ n m))])\n\n            (do ([i 0 (+ i 1)] [j n (+ j 1)])\n\n                ((= i m) s2)\n\n              (string-set! s2 j (string-ref s1 i))))))))\n") ("objects:s224" "\n\nprocedure: (substring string start end)\n\nreturns: a copy of string from start (inclusive) to end\n  (exclusive)\n\nlibraries: (rnrs base), (rnrs)\n\n" "start and end must be exact nonnegative integers;\nstart must be less than or equal to end,\nwhile end must be less than or equal to the length of string.\nIf end = start, a string of length zero is returned.\nsubstring may be defined without error checks as follows.\n\n" "\n\n" "(define substring\n\n  (lambda (s1 m n)\n\n    (let ([s2 (make-string (- n m))])\n\n      (do ([j 0 (+ j 1)] [i m (+ i 1)])\n\n          ((= i n) s2)\n\n        (string-set! s2 j (string-ref s1 i))))))\n\n\n(substring \"hi there\" 0 1) --> \"h\"\n\n(substring \"hi there\" 3 6) --> \"the\"\n\n(substring \"hi there\" 5 5) --> \"\"\n\n\n(let ([str \"hi there\"])\n\n  (let ([end (string-length str)])\n\n    (substring str 0 end))) --> \"hi there\"\n") ("objects:s225" "\n\nprocedure: (string-fill! string char)\n\nreturns: unspecified\n\nlibraries: (rnrs mutable-strings)\n\n" "string-fill! sets every character in string to char.\n\n" "\n\n" "(let ([str (string-copy \"sleepy\")])\n\n  (string-fill! str #\\Z)\n\n  str) --> \"ZZZZZZ\"\n" "string-fill! might be defined as follows:\n\n" "\n\n" "(define string-fill!\n\n  (lambda (s c)\n\n    (let ([n (string-length s)])\n\n      (do ([i 0 (+ i 1)])\n\n          ((= i n))\n\n          (string-set! s i c)))))\n" "An alternative definition is given on page 276.\n\n\n") ("objects:s226" "\n\n\nprocedure: (string-upcase string)\n\nreturns: the upper-case equivalent of string\n\n\n\nprocedure: (string-downcase string)\n\nreturns: the lower-case equivalent of string\n\n\n\nprocedure: (string-foldcase string)\n\nreturns: the case-folded equivalent of string\n\n\n\nprocedure: (string-titlecase string)\n\nreturns: the title-case equivalent of string\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "These procedures implement Unicode's locale-independent case mappings from\nscalar-value sequences to scalar-value sequences.\nThese mappings do not always map single characters to single characters, so\nthe length of the result string may differ from the length of string.\nIf the result string is the same as string (by string=?),\nstring or a copy of string may be returned.\nOtherwise, the result string is newly allocated.\nstring-foldcase does not use the special mappings for Turkic\nlanguages.\n\n" "\nstring-titlecase converts the first cased character of each word\nin string to its title-case counterpart and converts each other\ncharacter to its lower-case counterpart.\nWord breaks are recognized as specified in Unicode Standard\nAnnex #29 [citation8].\n\n" "\n\n" "(string-upcase \"Hi\") --> \"HI\"\n\n(string-downcase \"Hi\") --> \"hi\"\n\n(string-foldcase \"Hi\") --> \"hi\"\n\n\n(string-upcase \"Strae\") --> \"STRASSE\"\n\n(string-downcase \"Strae\") --> \"strae\"\n\n(string-foldcase \"Strae\") --> \"strasse\"\n\n(string-downcase \"STRASSE\")  --> \"strasse\"\n\n\n(string-downcase \"math/tspl/21.gif\") --> \"math/tspl/22.gif\"\n\n\n(string-titlecase \"kNock KNoCK\") --> \"Knock Knock\"\n\n(string-titlecase \"who's there?\") --> \"Who's There?\"\n\n(string-titlecase \"r6rs\") --> \"R6rs\"\n\n(string-titlecase \"R6RS\") --> \"R6rs\"\n") ("objects:s227" "\n\nprocedure: (string-normalize-nfd string)\n\nreturns: the Unicode normalized form D of string\n\n\n\nprocedure: (string-normalize-nfkd string)\n\nreturns: the Unicode normalized form KD of string\n\n\n\nprocedure: (string-normalize-nfc string)\n\nreturns: the Unicode normalized form C of string\n\n\n\nprocedure: (string-normalize-nfkc string)\n\nreturns: the Unicode normalized form KC of string\n\nlibraries: (rnrs unicode), (rnrs)\n\n" "If the result string is the same as string (by string=?),\nstring or a copy of string may be returned.\nOtherwise, the result string is newly allocated.\n\n" "\n\n" "(string-normalize-nfd \"\\xE9;\") --> \"e\\x301;\"\n\n(string-normalize-nfc \"\\xE9;\") --> \"\\xE9;\"\n\n(string-normalize-nfd \"\\x65;\\x301;\") --> \"e\\x301;\"\n\n(string-normalize-nfc \"\\x65;\\x301;\") --> \"\\xE9;\"\n") ("objects:s228" "\n\nprocedure: (string->list string)\n\nreturns: a list of the characters in string\n\nlibraries: (rnrs base), (rnrs)\n\n" "string->list allows a string to be converted into a list, so that\nScheme's list-processing operations may be applied to the processing of\nstrings.\nstring->list may be defined without error checks as follows.\n\n" "\n\n" "(define string->list\n\n  (lambda (s)\n\n    (do ([i (- (string-length s) 1) (- i 1)]\n\n         [ls '() (cons (string-ref s i) ls)])\n\n        ((< i 0) ls))))\n\n\n(string->list \"\") --> ()\n\n(string->list \"abc\") --> (#\\a #\\b #\\c)\n\n(apply char<? (string->list \"abc\")) --> #t\n\n(map char-upcase (string->list \"abc\")) --> (#\\A #\\B #\\C)\n") ("objects:s229" "\n\nprocedure: (list->string list)\n\nreturns: a string of the characters in list\n\nlibraries: (rnrs base), (rnrs)\n\n" "list must consist entirely of characters.\n\n" "\nlist->string is the functional inverse of string->list.\nA program might use both procedures together, first converting a string\ninto a list, then operating on this list to produce a new list, and\nfinally converting the new list back into a string.\n\n" "\nlist->string may be defined without error checks as follows.\n\n" "\n\n" "(define list->string\n\n  (lambda (ls)\n\n    (let ([s (make-string (length ls))])\n\n      (do ([ls ls (cdr ls)] [i 0 (+ i 1)])\n\n          ((null? ls) s)\n\n        (string-set! s i (car ls))))))\n\n\n(list->string '()) --> \"\"\n\n(list->string '(#\\a #\\b #\\c)) --> \"abc\"\n\n(list->string\n\n  (map char-upcase\n\n       (string->list \"abc\"))) --> \"ABC\"\n") ("objects:s231" "\n\n\nprocedure: (vector obj ...)\n\nreturns: a vector of the objects obj ...\n\nlibraries: (rnrs base), (rnrs)\n\n" "\n" "\n(vector) --> #()\n\n(vector 'a 'b 'c) --> #(a b c)\n") ("objects:s232" "\n\nprocedure: (make-vector n)\n\n\n\nprocedure: (make-vector n obj)\n\nreturns: a vector of length n\n\nlibraries: (rnrs base), (rnrs)\n\n" "n must be an exact nonnegative integer.\nIf obj is supplied, each element of the vector is filled with\nobj; otherwise, the elements are unspecified.\n\n" "\n\n" "(make-vector 0) --> #()\n\n(make-vector 0 '#(a)) --> #()\n\n(make-vector 5 '#(a)) --> #(#(a) #(a) #(a) #(a) #(a))\n") ("objects:s233" "\n\nprocedure: (vector-length vector)\n\nreturns: the number of elements in vector\n\nlibraries: (rnrs base), (rnrs)\n\n" "The length of a vector is always an exact nonnegative integer.\n\n" "\n\n" "(vector-length '#()) --> 0\n\n(vector-length '#(a b c)) --> 3\n\n(vector-length (vector 1 '(2) 3 '#(4 5))) --> 4\n\n(vector-length (make-vector 300)) --> 300\n") ("objects:s234" "\n\nprocedure: (vector-ref vector n)\n\nreturns: the nth element (zero-based) of vector\n\nlibraries: (rnrs base), (rnrs)\n\n" "n must be an exact nonnegative integer less than\nthe length of vector.\n\n" "\n\n" "(vector-ref '#(a b c) 0) --> a\n\n(vector-ref '#(a b c) 1) --> b\n\n(vector-ref '#(x y z w) 3) --> w\n") ("objects:s235" "\n\nprocedure: (vector-set! vector n obj)\n\nreturns: unspecified\n\nlibraries: (rnrs base), (rnrs)\n\n" "n must be an exact nonnegative integer less than\nthe length of vector.\nvector-set! changes the nth element of vector to obj.\n\n" "\n\n" "(let ([v (vector 'a 'b 'c 'd 'e)])\n\n  (vector-set! v 2 'x)\n\n  v) --> #(a b x d e)\n") ("objects:s236" "\n\nprocedure: (vector-fill! vector obj)\n\nreturns: unspecified\n\nlibraries: (rnrs base), (rnrs)\n\n" "vector-fill! replaces each element of vector with obj.\nIt may be defined without error checks as follows.\n\n" "\n\n" "(define vector-fill!\n\n  (lambda (v x)\n\n    (let ([n (vector-length v)])\n\n      (do ([i 0 (+ i 1)])\n\n          ((= i n))\n\n        (vector-set! v i x)))))\n\n\n(let ([v (vector 1 2 3)])\n\n  (vector-fill! v 0)\n\n  v) --> #(0 0 0)\n") ("objects:s237" "\n\nprocedure: (vector->list vector)\n\nreturns: a list of the elements of vector\n\nlibraries: (rnrs base), (rnrs)\n\n" "vector->list provides a convenient method for applying list-processing\noperations to vectors.\nIt may be defined without error checks as follows.\n\n" "\n\n" "(define vector->list\n\n  (lambda (s)\n\n    (do ([i (- (vector-length s) 1) (- i 1)]\n\n         [ls '() (cons (vector-ref s i) ls)])\n\n        ((< i 0) ls))))\n\n\n(vector->list (vector)) --> ()\n\n(vector->list '#(a b c)) --> (a b c)\n\n\n(let ((v '#(1 2 3 4 5)))\n\n  (apply * (vector->list v))) --> 120\n") ("objects:s238" "\n\nprocedure: (list->vector list)\n\nreturns: a vector of the elements of list\n\nlibraries: (rnrs base), (rnrs)\n\n" "list->vector is the functional inverse of vector->list.\nThe two procedures are often used in combination\nto take advantage of a list-processing operation.\nA vector may be converted to a list with vector->list, this list\nprocessed in some manner to produce a new list, and the new list\nconverted back into a vector with list->vector.\n\n" "\nlist->vector may be defined without error checks as follows.\n\n" "\n\n" "(define list->vector\n\n  (lambda (ls)\n\n    (let ([s (make-vector (length ls))])\n\n      (do ([ls ls (cdr ls)] [i 0 (+ i 1)])\n\n          ((null? ls) s)\n\n        (vector-set! s i (car ls))))))\n\n\n(list->vector '()) --> #()\n\n(list->vector '(a b c)) --> #(a b c)\n\n\n(let ([v '#(1 2 3 4 5)])\n\n  (let ([ls (vector->list v)])\n\n    (list->vector (map * ls ls)))) --> #(1 4 9 16 25)\n") ("objects:s239" "\n\nprocedure: (vector-sort predicate vector)\n\nreturns: a vector containing the elements of vector, sorted according to predicate\n\n\n\nprocedure: (vector-sort! predicate vector)\n\nreturns: unspecified\n\nlibraries: (rnrs sorting), (rnrs)\n\n" "predicate should be a procedure that expects two arguments and\nreturns #t if its first argument must precede its second in\nthe sorted vector.\nThat is, if predicate is applied to two elements x and\ny, where x appears after y in the input vector,\nthe predicate should return true only if\nx should appear before y\nin the output vector.\nIf this constraint is met,\nvector-sort performs a stable sort, i.e., two elements are\nreordered only when necessary according to predicate.\nvector-sort! performs the sort destructively and\ndoes not necessarily perform a stable sort.\nDuplicate elements are not removed.\npredicate should not have any side effects.\n\n\n" "\nvector-sort may call predicate up to nlogn times,\nwhere n is the length of vector, while\nvector-sort! may call the predicate up to n2 times.\nThe looser bound for vector-sort! allows an implementation to\nuse a quicksort algorithm, which may be faster in some cases than\nalgorithms that have the tighter nlogn bound.\n\n" "\n\n" "(vector-sort < '#(3 4 2 1 2 5)) --> #(1 2 2 3 4 5)\n\n(vector-sort > '#(0.5 1/2)) --> #(0.5 1/2)\n\n(vector-sort > '#(1/2 0.5)) --> #(1/2 0.5)\n\n\n(let ([v (vector 3 4 2 1 2 5)])\n\n  (vector-sort! < v)\n\n  v) --> #(1 2 2 3 4 5)\n") ("objects:s240" "\n\nsyntax: (endianness symbol)\n\nreturns: symbol\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "symbol must be the symbol little, the symbol big,\nor some other symbol recognized by the implementation as an endianness\nsymbol.\nIt is a syntax violation if symbol is not a symbol or if it is not\nrecognized by the implementation as an endianness symbol.\n\n" "\n\n" "(endianness little) --> little\n\n(endianness big) --> big\n\n(endianness \"spam\") --> exception\n") ("objects:s241" "\n\nprocedure: (native-endianness)\n\nreturns: a symbol naming the implementation's native endianness\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "The return value is the symbol little, the symbol big,\nor some other endianness symbol recognized by the implementation.\nIt typically reflects the endianness of the underlying hardware.\n\n" "\n\n" "(symbol? (native-endianness)) --> #t\n") ("objects:s242" "\n\nprocedure: (make-bytevector n)\n\n\n\nprocedure: (make-bytevector n fill)\n\nreturns: a new bytevector of length n\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "If fill is supplied, each element of the bytevector is initialized\nto fill; otherwise, the elements are unspecified.\nThe fill value must be a signed or unsigned 8-bit value, i.e.,\na value in the range -128 to 255 inclusive.\nA negative fill value is treated as its two's complement equivalent.\n\n" "\n\n" "(make-bytevector 0) --> #vu8()\n\n(make-bytevector 0 7) --> #vu8()\n\n(make-bytevector 5 7) --> #vu8(7 7 7 7 7)\n\n(make-bytevector 5 -7) --> #vu8(249 249 249 249 249)\n") ("objects:s243" "\n\nprocedure: (bytevector-length bytevector)\n\nreturns: the length of bytevector in 8-bit bytes\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "\n" "\n(bytevector-length #vu8()) --> 0\n\n(bytevector-length #vu8(1 2 3)) --> 3\n\n(bytevector-length (make-bytevector 300)) --> 300\n") ("objects:s244" "\n\nprocedure: (bytevector=? bytevector1 bytevector2)\n\nreturns: #t if the relation holds, #f otherwise\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "Two bytevectors are equal by bytevector=? if and only if they\nhave the same length and same contents.\n\n" "\n\n" "(bytevector=? #vu8() #vu8()) --> #t\n\n(bytevector=? (make-bytevector 3 0) #vu8(0 0 0)) --> #t\n\n(bytevector=? (make-bytevector 5 0) #vu8(0 0 0)) --> #f\n\n(bytevector=? #vu8(1 127 128 255) #vu8(255 128 127 1)) --> #f\n") ("objects:s245" "\n\nprocedure: (bytevector-fill! bytevector fill)\n\nreturns: unspecified\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "The fill value must be a signed or unsigned 8-bit value, i.e.,\na value in the range -128 to 255 inclusive.\nA negative fill value is treated as its two's complement equivalent.\n\n" "\nbytevector-fill! replaces each element of bytevector with\nfill.\n\n" "\n\n" "(let ([v (make-bytevector 6)])\n\n  (bytevector-fill! v 255)\n\n  v) --> #vu8(255 255 255 255 255 255)\n\n\n(let ([v (make-bytevector 6)])\n\n  (bytevector-fill! v -128)\n\n  v) --> #vu8(128 128 128 128 128 128)\n") ("objects:s246" "\n\nprocedure: (bytevector-copy bytevector)\n\nreturns: a new bytevector that is a copy of bytevector \n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "bytevector-copy creates a new bytevector with the same length and\ncontents as bytevector.\n\n" "\n\n" "(bytevector-copy #vu8(1 127 128 255)) --> #vu8(1 127 128 255)\n\n\n(let ([v #vu8(1 127 128 255)])\n\n  (eq? v (bytevector-copy v))) --> #f\n") ("objects:s247" "\n\nprocedure: (bytevector-copy! src src-start dst dst-start n)\n\nreturns: unspecified\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "src and dst must be bytevectors.\nsrc-start, dst-start, and n must be exact nonnegative\nintegers.\nThe sum of src-start and n must not exceed the length of src,\nand the sum of dst-start and n must not exceed the length of dst.\n\n" "\nbytevector-copy! overwrites the n bytes of dst\nstarting at dst-start with the n bytes of src\nstarting at src-start.\nThis works even if dst is the same bytevector as src and the\nsource and destination locations overlap.\nThat is, the destination is filled with the bytes that appeared at the\nsource before the operation began.\n\n" "\n\n" "(define v1 #vu8(31 63 95 127 159 191 223 255))\n\n(define v2 (make-bytevector 10 0))\n\n\n(bytevector-copy! v1 2 v2 1 4)\n\nv2 --> #vu8(0 95 127 159 191 0 0 0 0 0)\n\n \n\n(bytevector-copy! v1 5 v2 7 3)\n\nv2 --> #vu8(0 95 127 159 191 0 0 191 223 255)\n\n \n\n(bytevector-copy! v2 3 v2 0 6)\n\nv2 --> #vu8(159 191 0 0 191 223 0 191 223 255)\n\n \n\n(bytevector-copy! v2 0 v2 1 9)\n\nv2 --> #vu8(159 159 191 0 0 191 223 0 191 223)\n") ("objects:s248" "\n\nprocedure: (bytevector-u8-ref bytevector n)\n\nreturns: the 8-bit unsigned byte at index n (zero-based) of bytevector \n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer less than\nthe length of bytevector.\n\n" "\nThe value is returned as an exact 8-bit unsigned integer, i.e., a value in\nthe range 0 to 255 inclusive.\n\n" "\n\n" "(bytevector-u8-ref #vu8(1 127 128 255) 0) --> 1\n\n(bytevector-u8-ref #vu8(1 127 128 255) 2) --> 128\n\n(bytevector-u8-ref #vu8(1 127 128 255) 3) --> 255\n") ("objects:s249" "\n\nprocedure: (bytevector-s8-ref bytevector n)\n\nreturns: the 8-bit signed byte at index n (zero-based) of bytevector \n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer less than\nthe length of bytevector.\n\n" "\nThe value returned is an exact 8-bit signed integer, i.e., a value in\nthe range -128 to 127 inclusive, and is the equivalent of the\nstored value treated as a two's complement value.\n\n" "\n\n" "(bytevector-s8-ref #vu8(1 127 128 255) 0) --> 1\n\n(bytevector-s8-ref #vu8(1 127 128 255) 1) --> 127\n\n(bytevector-s8-ref #vu8(1 127 128 255) 2) --> -128\n\n(bytevector-s8-ref #vu8(1 127 128 255) 3) --> -1\n") ("objects:s250" "\n\nprocedure: (bytevector-u8-set! bytevector n u8)\n\nreturns: unspecified\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer less than\nthe length of bytevector.\nu8 must be an 8-bit unsigned value, i.e., a value in the range\n0 to 255 inclusive.\n\n" "\nbytevector-u8-set! changes the 8-bit value at index n (zero-based)\nof bytevector to u8.\n\n" "\n\n" "(let ([v (make-bytevector 5 -1)])\n\n  (bytevector-u8-set! v 2 128)\n\n  v) --> #vu8(255 255 128 255 255)\n") ("objects:s251" "\n\nprocedure: (bytevector-s8-set! bytevector n s8)\n\nreturns: unspecified\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer less than\nthe length of bytevector.\ns8 must be an 8-bit signed value, i.e., a value in the range\n-128 to 127 inclusive.\n\n" "\nbytevector-s8-set! changes the 8-bit value at index n\n(zero-based) of bytevector to the two's complement equivalent\nof s8.\n\n" "\n\n" "(let ([v (make-bytevector 4 0)])\n\n  (bytevector-s8-set! v 1 100)\n\n  (bytevector-s8-set! v 2 -100)\n\n  v) --> #vu8(0 100 156 0)\n") ("objects:s252" "\n\nprocedure: (bytevector->u8-list bytevector)\n\nreturns: a list of the 8-bit unsigned elements of bytevector\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "\n" "(bytevector->u8-list (make-bytevector 0)) --> ()\n\n(bytevector->u8-list #vu8(1 127 128 255)) --> (1 127 128 255)\n\n\n(let ([v #vu8(1 2 3 255)])\n\n  (apply * (bytevector->u8-list v))) --> 1530\n") ("objects:s253" "\n\nprocedure: (u8-list->bytevector list)\n\nreturns: a new bytevector of the elements of list\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "list must consist entirely of\nexact 8-bit unsigned integers, i.e., values in the range 0 to 255 inclusive.\n\n" "\n\n" "(u8-list->bytevector '()) --> #vu8()\n\n(u8-list->bytevector '(1 127 128 255)) --> #vu8(1 127 128 255)\n\n\n(let ([v #vu8(1 2 3 4 5)])\n\n  (let ([ls (bytevector->u8-list v)])\n\n    (u8-list->bytevector (map * ls ls)))) --> #vu8(1 4 9 16 25)\n") ("objects:s254" "\n\nprocedure: (bytevector-u16-native-ref bytevector n)\n\nreturns: the 16-bit unsigned integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-s16-native-ref bytevector n)\n\nreturns: the 16-bit signed integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-u32-native-ref bytevector n)\n\nreturns: the 32-bit unsigned integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-s32-native-ref bytevector n)\n\nreturns: the 32-bit signed integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-u64-native-ref bytevector n)\n\nreturns: the 64-bit unsigned integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-s64-native-ref bytevector n)\n\nreturns: the 64-bit signed integer at index n (zero-based) of bytevector \n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer.\nIt indexes the starting byte of the value and must be a multiple of the\nnumber of bytes occupied by the value: 2 for 16-bit values, 4 for 32-bit\nvalues, and 8 for 64-bit values.\nThe sum of n and the number of bytes occupied by the value must\nnot exceed the length of bytevector.\nThe native endianness is assumed.\n\n" "\nThe return value is an exact integer in the appropriate range for\nthe number of bytes occupied by the value.\nSigned values are the equivalent of the stored value treated as a two's\ncomplement value.\n\n" "\n\n" "(define v #vu8(#x12 #x34 #xfe #x56 #xdc #xba #x78 #x98))\n" "If native endianness is big:\n\n" "\n\n" "(bytevector-u16-native-ref v 2) --> #xfe56\n\n(bytevector-s16-native-ref v 2) --> #x-1aa\n\n(bytevector-s16-native-ref v 6) --> #x7898\n\n\n(bytevector-u32-native-ref v 0) --> #x1234fe56\n\n(bytevector-s32-native-ref v 0) --> #x1234fe56\n\n(bytevector-s32-native-ref v 4) --> #x-23458768\n\n\n(bytevector-u64-native-ref v 0) --> #x1234fe56dcba7898\n\n(bytevector-s64-native-ref v 0) --> #x1234fe56dcba7898\n" "If native endianness is little:\n\n" "\n\n" "(bytevector-u16-native-ref v 2) --> #x56fe\n\n(bytevector-s16-native-ref v 2) --> #x56fe\n\n(bytevector-s16-native-ref v 6) --> #x-6788\n\n\n(bytevector-u32-native-ref v 0) --> #x56fe3412\n\n(bytevector-s32-native-ref v 0) --> #x56fe3412\n\n(bytevector-s32-native-ref v 4) --> #x-67874524\n\n\n(bytevector-u64-native-ref v 0) --> #x9878badc56fe3412\n\n(bytevector-s64-native-ref v 0) --> #x-67874523a901cbee\n") ("objects:s255" "\n\nprocedure: (bytevector-u16-native-set! bytevector n u16)\n\n\n\nprocedure: (bytevector-s16-native-set! bytevector n s16)\n\n\n\nprocedure: (bytevector-u32-native-set! bytevector n u32)\n\n\n\nprocedure: (bytevector-s32-native-set! bytevector n s32)\n\n\n\nprocedure: (bytevector-u64-native-set! bytevector n u64)\n\n\n\nprocedure: (bytevector-s64-native-set! bytevector n s64)\n\nreturns: unspecified\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer.\nIt indexes the starting byte of the value and must be a multiple of the\nnumber of bytes occupied by the value: 2 for 16-bit values, 4 for 32-bit\nvalues, and 8 for 64-bit values.\nThe sum of n and the number of bytes occupied by the value must\nnot exceed the length bytevector.\nu16 must be a 16-bit unsigned value, i.e., a value in the range\n0 to 216 - 1 inclusive;\ns16 must be a 16-bit signed value, i.e., a value in the range\n-215 to 215 - 1 inclusive;\nu32 must be a 32-bit unsigned value, i.e., a value in the range\n0 to 232 - 1 inclusive;\ns32 must be a 32-bit signed value, i.e., a value in the range\n-231 to 231 - 1 inclusive;\nu64 must be a 64-bit unsigned value, i.e., a value in the range\n0 to 264 - 1 inclusive; and\ns64 must be a 64-bit signed value, i.e., a value in the range\n-263 to 263 - 1 inclusive.\nThe native endianness is assumed.\n\n" "\nThese procedures store the given value in the 2, 4, or 8 bytes starting\nat index n (zero-based) of bytevector.\nNegative values are stored as their two's complement equivalent.\n\n" "\n\n" "(define v (make-bytevector 8 0))\n\n(bytevector-u16-native-set! v 0 #xfe56)\n\n(bytevector-s16-native-set! v 2 #x-1aa)\n\n(bytevector-s16-native-set! v 4 #x7898)\n" "If native endianness is big:\n\n" "\n\n" "v --> #vu8(#xfe #x56 #xfe #x56 #x78 #x98 #x00 #x00)\n" "If native endianness is little:\n\n" "\n\n" "v --> #vu8(#x56 #xfe #x56 #xfe #x98 #x78 #x00 #x00)\n" "\n" "(define v (make-bytevector 16 0))\n\n(bytevector-u32-native-set! v 0 #x1234fe56)\n\n(bytevector-s32-native-set! v 4 #x1234fe56)\n\n(bytevector-s32-native-set! v 8 #x-23458768)\n" "If native endianness is big:\n\n" "\n\n" "v --> #vu8(#x12 #x34 #xfe #x56 #x12 #x34 #xfe #x56\n\n  gifs/ghostRightarrow.gif      #xdc #xba #x78 #x98 #x00 #x00 #x00 #x00)\n" "If native endianness is little:\n\n" "\n\n" "v --> #vu8(#x56 #xfe #x34 #x12 #x56 #xfe #x34 #x12\n\n  gifs/ghostRightarrow.gif      #x98 #x78 #xba #xdc #x00 #x00 #x00 #x00)\n" "\n" "(define v (make-bytevector 24 0))\n\n(bytevector-u64-native-set! v 0 #x1234fe56dcba7898)\n\n(bytevector-s64-native-set! v 8 #x1234fe56dcba7898)\n\n(bytevector-s64-native-set! v 16 #x-67874523a901cbee)\n" "If native endianness is big:\n\n" "\n\n" "v --> #vu8(#x12 #x34 #xfe #x56 #xdc #xba #x78 #x98\n\n  gifs/ghostRightarrow.gif      #x12 #x34 #xfe #x56 #xdc #xba #x78 #x98\n\n  gifs/ghostRightarrow.gif      #x98 #x78 #xba #xdc #x56 #xfe #x34 #x12)\n" "If native endianness is little:\n\n" "\n\n" "v --> #vu8(#x98 #x78 #xba #xdc #x56 #xfe #x34 #x12\n\n  gifs/ghostRightarrow.gif      #x98 #x78 #xba #xdc #x56 #xfe #x34 #x12\n\n  gifs/ghostRightarrow.gif      #x12 #x34 #xfe #x56 #xdc #xba #x78 #x98)\n") ("objects:s256" "\n\nprocedure: (bytevector-u16-ref bytevector n eness)\n\nreturns: the 16-bit unsigned integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-s16-ref bytevector n eness)\n\nreturns: the 16-bit signed integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-u32-ref bytevector n eness)\n\nreturns: the 32-bit unsigned integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-s32-ref bytevector n eness)\n\nreturns: the 32-bit signed integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-u64-ref bytevector n eness)\n\nreturns: the 64-bit unsigned integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-s64-ref bytevector n eness)\n\nreturns: the 64-bit signed integer at index n (zero-based) of bytevector \n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer and\nindexes the starting byte of the value.\nThe sum of n and the number of bytes occupied by the value\n(2 for 16-bit values, 4 for 32-bit values, and 8 for 32-bit values)\nmust not exceed the length of bytevector.\nn need not be a multiple of the\nnumber of bytes occupied by the value.\neness must be a valid endianness symbol naming the endianness.\n\n" "\nThe return value is an exact integer in the appropriate range for\nthe number of bytes occupied by the value.\nSigned values are the equivalent of the stored value treated as a two's\ncomplement value.\n\n" "\n\n" "(define v #vu8(#x12 #x34 #xfe #x56 #xdc #xba #x78 #x98 #x9a #x76))\n\n(bytevector-u16-ref v 0 (endianness big)) --> #x1234\n\n(bytevector-s16-ref v 1 (endianness big)) --> #x34fe\n\n(bytevector-s16-ref v 5 (endianness big)) --> #x-4588\n\n\n(bytevector-u32-ref v 2 'big) --> #xfe56dcba\n\n(bytevector-s32-ref v 3 'big) --> #x56dcba78\n\n(bytevector-s32-ref v 4 'big) --> #x-23458768\n\n\n(bytevector-u64-ref v 0 'big) --> #x1234fe56dcba7898\n\n(bytevector-s64-ref v 1 'big) --> #x34fe56dcba78989a\n\n\n(bytevector-u16-ref v 0 (endianness little)) --> #x3412\n\n(bytevector-s16-ref v 1 (endianness little)) --> #x-1cc\n\n(bytevector-s16-ref v 5 (endianness little)) --> #x78ba\n\n\n(bytevector-u32-ref v 2 'little) --> #xbadc56fe\n\n(bytevector-s32-ref v 3 'little) --> #x78badc56\n\n(bytevector-s32-ref v 4 'little) --> #x-67874524\n\n\n(bytevector-u64-ref v 0 'little) --> #x9878badc56fe3412\n\n(bytevector-s64-ref v 1 'little) --> #x-6567874523a901cc\n") ("objects:s257" "\n\nprocedure: (bytevector-u16-set! bytevector n u16 eness)\n\n\n\nprocedure: (bytevector-s16-set! bytevector n s16 eness)\n\n\n\nprocedure: (bytevector-u32-set! bytevector n u32 eness)\n\n\n\nprocedure: (bytevector-s32-set! bytevector n s32 eness)\n\n\n\nprocedure: (bytevector-u64-set! bytevector n u64 eness)\n\n\n\nprocedure: (bytevector-s64-set! bytevector n s64 eness)\n\nreturns: unspecified\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer and\nindexes the starting byte of the value.\nThe sum of n and the number of bytes occupied by the value must\nnot exceed the length of bytevector.\nn need not be a multiple of the\nnumber of bytes occupied by the value.\nu16 must be a 16-bit unsigned value, i.e., a value in the range\n0 to 216 - 1 inclusive;\ns16 must be a 16-bit signed value, i.e., a value in the range\n-215 to 215 - 1 inclusive;\nu32 must be a 32-bit unsigned value, i.e., a value in the range\n0 to 232 - 1 inclusive;\ns32 must be a 32-bit signed value, i.e., a value in the range\n-231 to 231 - 1 inclusive;\nu64 must be a 64-bit unsigned value, i.e., a value in the range\n0 to 264 - 1 inclusive; and\ns64 must be a 64-bit signed value, i.e., a value in the range\n-263 to 263 - 1 inclusive.\neness must be a valid endianness symbol naming the endianness.\n\n" "\nThese procedures store the given value in the 2, 4, or 8 bytes starting\nat index n (zero-based) of bytevector.\nNegative values are stored as their two's complement equivalent.\n\n" "\n\n" "(define v (make-bytevector 8 0))\n\n(bytevector-u16-set! v 0 #xfe56 (endianness big))\n\n(bytevector-s16-set! v 3 #x-1aa (endianness little))\n\n(bytevector-s16-set! v 5 #x7898 (endianness big))\n\nv --> #vu8(#xfe #x56 #x0 #x56 #xfe #x78 #x98 #x0)\n\n\n(define v (make-bytevector 16 0))\n\n(bytevector-u32-set! v 0 #x1234fe56 'little)\n\n(bytevector-s32-set! v 6 #x1234fe56 'big)\n\n(bytevector-s32-set! v 11 #x-23458768 'little)\n\nv --> #vu8(#x56 #xfe #x34 #x12 #x0 #x0\n\n  gifs/ghostRightarrow.gif      #x12 #x34 #xfe #x56 #x0\n\n  gifs/ghostRightarrow.gif      #x98 #x78 #xba #xdc #x0)\n\n\n(define v (make-bytevector 28 0))\n\n(bytevector-u64-set! v 0 #x1234fe56dcba7898 'little)\n\n(bytevector-s64-set! v 10 #x1234fe56dcba7898 'big)\n\n(bytevector-s64-set! v 19 #x-67874523a901cbee 'big)\n\nv --> #vu8(#x98 #x78 #xba #xdc #x56 #xfe #x34 #x12 #x0 #x0\n\n  gifs/ghostRightarrow.gif      #x12 #x34 #xfe #x56 #xdc #xba #x78 #x98 #x0\n\n  gifs/ghostRightarrow.gif      #x98 #x78 #xba #xdc #x56 #xfe #x34 #x12 #x0)\n") ("objects:s258" "\n\nprocedure: (bytevector-uint-ref bytevector n eness size)\n\nreturns: the size-byte unsigned integer at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-sint-ref bytevector n eness size)\n\nreturns: the size-byte signed integer at index n (zero-based) of bytevector \n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer and\nindexes the starting byte of the value.\nsize must be an exact positive integer and specifies the number\nof bytes occupied by the value.\nThe sum of n and size must not exceed the length\nof bytevector.\nn need not be a multiple of the\nnumber of bytes occupied by the value.\neness must be a valid endianness symbol naming the endianness.\n\n" "\nThe return value is an exact integer in the appropriate range for\nthe number of bytes occupied by the value.\nSigned values are the equivalent of the stored value treated as a two's\ncomplement value.\n\n" "\n\n" "(define v #vu8(#x12 #x34 #xfe #x56 #xdc #xba #x78 #x98 #x9a #x76))\n\n\n(bytevector-uint-ref v 0 'big 1) --> #x12\n\n(bytevector-uint-ref v 0 'little 1) --> #x12\n\n(bytevector-uint-ref v 1 'big 3) --> #x34fe56\n\n(bytevector-uint-ref v 2 'little 7) --> #x9a9878badc56fe\n\n\n(bytevector-sint-ref v 2 'big 1) --> #x-02\n\n(bytevector-sint-ref v 1 'little 6) --> #x78badc56fe34\n\n(bytevector-sint-ref v 2 'little 7) --> #x-6567874523a902\n\n\n(bytevector-sint-ref (make-bytevector 1000 -1) 0 'big 1000) --> -1\n") ("objects:s259" "\n\nprocedure: (bytevector-uint-set! bytevector n uint eness size)\n\n\n\nprocedure: (bytevector-sint-set! bytevector n sint eness size)\n\nreturns: unspecified\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer and\nindexes the starting byte of the value.\nsize must be an exact positive integer and specifies the number\nof bytes occupied by the value.\nThe sum of n and size must not exceed the length\nof bytevector.\nn need not be a multiple of the\nnumber of bytes occupied by the value.\nuint must be an exact integer in the range\n0 to 2size8 - 1 inclusive.\nsint must be an exact integer in the range\n-2size8-1 to 2size8-1 - 1 inclusive.\neness must be a valid endianness symbol naming the endianness.\n\n" "\nThese procedures store the given value in the size bytes starting\nat index n (zero-based) of bytevector.\nNegative values are stored as their two's complement equivalent.\n\n" "\n\n" "(define v (make-bytevector 5 0))\n\n(bytevector-uint-set! v 1 #x123456 (endianness big) 3)\n\nv --> #vu8(0 #x12 #x34 #x56 0)\n\n\n(define v (make-bytevector 7 -1))\n\n(bytevector-sint-set! v 1 #x-8000000000 (endianness little) 5)\n\nv --> #vu8(#xff 0 0 0 0 #x80 #xff)\n") ("objects:s260" "\n\nprocedure: (bytevector->uint-list bytevector eness size)\n\nreturns: a new list of the size-byte unsigned elements of bytevector\n\n\n\nprocedure: (bytevector->sint-list bytevector eness size)\n\nreturns: a new list of the size-byte signed elements of bytevector\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "eness must be a valid endianness symbol naming the endianness.\nsize must be an exact positive integer and specifies the number\nof bytes occupied by the value.\nIt must be a value that evenly divides the length of bytevector.\n\n" "\n\n" "(bytevector->uint-list (make-bytevector 0) 'little 3) --> ()\n\n\n(let ([v #vu8(1 2 3 4 5 6)])\n\n  (bytevector->uint-list v 'big 3)) --> (#x010203 #x040506)\n\n\n(let ([v (make-bytevector 80 -1)])\n\n  (bytevector->sint-list v 'big 20)) --> (-1 -1 -1 -1)\n") ("objects:s261" "\n\nprocedure: (uint-list->bytevector list eness size)\n\n\n\nprocedure: (sint-list->bytevector list eness size)\n\nreturns: a new bytevector of the elements of list\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "eness must be a valid endianness symbol naming the endianness.\nsize must be an exact positive integer and specifies the number\nof bytes occupied by the value.\nFor uint-list->bytevector, list must consist entirely of\nsize-byte exact unsigned integers, i.e., values in the range\n0 to 2size8 - 1 inclusive.\nFor sint-list->bytevector, list must consist entirely of\nsize-byte exact signed integers, i.e., values in the range\n-2size8-1 to 2size8-1 - 1 inclusive.\nEach value occupies size bytes in the resulting bytevector, whose\nlength is thus size times the length of list.\n\n" "\n\n" "(uint-list->bytevector '() 'big 25) --> #vu8()\n\n(sint-list->bytevector '(0 -1) 'big 3) --> #vu8(0 0 0 #xff #xff #xff)\n\n\n(define (f size)\n\n  (let ([ls (list (- (expt 2 (- (* 8 size) 1)))\n\n                  (- (expt 2 (- (* 8 size) 1)) 1))])\n\n    (sint-list->bytevector ls 'little size)))\n\n(f 6) --> #vu8(#x00 #x00 #x00 #x00 #x00 #x80\n\n      gifs/ghostRightarrow.gif      #xff #xff #xff #xff #xff #x7f)\n") ("objects:s262" "\n\nprocedure: (bytevector-ieee-single-native-ref bytevector n)\n\nreturns: the single floating-point value at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-ieee-double-native-ref bytevector n)\n\nreturns: the double floating-point value at index n (zero-based) of bytevector \n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer.\nIt indexes the starting byte of the value and must be a multiple of the\nnumber of bytes occupied by the value: 4 for single floats, 8 for double.\nThe sum of n and the number of bytes occupied by the value must\nnot exceed the length of bytevector.\nThe native endianness is assumed.\n\n" "\nThe return value is an inexact real number.\nExamples appear after the mutation operators below.\n\n") ("objects:s263" "\n\n\nprocedure: (bytevector-ieee-single-native-set! bytevector n x)\n\n\n\nprocedure: (bytevector-ieee-double-native-set! bytevector n x)\n\nreturns: unspecified\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer.\nIt indexes the starting byte of the value and must be a multiple of the\nnumber of bytes occupied by the value: 4 for single floats, 8 for double.\nThe sum of n and the number of bytes occupied by the value must\nnot exceed the length of bytevector.\nThe native endianness is assumed.\n\n" "\nThese procedures store the given value as an IEEE-754 single or\ndouble floating-point value at index n (zero-based) of bytevector.\n\n" "\n\n" "(define v (make-bytevector 8 0))\n\n(bytevector-ieee-single-native-set! v 0 .125)\n\n(bytevector-ieee-single-native-set! v 4 -3/2)\n\n(list\n\n  (bytevector-ieee-single-native-ref v 0)\n\n  (bytevector-ieee-single-native-ref v 4)) --> (0.125 -1.5)\n\n\n(bytevector-ieee-double-native-set! v 0 1e23)\n\n(bytevector-ieee-double-native-ref v 0) --> 1e23\n") ("objects:s264" "\n\nprocedure: (bytevector-ieee-single-ref bytevector n eness)\n\nreturns: the single floating-point value at index n (zero-based) of bytevector \n\n\n\nprocedure: (bytevector-ieee-double-ref bytevector n eness)\n\nreturns: the double floating-point value at index n (zero-based) of bytevector \n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer and\nindexes the starting byte of the value.\nThe sum of n and the number of bytes occupied by the value\n(4 for a single float, 8 for a double)\nmust not exceed the length of bytevector.\nn need not be a multiple of the\nnumber of bytes occupied by the value.\neness must be a valid endianness symbol naming the endianness.\n\n" "\nThe return value is an inexact real number.\nExamples appear after the mutation operators below.\n\n\n") ("objects:s265" "\n\n\nprocedure: (bytevector-ieee-single-set! bytevector n x eness)\n\n\n\nprocedure: (bytevector-ieee-double-set! bytevector n x eness)\n\nreturns: unspecified\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "n must be an exact nonnegative integer and\nindexes the starting byte of the value.\nThe sum of n and the number of bytes occupied by the value\n(4 for a single float, 8 for a double)\nmust not exceed the length of bytevector.\nn need not be a multiple of the\nnumber of bytes occupied by the value.\neness must be a valid endianness symbol naming the endianness.\n\n" "\nThese procedures store the given value as an IEEE-754 single or double\nfloating-point value at index n (zero-based) of bytevector.\n\n" "\n\n" "(define v (make-bytevector 10 #xc7))\n\n(bytevector-ieee-single-set! v 1 .125 'little)\n\n(bytevector-ieee-single-set! v 6 -3/2 'big)\n\n(list\n\n  (bytevector-ieee-single-ref v 1 'little)\n\n  (bytevector-ieee-single-ref v 6 'big)) --> (0.125 -1.5)\n\nv --> #vu8(#xc7 #x0 #x0 #x0 #x3e #xc7 #xbf #xc0 #x0 #x0)\n\n\n(bytevector-ieee-double-set! v 1 1e23 'big)\n\n(bytevector-ieee-double-ref v 1 'big) --> 1e23\n") ("objects:s268" "\n\n\nprocedure: (symbol=? symbol1 symbol2)\n\nreturns: #t if the two symbols are the same, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "Symbols can also be compared with eq?, which is typically more\nefficient than symbol=?.\n\n" "\n\n" "(symbol=? 'a 'a) --> #t\n\n(symbol=? 'a (string->symbol \"a\")) --> #t\n\n(symbol=? 'a 'b) --> #f\n") ("objects:s269" "\n\nprocedure: (string->symbol string)\n\nreturns: a symbol whose name is string\n\nlibraries: (rnrs base), (rnrs)\n\n" "string->symbol records all symbols it creates in an internal table\nthat it shares with the system reader.\nIf a symbol whose name is equivalent to string (according to the predicate\nstring=?) already exists in the table, this symbol is returned.\nOtherwise, a new symbol is created with string as its name; this\nsymbol is entered into the table and returned.\n\n" "\nThe effect of modifying a string after it is used as an argument to\nstring->symbol is unspecified.\n\n" "\n\n" "(string->symbol \"x\") --> x\n\n\n(eq? (string->symbol \"x\") 'x) --> #t\n\n(eq? (string->symbol \"X\") 'x) --> #f\n\n\n(eq? (string->symbol \"x\")\n\n     (string->symbol \"x\")) --> #t\n\n\n(string->symbol \"()\") --> \\x28;\\x29;\n") ("objects:s270" "\n\nprocedure: (symbol->string symbol)\n\nreturns: a string, the name of symbol\n\nlibraries: (rnrs base), (rnrs)\n\n" "The string returned by symbol->string should be treated as\nimmutable.\nUnpredictable behavior can result if a string returned from\nsymbol->string is altered with\nstring-set! or by any other means.\n\n" "\n\n" "(symbol->string 'xyz) --> \"xyz\"\n\n(symbol->string 'Hi) --> \"Hi\"\n\n(symbol->string (string->symbol \"()\")) --> \"()\"\n") ("objects:s271" "\n\n\nprocedure: (boolean=? boolean1 boolean2)\n\nreturns: #t if the two booleans are the same, #f otherwise\n\nlibraries: (rnrs base), (rnrs)\n\n" "The boolean values #t and #f may also be compared with\neq?, which is typically more efficient than boolean=?.\n\n" "\n\n" "(boolean=? #t #t) --> #t\n\n(boolean=? #t #f) --> #f\n\n(boolean=? #t (< 3 4)) --> #t\n") ("objects:s274" "\n\n\nprocedure: (make-eq-hashtable)\n\n\n\nprocedure: (make-eq-hashtable size)\n\nreturns: a new mutable eq hashtable\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "If size is provided, it must be a nonnegative exact integer\nindicating approximately how many elements the hashtable should\ninitially hold.\nHashtables grow as needed, but when the hashtable grows it generally must\nrehash all of the existing elements.\nProviding a nonzero size can help limit the amount of rehashing\nthat must be done as the table is initially populated.\n\n" "\nAn eq hashtable compares keys using the eq? (pointer equality)\nprocedure and typically employs a hash function based on object addresses.\nIts hash and equivalence functions are suitable for any Scheme object.\n\n" "\n\n" "(define ht1 (make-eq-hashtable))\n\n(define ht2 (make-eq-hashtable 32))\n") ("objects:s275" "\n\nprocedure: (make-eqv-hashtable)\n\n\n\nprocedure: (make-eqv-hashtable size)\n\nreturns: a new mutable eqv hashtable\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "If size is provided, it must be a nonnegative exact integer\nindicating approximately how many elements the hashtable should\ninitially hold.\nHashtables grow as needed, but when the hashtable grows it generally must\nrehash all of the existing elements.\nProviding a nonzero size can help limit the amount of rehashing\nthat must be done as the table is initially populated.\n\n" "\nAn eqv hashtable compares keys using the eqv?\nprocedure and typically employs a hash function based on object addresses\nfor objects that are identifiable with eq?.\nIts hash and equivalence functions are suitable for any Scheme object.\n\n\n") ("objects:s276" "\n\n\nprocedure: (make-hashtable hash equiv?)\n\n\n\nprocedure: (make-hashtable hash equiv? size)\n\nreturns: a new mutable hashtable\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "hash and equiv? must be procedures.\nIf size is provided, it must be a nonnegative exact integer\nindicating approximately how many elements the hashtable should\ninitially hold.\nHashtables grow as needed, but when the hashtable grows it generally must\nrehash all of the existing elements.\nProviding a nonzero size can help limit the amount of rehashing\nthat must be done as the table is initially populated.\n\n" "\nThe new hashtable computes hash values using hash and\ncompares keys using equiv?, neither of which should modify the\nhashtable.\nequiv? should compare two keys and return false only if the two keys\nshould be distinguished.\nhash should accept a key as an argument and return a nonnegative\nexact integer value that is the same each time it is called with arguments\nthat equiv? does not distinguish.\nThe hash and equiv? procedures need not accept arbitrary inputs\nas long as the hashtable is used only for keys that they do accept,\nand both procedures may assume that the keys are immutable as long\nas the keys are not modified while they have associations stored in the table.\nThe hashtable operation may call hash and equiv? once,\nnot at all, or multiple times for each hashtable operation.\n\n" "\n\n" "(define ht (make-hashtable string-hash string=?))\n") ("objects:s277" "\n\nprocedure: (hashtable-mutable? hashtable)\n\nreturns: #t if hashtable is mutable, #f otherwise\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "Hashtables returned by one of the hashtable creation procedures above are\nmutable, but those created by hashtable-copy may be immutable.\nImmutable hashtables cannot be altered by any of the procedures\nhashtable-set!, hashtable-update!,\nhashtable-delete!, or hashtable-clear!.\n\n" "\n\n" "(hashtable-mutable? (make-eq-hashtable)) --> #t\n\n(hashtable-mutable? (hashtable-copy (make-eq-hashtable))) --> #f\n") ("objects:s278" "\n\nprocedure: (hashtable-hash-function hashtable)\n\nreturns: the hash function associated with hashtable\n\n\n\nprocedure: (hashtable-equivalence-function hashtable)\n\nreturns: the equivalence function associated with hashtable\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "hashtable-hash-function returns #f for eq and eqv hashtables.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(hashtable-hash-function ht) --> #f\n\n(eq? (hashtable-equivalence-function ht) eq?) --> #t\n\n\n(define ht (make-hashtable string-hash string=?))\n\n(eq? (hashtable-hash-function ht) string-hash) --> #t\n\n(eq? (hashtable-equivalence-function ht) string=?) --> #t\n") ("objects:s279" "\n\nprocedure: (equal-hash obj)\n\n\n\nprocedure: (string-hash string)\n\n\n\nprocedure: (string-ci-hash string)\n\n\n\nprocedure: (symbol-hash symbol)\n\nreturns: an exact nonnegative integer hash value\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "These procedures are hash functions suitable for use with the appropriate\nScheme predicate: equal? for equal-hash, string=?\nfor string-hash, string-ci=? for string-ci-hash,\nand symbol=? (or eq?) for symbol-hash.\nThe hash values returned by equal-hash, string-hash,\nand string-ci-hash are typically dependent on the current structure\nand contents of the input values and are thus unsuitable if keys\nare modified while they have associations in a hashtable.\n\n\n") ("objects:s280" "\n\n\nprocedure: (hashtable-set! hashtable key obj)\n\nreturns: unspecified\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "hashtable must be a mutable hashtable.\nkey should be an appropriate key for the hashtable's\nhash and equivalence functions.\nobj may be any Scheme object.\n\n" "\nhashtable-set! associates key\nwith obj in hashtable, replacing the\nexisting association, if any.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(hashtable-set! ht 'a 73)\n") ("objects:s281" "\n\nprocedure: (hashtable-ref hashtable key default)\n\nreturns: see below\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "key should be an appropriate key for the hashtable's\nhash and equivalence functions.\ndefault may be any Scheme object.\n\n" "\nhashtable-ref returns the value\nassociated with key in hashtable.\nIf no value is associated with key in hashtable,\nhashtable-ref returns default.\n\n" "\n\n" "(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n\n(define eqht (make-eq-hashtable))\n\n(hashtable-set! eqht p1 73)\n\n(hashtable-ref eqht p1 55) --> 73\n\n(hashtable-ref eqht p2 55) --> 55\n\n\n(define equalht (make-hashtable equal-hash equal?))\n\n(hashtable-set! equalht p1 73)\n\n(hashtable-ref equalht p1 55) --> 73\n\n(hashtable-ref equalht p2 55) --> 73\n") ("objects:s282" "\n\nprocedure: (hashtable-contains? hashtable key)\n\nreturns: #t if an association for key exists in hashtable, #f otherwise\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "key should be an appropriate key for the hashtable's\nhash and equivalence functions.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(hashtable-set! ht p1 73)\n\n(hashtable-contains? ht p1) --> #t\n\n(hashtable-contains? ht p2) --> #f\n") ("objects:s283" "\n\nprocedure: (hashtable-update! hashtable key procedure default)\n\nreturns: unspecified\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "hashtable must be a mutable hashtable.\nkey should be an appropriate key for the hashtable's\nhash and equivalence functions.\ndefault may be any Scheme object.\nprocedure should accept one argument, should return one value, and should\nnot modify hashtable.\n\n" "\nhashtable-update! applies procedure to the value associated with\nkey in hashtable, or to default if no value is associated with\nkey in hashtable.\nIf procedure returns, hashtable-update! associates key\nwith the value returned by procedure, replacing the old association,\nif any.\n\n" "\nA version of hashtable-update! that does not verify that it receives\narguments of the proper type might be defined as follows.\n\n" "\n\n" "(define hashtable-update!\n\n  (lambda (ht key proc value)\n\n    (hashtable-set! ht key\n\n      (proc (hashtable-ref ht key value)))))\n" "An implementation may, however, be able to implement\nhashtable-update! more efficiently by avoiding multiple\nhash computations and hashtable lookups.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(hashtable-update! ht 'a\n\n  (lambda (x) (* x 2))\n\n  55)\n\n(hashtable-ref ht 'a 0) --> 110\n\n(hashtable-update! ht 'a\n\n  (lambda (x) (* x 2))\n\n  0)\n\n(hashtable-ref ht 'a 0) --> 220\n") ("objects:s284" "\n\nprocedure: (hashtable-delete! hashtable key)\n\nreturns: unspecified\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "hashtable must be a mutable hashtable.\nkey should be an appropriate key for the hashtable's\nhash and equivalence functions.\n\n" "\nhashtable-delete! drops any association\nfor key from hashtable.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(hashtable-set! ht p1 73)\n\n(hashtable-contains? ht p1) --> #t\n\n(hashtable-delete! ht p1)\n\n(hashtable-contains? ht p1) --> #f\n\n(hashtable-contains? ht p2) --> #f\n\n(hashtable-delete! ht p2)\n") ("objects:s285" "\n\nprocedure: (hashtable-size hashtable)\n\nreturns: number of entries in hashtable\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(hashtable-size ht) --> 0\n\n(hashtable-set! ht p1 73)\n\n(hashtable-size ht) --> 1\n\n(hashtable-delete! ht p1)\n\n(hashtable-size ht) --> 0\n") ("objects:s286" "\n\nprocedure: (hashtable-copy hashtable)\n\n\n\nprocedure: (hashtable-copy hashtable mutable?)\n\nreturns: a new hashtable containing the same entries as hashtable\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "If mutable? is present and not false, the copy is mutable;\notherwise, the copy is immutable.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(hashtable-set! ht p1 \"c\")\n\n(define ht-copy (hashtable-copy ht))\n\n(hashtable-mutable? ht-copy) --> #f\n\n(hashtable-delete! ht p1)\n\n(hashtable-ref ht p1 #f) --> #f\n\n(hashtable-delete! ht-copy p1) --> exception: not mutable\n\n(hashtable-ref ht-copy p1 #f) --> \"c\"\n") ("objects:s287" "\n\nprocedure: (hashtable-clear! hashtable)\n\n\n\nprocedure: (hashtable-clear! hashtable size)\n\nreturns: unspecified\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "hashtable must be a mutable hashtable.\nIf size is provided, it must be a nonnegative exact integer.\n\n" "\nhashtable-clear! removes all entries from hashtable.\nIf size is provided, the hashtable is reset to the given size,\nas if newly created by one of the hashtable creation operations\nwith size argument size.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(hashtable-set! ht p1 \"first\")\n\n(hashtable-set! ht p2 \"second\")\n\n(hashtable-size ht) --> 2\n\n(hashtable-clear! ht)\n\n(hashtable-size ht) --> 0\n\n(hashtable-ref ht p1 #f) --> #f\n") ("objects:s288" "\n\nprocedure: (hashtable-keys hashtable)\n\nreturns: a vector containing the keys in hashtable\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "The keys may appear in any order in the returned vector.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(hashtable-set! ht p1 \"one\")\n\n(hashtable-set! ht p2 \"two\")\n\n(hashtable-set! ht 'q \"three\")\n\n(hashtable-keys ht) --> #((a . b) q (a . b))\n") ("objects:s289" "\n\nprocedure: (hashtable-entries hashtable)\n\nreturns: two vectors: one of keys and a second of values\n\nlibraries: (rnrs hashtables), (rnrs)\n\n" "hashtable-entries returns two values.\nThe first is a vector containing the keys in hashtable, and the second\nis a vector containing the corresponding values.\nThe keys and values may appear in any order, but the order is the same\nfor the keys and for the corresponding values.\n\n" "\n\n" "(define ht (make-eq-hashtable))\n\n(define p1 (cons 'a 'b))\n\n(define p2 (cons 'a 'b))\n\n(hashtable-set! ht p1 \"one\")\n\n(hashtable-set! ht p2 \"two\")\n\n(hashtable-set! ht 'q \"three\")\n\n(hashtable-entries ht) --> #((a . b) q (a . b))\n\n                       gifs/ghostRightarrow.gif #(\"two\" \"three\" \"one\")\n") ("objects:s290" "\n\n\nsyntax: (define-enumeration name (symbol ...) constructor)\n\nlibraries: (rnrs enums), (rnrs)\n\n" "A define-enumeration form is a definition and can appear\nanywhere any other definition can appear.\n\n" "\nThe define-enumeration syntax creates a new enumeration set with\nthe specified symbols in the specified order forming the enumeration's universe.\nIt defines a new syntactic form named by name that may be used to verify\nthat a symbol is in the universe.\nIf x is in the universe, (name x) evaluates to\nx.\nIt is a syntax violation if x is not in the universe.\n\n" "\ndefine-enumeration also defines\na new syntactic form named by constructor that may be used to create\nsubsets of the enumeration type.\nIf x ... are each in the universe,\n(constructor x ...) evaluates to an enumeration set\ncontaining x ....\nOtherwise, it is a syntax violation.\nThe same symbol may appear more than once in x ...,\nbut the resulting set contains only one occurrence of the symbol.\n\n" "\n\n" "(define-enumeration weather-element\n\n  (hot warm cold sunny rainy snowy windy)\n\n  weather)\n\n\n(weather-element hot) --> hot\n\n(weather-element fun) --> syntax violation\n\n(weather hot sunny windy) --> #<enum-set>\n\n(enum-set->list (weather rainy cold rainy)) --> (cold rainy)\n") ("objects:s291" "\n\nprocedure: (make-enumeration symbol-list)\n\nreturns: an enumeration set\n\nlibraries: (rnrs enums), (rnrs)\n\n" "This procedure creates a new enumeration type whose universe comprises\nthe elements of symbol-list, which must be\na list of symbols, in the order of their first appearance in the list.\nIt returns the universe of the new enumeration type as an enumeration\nset.\n\n" "\n\n" "(define positions (make-enumeration '(top bottom above top beside)))\n\n(enum-set->list positions) --> (top bottom above beside)\n") ("objects:s292" "\n\nprocedure: (enum-set-constructor enum-set)\n\nreturns: an enumeration-set construction procedure\n\nlibraries: (rnrs enums), (rnrs)\n\n" "This procedure returns a procedure p that may be used to create\nsubsets of the universe of enum-set.\np must be passed a list of symbols, and each element of the list\nmust be an element of the universe of enum-set.\nThe enumeration set returned by p contains all and only the\nsymbols in the list it is passed.\nThe value returned by p may contain elements not in enum-set\nif the universe of enum-set contains those elements.\n\n" "\n\n" "(define e1 (make-enumeration '(one two three four)))\n\n(define p1 (enum-set-constructor e1))\n\n(define e2 (p1 '(one three)))\n\n(enum-set->list e2) --> (one three)\n\n(define p2 (enum-set-constructor e2))\n\n(define e3 (p2 '(one two four)))\n\n(enum-set->list e3) --> (one two four)\n") ("objects:s293" "\n\nprocedure: (enum-set-universe enum-set)\n\nreturns: the universe of enum-set, as an enumeration set\n\nlibraries: (rnrs enums), (rnrs)\n\n" "\n" "\n(define e1 (make-enumeration '(a b c a b c d)))\n\n(enum-set->list (enum-set-universe e1)) --> (a b c d)\n\n(define e2 ((enum-set-constructor e1) '(c)))\n\n(enum-set->list (enum-set-universe e2)) --> (a b c d)\n") ("objects:s294" "\n\nprocedure: (enum-set->list enum-set)\n\nreturns: a list of the elements of enum-set\n\nlibraries: (rnrs enums), (rnrs)\n\n" "The symbols in the resulting list appear in the order given to\nthem when the enumeration type of enum-set was created.\n\n" "\n\n" "(define e1 (make-enumeration '(a b c a b c d)))\n\n(enum-set->list e1) --> (a b c d)\n\n(define e2 ((enum-set-constructor e1) '(d c a b)))\n\n(enum-set->list e2) --> (a b c d)\n") ("objects:s295" "\n\nprocedure: (enum-set-subset? enum-set1 enum-set2)\n\nreturns: #t if enum-set1 is a subset of enum-set2, #f otherwise\n\nlibraries: (rnrs enums), (rnrs)\n\n" "An enumeration set enum-set1 is a subset of an enumeration set enum-set2\nif and only if the universe of enum-set1 is a subset of the universe of enum-set2\nand each element of enum-set1 is an element of enum-set2.\n\n" "\n\n" "(define e1 (make-enumeration '(a b c)))\n\n(define e2 (make-enumeration '(a b c d e)))\n\n(enum-set-subset? e1 e2) --> #t\n\n(enum-set-subset? e2 e1) --> #f\n\n(define e3 ((enum-set-constructor e2) '(a c)))\n\n(enum-set-subset? e3 e1) --> #f\n\n(enum-set-subset? e3 e2) --> #t\n") ("objects:s296" "\n\nprocedure: (enum-set=? enum-set1 enum-set2)\n\nreturns: #t if enum-set1 and enum-set2 are equivalent, #f otherwise\n\nlibraries: (rnrs enums), (rnrs)\n\n" "Two enumeration sets enum-set1 and enum-set2 are equivalent if each is\na subset of the other.\n\n" "\n\n" "(define e1 (make-enumeration '(a b c d)))\n\n(define e2 (make-enumeration '(b d c a)))\n\n(enum-set=? e1 e2) --> #t\n\n(define e3 ((enum-set-constructor e1) '(a c)))\n\n(define e4 ((enum-set-constructor e2) '(a c)))\n\n(enum-set=? e3 e4) --> #t\n\n(enum-set=? e3 e2) --> #f\n" "enum-set=? could be defined in terms of enum-set-subset? as follows.\n\n" "\n\n" "(define enum-set=?\n\n  (lambda (e1 e2)\n\n    (and (enum-set-subset? e1 e2) (enum-set-subset? e2 e1))))\n") ("objects:s297" "\n\nprocedure: (enum-set-member? symbol enum-set)\n\nreturns: #t if symbol is an element of enum-set, #f otherwise\n\nlibraries: (rnrs enums), (rnrs)\n\n" "\n" "\n(define e1 (make-enumeration '(a b c d e)))\n\n(define e2 ((enum-set-constructor e1) '(d b)))\n\n(enum-set-member? 'c e1) --> #t\n\n(enum-set-member? 'c e2) --> #f\n") ("objects:s298" "\n\nprocedure: (enum-set-union enum-set1 enum-set2)\n\nreturns: the union of enum-set1 and enum-set2\n\n\n\nprocedure: (enum-set-intersection enum-set1 enum-set2)\n\nreturns: the intersection of enum-set1 and enum-set2\n\n\n\nprocedure: (enum-set-difference enum-set1 enum-set2)\n\nreturns: the difference of enum-set1 and enum-set2\n\nlibraries: (rnrs enums), (rnrs)\n\n" "enum-set1 and enum-set2 must have the same enumeration type.\nEach procedure returns a new enumeration set representing the union, intersection,\nor difference of the two sets.\n\n" "\n\n" "(define e1 (make-enumeration '(a b c d)))\n\n(define e2 ((enum-set-constructor e1) '(a c)))\n\n(define e3 ((enum-set-constructor e1) '(b c)))\n\n(enum-set->list (enum-set-union e2 e3)) --> (a b c)\n\n(enum-set->list (enum-set-intersection e2 e3)) --> (c)\n\n(enum-set->list (enum-set-difference e2 e3)) --> (a)\n\n(enum-set->list (enum-set-difference e3 e2)) --> (b)\n\n(define e4 (make-enumeration '(b d c a)))\n\n(enum-set-union e1 e4) --> exception: different enumeration types\n") ("objects:s299" "\n\nprocedure: (enum-set-complement enum-set)\n\nreturns: the complement of enum-set relative to its universe\n\nlibraries: (rnrs enums), (rnrs)\n\n" "\n" "\n(define e1 (make-enumeration '(a b c d)))\n\n(enum-set->list (enum-set-complement e1)) --> ()\n\n(define e2 ((enum-set-constructor e1) '(a c)))\n\n(enum-set->list (enum-set-complement e2)) --> (b d)\n") ("objects:s300" "\n\nprocedure: (enum-set-projection enum-set1 enum-set2)\n\nreturns: the projection of enum-set1 into the universe of enum-set2\n\nlibraries: (rnrs enums), (rnrs)\n\n" "Any elements of enum-set1 not in the universe of enum-set2 are dropped.\nThe result is of the same enumeration type as enum-set2.\n\n" "\n\n" "(define e1 (make-enumeration '(a b c d)))\n\n(define e2 (make-enumeration '(a b c d e f g)))\n\n(define e3 ((enum-set-constructor e1) '(a d)))\n\n(define e4 ((enum-set-constructor e2) '(a c e g)))\n\n(enum-set->list (enum-set-projection e4 e3)) --> (a c)\n\n(enum-set->list\n\n  (enum-set-union e3\n\n    (enum-set-projection e4 e3))) --> (a c d)\n") ("objects:s301" "\n\nprocedure: (enum-set-indexer enum-set)\n\nreturns: a procedure that returns the index of a symbol in the universe of enum-set\n\nlibraries: (rnrs enums), (rnrs)\n\n" "enum-set-indexer returns a procedure p that, when applied to a symbol\nin the universe of enum-set, returns the index of the symbol (zero-based) in\nthe ordered set of symbols that form the universe.\nIf applied to a symbol not in the universe, p returns #f.\n\n" "\n\n" "(define e1 (make-enumeration '(a b c d)))\n\n(define e2 ((enum-set-constructor e1) '(a d)))\n\n(define p (enum-set-indexer e2))\n\n(list (p 'a) (p 'c) (p 'e)) --> (0 2 #f)\n") ("io:s19" "\n\n\nprocedure: (make-transcoder codec)\n\n\n\nprocedure: (make-transcoder codec eol-style)\n\n\n\nprocedure: (make-transcoder codec eol-style error-handling-mode)\n\nreturns: a transcoder encapsulating codec, eol-style, and error-handling-mode\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "eol-style must be a valid eol-style symbol\n(lf, cr, nel, ls, crlf,\ncrnel, or none); it defaults to the native\neol-style for the platform.\nerror-handling-mode must be a valid error-handling-mode\nsymbol (ignore, raise, or replace)\nand defaults to replace.\n\n\n") ("io:s20" "\n\n\nprocedure: (transcoder-codec transcoder)\n\nreturns: the codec encapsulated in transcoder\n\n\n\nprocedure: (transcoder-eol-style transcoder)\n\nreturns: the eol-style symbol encapsulated in transcoder\n\n\n\nprocedure: (transcoder-error-handling-mode transcoder)\n\nreturns: the error-handling-mode symbol encapsulated in transcoder\n\nlibraries: (rnrs io ports), (rnrs)\n\n") ("io:s21" "\n\nprocedure: (native-transcoder)\n\nreturns: the native transcoder\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "The native transcoder is implementation-dependent and may vary\nby platform or locale.\n\n\n") ("io:s22" "\n\n\nprocedure: (latin-1-codec)\n\nreturns: a codec for ISO 8859-1 (Latin 1) character encodings\n\n\n\nprocedure: (utf-8-codec)\n\nreturns: a codec for Unicode UTF-8 character encodings\n\n\n\nprocedure: (utf-16-codec)\n\nreturns: a codec for Unicode UTF-16 character encodings\n\nlibraries: (rnrs io ports), (rnrs)\n\n") ("io:s23" "\n\nsyntax: (eol-style symbol)\n\nreturns: symbol\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "symbol must be one of the symbols lf, cr, nel,\nls, crlf, crnel, or none.\nThe expression (eol-style symbol) is equivalent to the\nexpression (quote symbol) except the former checks at\nexpansion time that symbol is one of the eol-style symbols.\nThe eol-style syntax provides useful documentation as well.\n\n" "\n\n" "(eol-style crlf) --> crlf\n\n(eol-style lfcr) --> syntax violation\n") ("io:s24" "\n\nprocedure: (native-eol-style)\n\nreturns: the native eol style\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "The native eol style is implementation-dependent and may vary\nby platform or locale.\n\n\n") ("io:s25" "\n\n\nsyntax: (error-handling-mode symbol)\n\nreturns: symbol\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "symbol must be one of the symbols ignore, raise,\nor replace.\nThe expression (error-handling-mode symbol) is equivalent to the\nexpression (quote symbol) except that the former checks at\nexpansion time that symbol is one of the error-handling-mode symbols.\nThe error-handling-mode syntax provides useful documentation as well.\n\n" "\n\n" "(error-handling-mode replace) --> replace\n\n(error-handling-mode relpace) --> syntax violation\n") ("io:s26" "\n\n\nsyntax: (file-options symbol ...)\n\nreturns: a file-options enumeration set\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "File-options enumeration sets may be passed to file-open operations to\ncontrol aspects of the open operation.\nThere are three standard file options: no-create, no-fail,\nand no-truncate, which affect only file-open operations that\ncreate output (including input/output) ports.\n\n" "\nWith the default file options, i.e., the value of (file-options),\nwhen a program attempts to open a file for output, an exception is raised with\ncondition type i/o-file-already-exists if the file already exists,\nand the file is created if it does not already exist.\nIf the no-fail option is included, no exception is raised if the\nfile already exists; instead, the file is opened and truncated to zero\nlength.\nIf the no-create option is included, the file is not created if\nit does not exist; instead, an exception is raised with condition type\ni/o-file-does-not-exist.\nThe no-create option implies the no-fail option.\nThe no-truncate option is relevant only if the no-fail\noption is included or implied, in which case if an existing file is\nopened, it is not truncated, but the port's position is still set to the\nbeginning of the file.\n\n" "\nIt is perhaps easier to imagine that the default file options are the\nimaginary option symbols create, fail-if-exists, and\ntruncate; no-create removes\ncreate, no-fail removes fail-if-exists, and\nno-truncate removes truncate.\n\n" "\nImplementations may support additional file option symbols.\nChez Scheme, for example, supports options that control whether the file\nis or should be compressed, whether it is locked for exclusive access, and\nwhat permissions are given to the file if it is created [citation9].\n\n\n") ("io:s27" "\n\n\nsyntax: (buffer-mode symbol)\n\nreturns: symbol\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "symbol must be one of the symbols block, line, or\nnone.\nThe expression (buffer-mode symbol) is equivalent to the\nexpression (quote symbol) except that the former checks at\nexpansion time that symbol is one of the buffer-mode symbols.\nThe buffer-mode syntax provides useful documentation as well.\n\n" "\n\n" "(buffer-mode block) --> block\n\n(buffer-mode cushion) --> syntax violation\n") ("io:s28" "\n\nsyntax: (buffer-mode? obj)\n\nreturns: #t if obj is a valid buffer mode, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "\n" "(buffer-mode? 'block) --> #t\n\n(buffer-mode? 'line) --> #t\n\n(buffer-mode? 'none) --> #t\n\n(buffer-mode? 'something-else) --> #f\n") ("io:s29" "\n\nprocedure: (open-file-input-port path)\n\n\n\nprocedure: (open-file-input-port path options)\n\n\n\nprocedure: (open-file-input-port path options b-mode)\n\n\n\nprocedure: (open-file-input-port path options b-mode ?transcoder)\n\nreturns: a new input port for the named file\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual input port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary input port.\nSee the lead-in to this section for a description of the constraints\non and effects of the other arguments.\n\n\n") ("io:s30" "\n\n\nprocedure: (open-file-output-port path)\n\n\n\nprocedure: (open-file-output-port path options)\n\n\n\nprocedure: (open-file-output-port path options b-mode)\n\n\n\nprocedure: (open-file-output-port path options b-mode ?transcoder)\n\nreturns: a new output port for the named file\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual output port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary output port.\nSee the lead-in to this section for a description of the constraints\non and effects of the other arguments.\n\n\n") ("io:s31" "\n\n\nprocedure: (open-file-input/output-port path)\n\n\n\nprocedure: (open-file-input/output-port path options)\n\n\n\nprocedure: (open-file-input/output-port path options b-mode)\n\n\n\nprocedure: (open-file-input/output-port path options b-mode ?transcoder)\n\nreturns: a new input/output port for the named file\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual input/output port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary input/output port.\nSee the lead-in to this section for a description of the constraints\non and effects of the other arguments.\n\n\n") ("io:s32" "\n\n\nprocedure: (current-input-port)\n\nreturns: the current input port\n\n\n\nprocedure: (current-output-port)\n\nreturns: the current output port\n\n\n\nprocedure: (current-error-port)\n\nreturns: the current error port\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs)\n\n" "The current-input, current-output, and current-error ports return\npre-built textual ports that are initially associated with a process's\nstandard input, standard output, and standard error streams.\n\n" "\nThe values returned by current-input-port and\ncurrent-output-port can be altered temporarily by the\nconvenience I/O procedures\nwith-input-from-file and with-output-to-file\n(Section 7.9).\n\n") ("io:s33" "\n\n\nprocedure: (standard-input-port)\n\nreturns: a fresh binary input port connected to the standard input stream\n\n\n\nprocedure: (standard-output-port)\n\nreturns: a fresh binary output port connected to the standard output stream\n\n\n\nprocedure: (standard-error-port)\n\nreturns: a fresh binary output port connected to the standard error stream\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "Because ports may be buffered, confusion can result if operations on\nmore than one port attached to one of a process's standard streams are\ninterleaved.\nThus, these procedures are typically appropriate only when a program\nno longer needs to use any existing ports attached to the standard\nstreams.\n\n\n") ("io:s34" "\n\n\nprocedure: (open-bytevector-input-port bytevector)\n\n\n\nprocedure: (open-bytevector-input-port bytevector ?transcoder)\n\nreturns: a new input port that draws input from bytevector\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If ?transcoder is present and not #f, it must be a\ntranscoder, and this procedure returns a textual input port\nwhose transcoder is ?transcoder.\nOtherwise, this procedure returns a binary input port.\n\n" "\nThe effect of modifying bytevector after this procedure is called\nis unspecified.\n\n" "\n\n" "(let ([ip (open-bytevector-input-port #vu8(1 2))])\n\n  (let* ([x1 (get-u8 ip)] [x2 (get-u8 ip)] [x3 (get-u8 ip)])\n\n    (list x1 x2 (eof-object? x3)))) --> (1 2 #t)\n" "There is no need to close a bytevector port; it's storage will be reclaimed\nautomatically when it is no longer needed, as with any other object, and\nan open bytevector port does not tie up any operating system resources.\n\n\n") ("io:s35" "\n\n\nprocedure: (open-string-input-port string)\n\nreturns: a new textual input port that draws input from string\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "The effect of modifying string after this procedure is called\nis unspecified.\nThe new port may or may not have a transcoder, and if it does, the transcoder\nis implementation-dependent.\nWhile not required, implementations are encouraged to support port-position\nand set-port-position! for string ports.\n\n" "\n\n" "(get-line (open-string-input-port \"hi.\\nwhat's up?\\n\")) --> \"hi.\"\n" "There is no need to close a string port; it's storage will be reclaimed\nautomatically when it is no longer needed, as with any other object, and\nan open string port does not tie up any operating system resources.\n\n") ("io:s36" "\n\n\nprocedure: (open-bytevector-output-port)\n\n\n\nprocedure: (open-bytevector-output-port ?transcoder)\n\nreturns: two values, a new output port and an extraction procedure\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If ?transcoder is present and not #f, it must be a\ntranscoder, and the port value is a textual output port\nwhose transcoder is ?transcoder.\nOtherwise, the port value is a binary output port.\n\n" "\nThe extraction procedure is a procedure that, when called without\narguments, creates a bytevector containing the accumulated bytes in the\nport, clears the port of its accumulated bytes, resets its position to\nzero, and returns the bytevector.\nThe accumulated bytes include any bytes written beyond the end of\nthe current position, if the position has been set back from its\nmaximum extent.\n\n" "\n\n" "(let-values ([(op g) (open-bytevector-output-port)])\n\n  (put-u8 op 15)\n\n  (put-u8 op 73)\n\n  (put-u8 op 115)\n\n  (set-port-position! op 2)\n\n  (let ([bv1 (g)])\n\n    (put-u8 op 27)\n\n    (list bv1 (g)))) --> (#vu8(15 73 115) #vu8(27))\n" "There is no need to close a bytevector port; it's storage will be reclaimed\nautomatically when it is no longer needed, as with any other object, and\nan open bytevector port does not tie up any operating system resources.\n\n\n") ("io:s37" "\n\n\nprocedure: (open-string-output-port)\n\nreturns: two values, a new textual output port and an extraction procedure\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "The extraction procedure is a procedure that, when called without\narguments, creates a string containing the accumulated characters in the\nport, clears the port of its accumulated characters, resets its position to\nzero, and returns the string.\nThe accumulated characters include any characters written beyond the end of\nthe current position, if the position has been set back from its\nmaximum extent.\nWhile not required, implementations are encouraged to support port-position\nand set-port-position! for string ports.\n\n" "\n\n" "(let-values ([(op g) (open-string-output-port)])\n\n  (put-string op \"some data\")\n\n  (let ([str1 (g)])\n\n    (put-string op \"new stuff\")\n\n    (list str1 (g)))) --> (\"some data\" \"new stuff\")\n" "There is no need to close a string port; it's storage will be reclaimed\nautomatically when it is no longer needed, as with any other object, and\nan open string port does not tie up any operating system resources.\n\n\n") ("io:s38" "\n\n\nprocedure: (call-with-bytevector-output-port procedure)\n\n\n\nprocedure: (call-with-bytevector-output-port procedure ?transcoder)\n\nreturns: a bytevector containing the accumulated bytes\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If ?transcoder is present and not #f, it must be a\ntranscoder, and procedure is called with a textual bytevector output port\nwhose transcoder is ?transcoder.\nOtherwise, procedure is called with a binary bytevector output port.\nIf procedure returns, a bytevector containing the bytes accumulated in the port\nis created, the accumulated bytes are cleared from the port, the port's position is\nreset to zero, and the bytevector is returned from call-with-bytevector-output-port.\nThese actions occur each time procedure returns, if it returns\nmultiple times due to the invocation of a continuation created while\nprocedure is active.\n\n" "\n\n" "(let ([tx (make-transcoder (latin-1-codec) (eol-style lf)\n\n            (error-handling-mode replace))])\n\n  (call-with-bytevector-output-port\n\n    (lambda (p) (put-string p \"abc\"))\n\n    tx)) --> #vu8(97 98 99)\n") ("io:s39" "\n\nprocedure: (call-with-string-output-port procedure)\n\nreturns: a string containing the accumulated characters\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "procedure is called with one argument, a string output port.\nIf procedure returns, a string containing the characters accumulated in the port\nis created, the accumulated characters are cleared from the port, the port's position is\nreset to zero, and the string is returned from call-with-string-output-port.\nThese actions occur each time procedure returns, if it returns\nmultiple times due to the invocation of a continuation created while\nprocedure is active.\n\n" "\ncall-with-string-output-port can be used along with\nput-datum to define a procedure, object->string, that\nreturns a string containing the printed representation of an object.\n\n" "\n\n" "(define (object->string x)\n\n  (call-with-string-output-port\n\n    (lambda (p) (put-datum p x))))\n\n\n(object->string (cons 'a '(b c))) --> \"(a b c)\"\n") ("io:s41" "\n\n\nprocedure: (make-custom-binary-input-port id r! gp sp! close)\n\nreturns: a new custom binary input port\n\n\n\nprocedure: (make-custom-binary-output-port id w! gp sp! close)\n\nreturns: a new custom binary output port\n\n\n\nprocedure: (make-custom-binary-input/output-port id r! w! gp sp! close)\n\nreturns: a new custom binary input/output port\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "These procedures allow programs to create ports from arbitrary byte streams.\nid must be a string naming the new port; the name is used for informational\npurposes only, and an implementation may choose to include it in the printed\nsyntax, if any, of a custom port.\nr! and w! must be procedures, while gp, sp!, and\nclose must each be a procedure or #f.\nThese arguments are described below.\n\n" "\n\nr! is called to draw input from the custom port, e.g., to support\nget-u8 or get-bytevector-n.\nIt is called with three arguments: bytevector, start, and n.\nstart will be a nonnegative exact integer, n will be a\npositive exact integer, and the sum of start and n will\nnot exceed the length of bytevector.\nIf the byte stream is at end of file, r! should return exact 0.\nOtherwise, it should read at least one and at most n bytes from\nthe stream, store these bytes in consecutive locations of bytevector\nstarting at start, and return as an exact positive integer the\nnumber of bytes actually read.\n\n" "\nw! is called to send output to the port, e.g., to support\nput-u8 or put-bytevector.\nIt is called with three arguments: bytevector, start, and n.\nstart and n will be nonnegative exact integers, and the\nsum of start and n will not exceed the length of\nbytevector.\nw! should write up to n consecutive bytes from\nbytevector starting at start and return, as an exact nonnegative\ninteger, the number of bytes actually written.\n\n" "\ngp is called to query the port's position.\nIf it is #f, the port will not support port-position.\nIf it is not #f, it will be passed zero arguments and should\nreturn the current position as a displacement in bytes from the start\nof the byte stream as an exact nonnegative integer.\n\n" "\nsp! is called to set the port's position.\nIf it is #f, the port will not support set-port-position!.\nIf it is not #f, it will be passed one argument, an exact\nnonnegative integer representing the new position as a displacement in\nbytes from the start of the byte stream, and it should set the position\nto this value.\n\n" "\nclose is called to close the byte stream.\nIf it is #f, no action will be taken to close the byte stream\nwhen the new port is closed.\nIf it is not #f, it will be passed zero arguments and should\ntake whatever actions are necessary to close the byte stream.\n\n\n" "\nIf the new port is an input/output port and does not provide either a\ngp or sp! procedure, it may not be possible for the\nimplementation to position the port properly if an output operation occurs\nafter an input operation, due to input buffering that must be done to\nsupport lookahead-u8 and is often done anyway for efficiency.\nFor the same reason, a call to port-position after an input\noperation may not return an accurate position if the sp! procedure is\nnot provided.\nThus, programs that create custom binary input/output ports should generally\nprovide both gp and sp! procedures.\n\n\n") ("io:s42" "\n\n\nprocedure: (make-custom-textual-input-port id r! gp sp! close)\n\nreturns: a new custom textual input port\n\n\n\nprocedure: (make-custom-textual-output-port id w! gp sp! close)\n\nreturns: a new custom textual output port\n\n\n\nprocedure: (make-custom-textual-input/output-port id r! w! gp sp! close)\n\nreturns: a new custom textual input/output port\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "These procedures allow programs to create ports from arbitrary character streams.\nid must be a string naming the new port; the name is used for informational\npurposes only, and an implementation may choose to include it in the printed\nsyntax, if any, of a custom port.\nr! and w! must be procedures, while gp, sp!, and\nclose must each be a procedure or #f.\nThese arguments are described below.\n\n" "\n\nr! is called to draw input from the port, e.g., to support\nget-char or get-string-n.\nIt is called with three arguments: string, start, and n.\nstart will be a nonnegative exact integer, n will be a\npositive exact integer, and the sum of start and n will\nnot exceed the length of string.\nIf the character stream is at end of file, r! should return exact 0.\nOtherwise, it should read at least one and at most n characters from\nthe stream, store these characters in consecutive locations of string\nstarting at start, and return as an exact positive integer the\nnumber of characters actually read.\n\n" "\nw! is called to send output to the port, e.g., to support\nput-char or put-string.\nIt is called with three arguments: string, start, and n.\nstart and n will be nonnegative exact integers, and the\nsum of start and n will not exceed the length of\nstring.\nw! should write up to n consecutive characters from\nstring starting at start and return, as an exact nonnegative\ninteger, the number of characters actually written.\n\n" "\ngp is called to query the port's position.\nIf it is #f, the port will not support port-position.\nIf it is not #f, it will be passed zero arguments and should\nreturn the current position, which may be an arbitrary value.\n\n" "\nsp! is called to set the port's position.\nIf it is #f, the port will not support set-port-position!.\nIf it is not #f, it will be passed one argument, pos, a value\nrepresenting the new position.\nIf pos is the result of a previous call to gp, sp! should\nset the position to pos.\n\n" "\nclose is called to close the character stream.\nIf it is #f, no action will be taken to close the character stream\nwhen the new port is closed.\nIf it is not #f, it will be passed zero arguments and should\ntake whatever actions are necessary to close the character stream.\n\n\n" "\nIf the new port is an input/output port, it may not be possible for the\nimplementation to position the port properly if an output operation occurs\nafter an input operation, even if the gp and sp! procedures\nare provided, due to input buffering that must be done to support\nlookahead-char and is often done anyway for efficiency.\nSince the representations of port positions are not specified, it is\nnot possible for the implementation to adjust the gp return\nvalue to account for the number of buffered characters.\nFor the same reason, a call to port-position after an input\noperation may not return an accurate position, even if the sp!\nprocedure is provided.\n\n" "\nIt should, however, be possible to perform output reliably after reading\nif the position is reset to the starting position.\nThus, programs that create custom textual input/output ports should generally\nprovide both gp and sp! procedures, and consumers of these ports\nshould obtain the starting position via port-position before any\ninput operations and reset the position back to the starting position\nbefore doing any output operations.\n\n\n") ("io:s43" "\n\n\nprocedure: (port? obj)\n\nreturns: #t if obj is a port, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs)\n\n") ("io:s44" "\n\nprocedure: (input-port? obj)\n\nreturns: #t if obj is an input or input/output port, #f otherwise\n\n\n\nprocedure: (output-port? obj)\n\nreturns: #t if obj is an output or input/output port, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs)\n\n") ("io:s45" "\n\nprocedure: (binary-port? obj)\n\nreturns: #t if obj is a binary port, #f otherwise\n\n\n\nprocedure: (textual-port? obj)\n\nreturns: #t if obj is a textual port, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs)\n\n") ("io:s46" "\n\nprocedure: (close-port port)\n\nreturns: unspecified\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If port is not already closed, close-port closes it,\nfirst flushing any buffered bytes or characters to the underlying stream\nif the port is an output port.\nOnce a port has been closed, no more input or output operations may be\nperformed on the port.\nBecause the operating system may place limits on the number of file ports open\nat one time or restrict access to an open file, it is good practice to\nclose any file port that will no longer be used for input or output.\nIf the port is an output port, closing the port explicitly also ensures\nthat buffered data is written to the underlying stream.\nSome Scheme implementations close file ports automatically after they become\ninaccessible to the program or when the Scheme program exits, but it is\nbest to close file ports explicitly whenever possible.\nClosing a port that has already been closed has no effect.\n\n\n") ("io:s47" "\n\n\nprocedure: (transcoded-port binary-port transcoder)\n\nreturns: a new textual port with the same byte stream as binary-port\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "This procedure returns a new textual port with transcoder transcoder\nand the same underlying byte stream as binary-port, positioned at\nthe current position of binary-port.\n\n" "\nAs a side effect of creating the textual port, binary-port is closed\nto prevent read or write operations on binary-port from interfering\nwith read and write operations on the new textual port.\nThe underlying byte stream remains open, however, until the textual port\nis closed.\n\n\n") ("io:s48" "\n\n\nprocedure: (port-transcoder port)\n\nreturns: the transcoder associated with port if any, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "This procedure always returns #f for binary ports and may return\n#f for some textual ports.\n\n\n") ("io:s49" "\n\n\nprocedure: (port-position port)\n\nreturns: the port's current position\n\n\n\nprocedure: (port-has-port-position? port)\n\nreturns: #t if the port supports port-position, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "A port may allow queries to determine its current position in\nthe underlying stream of bytes or characters.\nIf so, the procedure port-has-port-position? returns\n#t and port-position returns the current position.\nFor binary ports, the position is always an exact nonnegative integer byte\ndisplacement from the start of the byte stream.\nFor textual ports, the representation of a position is unspecified; it\nmay not be an exact nonnegative integer and, even if it is, it may not\nrepresent either a byte or character displacement in the underlying stream.\nThe position may be used at some later time to reset the position if the\nport supports set-port-position!.\nIf port-position is called on a port that does not support it,\nan exception with condition type &assertion is raised.\n\n\n") ("io:s50" "\n\n\nprocedure: (set-port-position! port pos)\n\nreturns: unspecified\n\n\n\nprocedure: (port-has-set-port-position!? port)\n\nreturns: #t if the port supports set-port-position!, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "A port may allow its current position to be moved directly to a different\nposition in the underlying stream of bytes or characters.\nIf so, the procedure port-has-set-port-position!? returns\n#t and set-port-position! changes the current position.\nFor binary ports, the position pos must be an exact nonnegative integer byte\ndisplacement from the start of the byte stream.\nFor textual ports, the representation of a position is unspecified, as\ndescribed in the entry for port-position above, but pos must be\nan appropriate position for the textual port, which is usually guaranteed\nto be the case only if it was obtained from a call to port-position\non the same port.\nIf set-port-position! is called on a port that does not support it,\nan exception with condition type &assertion is raised.\n\n" "\nIf port is a binary output port and the position is set\nbeyond the current end of the data in the underlying stream, the\nstream is not extended until new data is written at that position.\nIf new data is written at that position, the contents of each\nintervening position is unspecified.\nBinary ports created with open-file-output-port and\nopen-file-input/output-port can always be extended in this manner\nwithin the limits of the underlying operating system.\nIn other cases, attempts to set the port beyond the current end of data\nin the underlying object may result in an exception with condition\ntype &i/o-invalid-position.\n\n\n") ("io:s51" "\ndesc:call-with-port\n\n\nprocedure: (call-with-port port procedure)\n\nreturns: the values returned by procedure\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "call-with-port calls procedure with port as the only\nargument.\nIf procedure returns, call-with-port closes the port and\nreturns the values returned by procedure.\n\n" "\ncall-with-port does not automatically close the\nport if a continuation created outside of procedure is invoked, since it\nis possible that another continuation created inside of procedure will be\ninvoked at a later time, returning control to procedure.\nIf procedure does not return, an implementation is free to close the\nport only if it can prove that the output port is no longer accessible.\n\n" "\nThe example below copies the contents of infile to outfile, overwriting\noutfile if it exists.\nUnless an error occurs, the ports are closed after the copy has been\ncompleted.\n\n" "\n\n" "(call-with-port (open-file-input-port \"infile\" (file-options)\n\n                  (buffer-mode block) (native-transcoder))\n\n  (lambda (ip)\n\n    (call-with-port (open-file-output-port \"outfile\"\n\n                      (file-options no-fail)\n\n                      (buffer-mode block)\n\n                      (native-transcoder)) \n\n      (lambda (op)\n\n        (do ([c (get-char ip) (get-char ip)])\n\n            ((eof-object? c))\n\n          (put-char op c))))))\n" "A definition of call-with-port is given on page 135.\n\n") ("io:s52" "\n\n\nprocedure: (output-port-buffer-mode port)\n\nreturns: the symbol representing the buffer mode of port\n\nlibraries: (rnrs io ports), (rnrs)\n\n") ("io:s53" "\n\n\nprocedure: (eof-object? obj)\n\nreturns: #t if obj is an eof object, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs)\n\n" "The end-of-file object is returned by input operations, e.g., get-datum,\nwhen an input port has reached the end of input.\n\n\n") ("io:s54" "\n\n\nprocedure: (eof-object)\n\nreturns: the eof object\n\nlibraries: (rnrs io ports), (rnrs io simple), (rnrs)\n\n" "\n" "(eof-object? (eof-object)) --> #t\n") ("io:s55" "\n\nprocedure: (get-u8 binary-input-port)\n\nreturns: the next byte from binary-input-port, or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If binary-input-port is at end of file, the eof object is returned.\nOtherwise, the next available byte is returned as an unsigned 8-bit\nquantity, i.e., an exact unsigned integer less than or equal to 255,\nand the port's position is advanced one byte.\n\n\n") ("io:s56" "\n\n\nprocedure: (lookahead-u8 binary-input-port)\n\nreturns: the next byte from binary-input-port, or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If binary-input-port is at end of file, the eof object is returned.\nOtherwise, the next available byte is returned as an unsigned 8-bit\nquantity, i.e., an exact unsigned integer less than or equal to 255.\nIn contrast to get-u8, lookahead-u8 does not consume\nthe byte it reads from the port, so if the next operation on the port\nis a call to lookahead-u8 or get-u8, the same\nbyte is returned.\n\n\n") ("io:s57" "\n\n\nprocedure: (get-bytevector-n binary-input-port n)\n\nreturns: a nonempty bytevector containing up to n bytes, or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "n must be an exact nonnegative integer.\nIf binary-input-port is at end of file, the eof object is returned.\nOtherwise, get-bytevector-n reads (as if with get-u8)\nas many bytes, up to n, as are available before the port is at end\nof file, and returns a new (nonempty) bytevector containing these bytes.\nThe port's position is advanced past the bytes read.\n\n\n") ("io:s58" "\n\n\nprocedure: (get-bytevector-n! binary-input-port bytevector start n)\n\nreturns: the count of bytes read or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "start and n must be exact nonnegative integers, and the sum of\nstart and n must not exceed the length of bytevector.\n\n" "\nIf binary-input-port is at end of file, the eof object is returned.\nOtherwise, get-bytevector-n! reads (as if with get-u8)\nas many bytes, up to n, as are available before the port is at end\nof file, stores the bytes in consecutive locations of bytevector\nstarting at start, and returns the count of bytes read as an exact\npositive integer.\nThe port's position is advanced past the bytes read.\n\n\n") ("io:s59" "\n\n\nprocedure: (get-bytevector-some binary-input-port)\n\nreturns: a nonempty bytevector or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If binary-input-port is at end of file, the eof object is returned.\nOtherwise, get-bytevector-some reads (as if with get-u8)\nat least one byte and possibly more, and returns a bytevector containing\nthese bytes.\nThe port's position is advanced past the bytes read.\nThe maximum number of bytes read by this operation is implementation-dependent.\n\n\n") ("io:s60" "\n\n\nprocedure: (get-bytevector-all binary-input-port)\n\nreturns: a nonempty bytevector or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If binary-input-port is at end of file, the eof object is returned.\nOtherwise, get-bytevector-all reads (as if with get-u8)\nall of the bytes available before the port is at end of file and\nreturns a bytevector containing these bytes.\nThe port's position is advanced past the bytes read.\n\n\n") ("io:s61" "\n\n\nprocedure: (get-char textual-input-port)\n\nreturns: the next character from textual-input-port, or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If textual-input-port is at end of file, the eof object is returned.\nOtherwise, the next available character is returned\nand the port's position is advanced one character.\nIf textual-input-port is a transcoded port, the position in the\nunderlying byte stream may advance by more than one byte.\n\n\n") ("io:s62" "\n\n\nprocedure: (lookahead-char textual-input-port)\n\nreturns: the next character from textual-input-port, or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If textual-input-port is at end of file, the eof object is returned.\nOtherwise, the next available character is returned.\nIn contrast to get-char, lookahead-char does not consume\nthe character it reads from the port, so if the next operation on the port\nis a call to lookahead-char or get-char, the same\ncharacter is returned.\n\n" "\nlookahead-char is provided for applications requiring one\ncharacter of lookahead.\nThe procedure get-word defined below\nreturns the next word from a textual input port as a string, where\na word is defined to be a sequence of alphabetic characters.\nSince get-word does not know until it sees one character\nbeyond the word that it has read the entire word, it uses\nlookahead-char to determine the next character and\nget-char to consume the character.\n\n" "\n\n" "(define get-word\n\n  (lambda (p)\n\n    (list->string\n\n      (let f ()\n\n        (let ([c (lookahead-char p)])\n\n          (cond\n\n            [(eof-object? c) '()]\n\n            [(char-alphabetic? c) (get-char p) (cons c (f))]\n\n            [else '()]))))))\n") ("io:s63" "\n\nprocedure: (get-string-n textual-input-port n)\n\nreturns: a nonempty string containing up to n characters, or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "n must be an exact nonnegative integer.\nIf textual-input-port is at end of file, the eof object is returned.\nOtherwise, get-string-n reads (as if with get-char)\nas many characters, up to n, as are available before the port is at end\nof file, and returns a new (nonempty) string containing these characters.\nThe port's position is advanced past the characters read.\n\n\n") ("io:s64" "\n\n\nprocedure: (get-string-n! textual-input-port string start n)\n\nreturns: the count of characters read or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "start and n must be exact nonnegative integers, and the sum of\nstart and n must not exceed the length of string.\n\n" "\nIf textual-input-port is at end of file, the eof object is returned.\nOtherwise, get-string-n! reads (as if with get-char)\nas many characters, up to n, as are available before the port is at end\nof file, stores the characters in consecutive locations of string\nstarting at start, and returns the count of characters read as an exact\npositive integer.\nThe port's position is advanced past the characters read.\n\n" "\nget-string-n! may be used to implement string-set! and\nstring-fill!, as illustrated below, although this is not its\nprimary purpose.\n\n" "\n\n" "(define string-set!backdoor-string-fill\n\n  (lambda (s i c)\n\n    (let ([sip (open-string-input-port (string c))])\n\n      (get-string-n! sip s i 1)\n\n     ; return unspecified values:\n\n      (if #f #f))))\n\n\n(define string-fill!\n\n  (lambda (s c)\n\n    (let ([n (string-length s)])\n\n      (let ([sip (open-string-input-port (make-string n c))])\n\n        (get-string-n! sip s 0 n)\n\n       ; return unspecified values:\n\n        (if #f #f)))))\n\n\n(let ([x (make-string 3)])\n\n  (string-fill! x #\\-)\n\n  (string-set! x 2 #\\))\n\n  (string-set! x 0 #\\;)\n\n  x) --> \";-)\"\n") ("io:s65" "\n\nprocedure: (get-string-all textual-input-port)\n\nreturns: a nonempty string or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If textual-input-port is at end of file, the eof object is returned.\nOtherwise, get-string-all reads (as if with get-char)\nall of the characters available before the port is at end of file and\nreturns a string containing these characters.\nThe port's position is advanced past the characters read.\n\n\n\n") ("io:s66" "\n\n\nprocedure: (get-line textual-input-port)\n\nreturns: a string or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "If textual-input-port is at end of file, the eof object is returned.\nOtherwise, get-line reads (as if with get-char)\nall of the characters available before the port is at end of file or a\nline-feed character has been read and returns a string containing all but\nthe line-feed character of the characters read.\nThe port's position is advanced past the characters read.\n\n" "\n\n" "(let ([sip (open-string-input-port \"one\\ntwo\\n\")])\n\n  (let* ([s1 (get-line sip)] [s2 (get-line sip)])\n\n    (list s1 s2 (port-eof? sip)))) --> (\"one\" \"two\" #t)\n\n\n(let ([sip (open-string-input-port \"one\\ntwo\")])\n\n  (let* ([s1 (get-line sip)] [s2 (get-line sip)])\n\n    (list s1 s2 (port-eof? sip)))) --> (\"one\" \"two\" #t)\n") ("io:s67" "\n\nprocedure: (get-datum textual-input-port)\n\nreturns: a Scheme datum object or the eof object\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "This procedure scans past whitespace and comments to find the start of\nthe external representation of a datum.\nIf textual-input-port reaches end of file before the start of the\nexternal representation of a datum is found, the eof object is returned.\n\n" "\nOtherwise, get-datum reads as many characters as necessary,\nand no more, to parse a single datum, and returns a newly allocated\nobject whose structure is determined by the external representation.\nThe port's position is advanced past the characters read.\nIf an end-of-file is reached before the external representation of\nthe datum is complete, or an unexpected character is read,\nan exception is raised with condition types &lexical and\ni/o-read.\n\n" "\n\n" "(let ([sip (open-string-input-port \"; a\\n\\n one (two)\\n\")])\n\n  (let* ([x1 (get-datum sip)]\n\n         [c1 (lookahead-char sip)]\n\n         [x2 (get-datum sip)])\n\n    (list x1 c1 x2 (port-eof? sip)))) --> (one #\\space (two) #f)\n") ("io:s68" "\n\nprocedure: (port-eof? input-port)\n\nreturns: #t if input-port is at end-of-file, #f otherwise\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "This procedure is similar to lookahead-u8 on a binary input port\nor lookahead-char on a textual input port, except that instead\nof returning the next byte/character or eof object, it returns a boolean\nvalue to indicate whether the value would be the eof object.\n\n\n") ("io:s69" "\n\n\nprocedure: (put-u8 binary-output-port octet)\n\nreturns: unspecified\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "octet must be an exact nonnegative integer less than or equal to 255.\nThis procedure writes octet to binary-output-port, advancing\nthe port's position by one byte.\n\n\n") ("io:s70" "\n\n\nprocedure: (put-bytevector binary-output-port bytevector)\n\n\n\nprocedure: (put-bytevector binary-output-port bytevector start)\n\n\n\nprocedure: (put-bytevector binary-output-port bytevector start n)\n\nreturns: unspecified\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "start and n must be nonnegative exact integers, and the sum of\nstart and n must not exceed the length of bytevector.\nIf not supplied, start defaults to zero and n defaults to\nthe difference between the length of bytevector and start.\n\n" "\nThis procedure writes the n bytes of bytevector starting at\nstart to the port and advances the its position\npast the end of the bytes written.\n\n\n") ("io:s71" "\n\n\nprocedure: (put-char textual-output-port char)\n\nreturns: unspecified\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "This procedure writes char to textual-output-port, advancing\nthe port's position by one character.\nIf textual-output-port is a transcoded port, the position in the\nunderlying byte stream may advance by more than one byte.\n\n\n") ("io:s72" "\n\n\nprocedure: (put-string textual-output-port string)\n\n\n\nprocedure: (put-string textual-output-port string start)\n\n\n\nprocedure: (put-string textual-output-port string start n)\n\nreturns: unspecified\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "start and n must be nonnegative exact integers, and the sum of\nstart and n must not exceed the length of string.\nIf not supplied, start defaults to zero and n defaults to\nthe difference between the length of string and start.\n\n" "\nThis procedure writes the n characters of string starting at\nstart to the port and advances the its position\npast the end of the characters written.\n\n\n") ("io:s73" "\n\n\nprocedure: (put-datum textual-output-port obj)\n\nreturns: unspecified\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "This procedure writes an external representation of obj to\ntextual-output-port.\nIf obj does not have an external representation as a datum,\nthe behavior is unspecified.\nThe precise external representation is implementation-dependent,\nbut when obj does have an external representation as a datum,\nput-datum should produce a sequence of characters that\ncan later be read by get-datum as an object equivalent\n(in the sense of equal?) to obj.\nSee Section 12.5 for an implementation of put-datum,\nwrite, and display.\n\n\n") ("io:s74" "\n\n\nprocedure: (flush-output-port output-port)\n\nreturns: unspecified\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "This procedure forces any bytes or characters in the buffer associated\nwith output-port to be sent immediately to the underlying stream.\n\n\n") ("io:s75" "\n\n\nprocedure: (open-input-file path)\n\nreturns: a new input port\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "path must be a string or some other implementation-dependent \nvalue that names a file.\nopen-input-file creates a new textual input port for the file named by\npath, as if by open-file-input-port\nwith default options, an implementation-dependent buffer\nmode, and an implementation-dependent transcoder.\n\n" "\nThe following shows the use of open-input-file, read, and\nclose-port in an expression that gathers a list of\nobjects from the file named by \"myfile.ss.\"\n\n" "\n\n" "(let ([p (open-input-file \"myfile.ss\")])\n\n  (let f ([x (read p)])\n\n    (if (eof-object? x)\n\n        (begin\n\n          (close-port p)\n\n          '())\n\n        (cons x (f (read p))))))\n") ("io:s76" "\n\nprocedure: (open-output-file path)\n\nreturns: a new output port\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "path must be a string or some other implementation-dependent \nvalue that names a file.\nopen-output-file creates a new output port for the file named by\npath, as if by open-file-output-port with default options,\nan implementation-dependent buffer mode, and an implementation-dependent\ntranscoder.\n\n" "\nThe following shows the use of open-output-file \nto write a list of objects (the value of\nlist-to-be-printed), separated by newlines, to the file\nnamed by \"myfile.ss.\"\n\n" "\n\n" "(let ([p (open-output-file \"myfile.ss\")])\n\n  (let f ([ls list-to-be-printed])\n\n    (if (not (null? ls))\n\n        (begin\n\n          (write (car ls) p)\n\n          (newline p)\n\n          (f (cdr ls)))))\n\n  (close-port p))\n") ("io:s77" "\n\nprocedure: (call-with-input-file path procedure)\n\nreturns: the values returned by procedure\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "path must be a string or some other implementation-dependent \nvalue that names a file.\nprocedure should accept one argument.\n\n" "\ncall-with-input-file creates a new input port for the file named\nby path, as if with open-input-file, and passes this port to procedure.\nIf procedure returns, call-with-input-file closes the input port\nand returns the values returned by procedure.\n\n" "\ncall-with-input-file does not automatically close the input\nport if a continuation created outside of procedure is invoked, since it\nis possible that another continuation created inside of procedure will be\ninvoked at a later time, returning control to procedure.\nIf procedure does not return, an implementation is free to close the\ninput port only if it can prove that the input port is no longer accessible.\nAs shown in Section 5.6, dynamic-wind may be used to\nensure that the port is closed if a continuation created outside of\nprocedure is invoked.\n\n" "\nThe following example shows the use of call-with-input-file\nin an expression that gathers\na list of objects from the file named by \"myfile.ss.\"\nIt is functionally equivalent to the example given for\nopen-input-file above.\n\n" "\n\n" "(call-with-input-file \"myfile.ss\"\n\n  (lambda (p)\n\n    (let f ([x (read p)])\n\n      (if (eof-object? x)\n\n          '()\n\n          (cons x (f (read p)))))))\n" "call-with-input-file might be defined without error checking as follows.\n\n" "\n\n" "(define call-with-input-file\n\n  (lambda (filename proc)\n\n    (let ([p (open-input-file filename)])\n\n      (let-values ([v* (proc p)])\n\n        (close-port p)\n\n        (apply values v*)))))\n") ("io:s78" "\n\nprocedure: (call-with-output-file path procedure)\n\nreturns: the values returned by procedure\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "path must be a string or some other implementation-dependent \nvalue that names a file.\nprocedure should accept one argument.\n\n" "\ncall-with-output-file creates a new output port for the file named\nby path, as if with open-output-file, and passes this port to procedure.\nIf procedure returns, call-with-output-file closes the output port\nand returns the values returned by procedure.\n\n" "\ncall-with-output-file does not automatically close the output\nport if a continuation created outside of procedure is invoked, since it\nis possible that another continuation created inside of procedure will be\ninvoked at a later time, returning control to procedure.\nIf procedure does not return, an implementation is free to close the\noutput port only if it can prove that the output port is no longer accessible.\nAs shown in Section 5.6, dynamic-wind may be used to\nensure that the port is closed if a continuation created outside of\nprocedure is invoked.\n\n" "\nThe following shows the use of call-with-output-file to\nwrite a list of objects (the value of  list-to-be-printed),\nseparated by newlines, to the file named by \"myfile.ss.\"\nIt is functionally equivalent to the example given for\nopen-output-file above.\n\n" "\n\n" "(call-with-output-file \"myfile.ss\"\n\n  (lambda (p)\n\n    (let f ([ls list-to-be-printed])\n\n      (unless (null? ls)\n\n        (write (car ls) p)\n\n        (newline p)\n\n        (f (cdr ls))))))\n" "call-with-output-file might be defined without error checking as follows.\n\n" "\n\n" "(define call-with-output-file\n\n  (lambda (filename proc)\n\n    (let ([p (open-output-file filename)])\n\n      (let-values ([v* (proc p)])\n\n        (close-port p)\n\n        (apply values v*)))))\n") ("io:s79" "\n\nprocedure: (with-input-from-file path thunk)\n\nreturns: the values returned by thunk\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "path must be a string or some other implementation-dependent \nvalue that names a file.\nthunk must be a procedure and should accept zero arguments.\n\n" "\nwith-input-from-file temporarily changes the current input port to be the\nresult of opening the file named by path, as if with open-input-file, during the\napplication of thunk.\nIf thunk returns, the port is closed and the current input port\nis restored to its old value.\n\n" "\nThe behavior of with-input-from-file is unspecified\nif a continuation created outside\nof thunk is invoked before thunk returns.\nAn implementation may close the port and restore the current input\nport to its old value---but it may not.\n\n\n") ("io:s80" "\n\n\nprocedure: (with-output-to-file path thunk)\n\nreturns: the values returned by thunk\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "path must be a string or some other implementation-dependent \nvalue that names a file.\nthunk must be a procedure and should accept zero arguments.\n\n" "\nwith-output-to-file temporarily rebinds the current output port to be the\nresult of opening the file named by path, as if with open-output-file,\nduring the application of thunk.\nIf thunk returns, the port is closed and the current output port\nis restored to its old value.\n\n" "\nThe behavior of with-output-to-file is unspecified if a\ncontinuation created outside of thunk is invoked before\nthunk returns.\nAn implementation may close the port and restore the current output\nport to its old value---but it may not.\n\n\n") ("io:s81" "\n\n\nprocedure: (read)\n\n\n\nprocedure: (read textual-input-port)\n\nreturns: a Scheme datum object or the eof object\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "If textual-input-port is not supplied, it defaults to the current input port.\nThis procedure is otherwise equivalent to get-datum.\n\n\n") ("io:s82" "\n\n\nprocedure: (read-char)\n\n\n\nprocedure: (read-char textual-input-port)\n\nreturns: the next character from textual-input-port\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "If textual-input-port is not supplied, it defaults to the current input port.\nThis procedure is otherwise equivalent to get-char.\n\n\n") ("io:s83" "\n\n\nprocedure: (peek-char)\n\n\n\nprocedure: (peek-char textual-input-port)\n\nreturns: the next character from textual-input-port\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "If textual-input-port is not supplied, it defaults to the current input port.\nThis procedure is otherwise equivalent to lookahead-char.\n\n\n") ("io:s84" "\n\n\nprocedure: (write obj)\n\n\n\nprocedure: (write obj textual-output-port)\n\nreturns: unspecified\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "If textual-output-port is not supplied, it defaults to the current output port.\nThis procedure is otherwise equivalent to put-datum, with the\narguments reversed.\nSee Section 12.5 for an implementation of put-datum,\nwrite, and display.\n\n") ("io:s85" "\n\n\nprocedure: (display obj)\n\n\n\nprocedure: (display obj textual-output-port)\n\nreturns: unspecified\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "If textual-output-port is not supplied, it defaults to the current output port.\n\n" "\ndisplay is similar to write or put-datum but prints strings\nand characters found within obj directly.\nStrings are printed without quotation marks or escapes for special characters, as if\nby put-string, and characters\nare printed without the #\\ notation, as if by put-char.\nWith display,\nthe three-element list (a b c)\nand the two-element list (\"a b\" c) both print as\n(a b c).\nBecause of this, display should not be used to print objects that\nare intended to be read with read.\ndisplay is useful primarily for printing messages, with obj\nmost often being a string.\nSee Section 12.5 for an implementation of put-datum,\nwrite, and display.\n\n") ("io:s86" "\n\n\nprocedure: (write-char char)\n\n\n\nprocedure: (write-char char textual-output-port)\n\nreturns: unspecified\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "If textual-output-port is not supplied, it defaults to the current output port.\nThis procedure is otherwise equivalent to put-char, with the\narguments reversed.\n\n\n") ("io:s87" "\n\n\nprocedure: (newline)\n\n\n\nprocedure: (newline textual-output-port)\n\nreturns: unspecified\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "If textual-output-port is not supplied, it defaults to the current output port.\nnewline sends a line-feed character to the port.\n\n\n") ("io:s88" "\n\n\nprocedure: (close-input-port input-port)\n\n\n\nprocedure: (close-output-port output-port)\n\nreturns: unspecified\n\nlibraries: (rnrs io simple), (rnrs)\n\n" "close-input-port closes an input port, and\nclose-output-port closes an output port.\nThese procedures are provided for backward compatibility with the Revised5\nReport; they are not actually more convenient to use than close-port.\n\n\n") ("io:s89" "\n\n\nprocedure: (file-exists? path)\n\nreturns: #t if the file named by path exists, #f otherwise\n\nlibraries: (rnrs files), (rnrs)\n\n" "path must be a string or some other implementation-dependent \nvalue that names a file.\nWhether file-exists? follows symbolic links is unspecified.\n\n\n") ("io:s90" "\n\n\nprocedure: (delete-file path)\n\nreturns: unspecified\n\nlibraries: (rnrs files), (rnrs)\n\n" "path must be a string or some other implementation-dependent \nvalue that names a file.\ndelete-file removes the file named by path if it exists\nand can be deleted, otherwise it raises an exception with condition\ntype &i/o-filename.\nWhether delete-file follows symbolic links is unspecified.\n\n\n") ("io:s91" "\n\n\nprocedure: (bytevector->string bytevector transcoder)\n\nreturns: a string containing the characters encoded in bytevector\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "This operation, at least in effect, creates a bytevector input port with\nthe specified transcoder from which all of the available characters\nare read, as if by get-string-all, and placed into the output\nstring.\n\n" "\n\n" "(let ([tx (make-transcoder (utf-8-codec) (eol-style lf)\n\n            (error-handling-mode replace))])\n\n  (bytevector->string #vu8(97 98 99) tx)) --> \"abc\"\n") ("io:s92" "\n\nprocedure: (string->bytevector string transcoder)\n\nreturns: a bytevector containing the encodings of the characters in string\n\nlibraries: (rnrs io ports), (rnrs)\n\n" "This operation, at least in effect, creates a bytevector output port with\nthe specified transcoder to which all of the characters of\nstring are written, then extracts a bytevector containing the\naccumulated bytes.\n\n" "\n\n" "(let ([tx (make-transcoder (utf-8-codec) (eol-style none)\n\n            (error-handling-mode raise))])\n\n  (string->bytevector \"abc\" tx)) --> #vu8(97 98 99)\n") ("io:s93" "\n\nprocedure: (string->utf8 string)\n\nreturns: a bytevector containing the UTF-8 encoding of string\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n") ("io:s94" "\n\nprocedure: (string->utf16 string)\n\n\n\nprocedure: (string->utf16 string endianness)\n\n\n\nprocedure: (string->utf32 string)\n\n\n\nprocedure: (string->utf32 string endianness)\n\nreturns: a bytevector containing the specified encoding of string\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "endianness must be one of the symbols big or little.\nIf endianness is not provided or is the symbol big,\nstring->utf16 returns the UTF-16BE encoding of string and\nstring->utf32 returns the UTF-32BE encoding of string.\nIf endianness is the symbol little, string->utf16 returns the\nUTF-16LE encoding of string and string->utf32 returns the\nUTF-32LE encoding of string.\nNo byte-order mark is included in the encoding.\n\n\n") ("io:s95" "\n\n\nprocedure: (utf8->string bytevector)\n\nreturns: a string containing the UTF-8 decoding of bytevector\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n") ("io:s96" "\n\nprocedure: (utf16->string bytevector endianness)\n\n\n\nprocedure: (utf16->string bytevector endianness endianness-mandatory?)\n\n\n\nprocedure: (utf32->string bytevector endianness)\n\n\n\nprocedure: (utf32->string bytevector endianness endianness-mandatory?)\n\nreturns: a string containing the specified decoding of bytevector\n\nlibraries: (rnrs bytevectors), (rnrs)\n\n" "endianness must be one of the symbols big or\nlittle.\nThese procedures return a UTF-16 or UTF-32 decoding of bytevector,\nwith the endianness of the representation determined from the endianness\nargument or byte-order mark (BOM).\nIf endianness-mandatory? is not provided or is #f, the\nendianness is determined by a BOM at the front of bytevector or, if\nno BOM is present, by endianness.\nIf endianness-mandatory? is #t, the endianness is\ndetermined by endianness, and, if a BOM appears at the front of\nbytevector, it is treated as a regular character encoding.\n\n")))))